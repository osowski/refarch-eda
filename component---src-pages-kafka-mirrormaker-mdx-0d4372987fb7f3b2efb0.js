(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{"N/DV":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return l}));a("91GP"),a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("q1tI");var r=a("7ljp"),n=a("013z");a("qKvR");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var s={},c={_frontmatter:s},i=n.a;function l(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(r.b)(i,o({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Mirror Maker 2.0 is the new replication feature of Kafka 2.4. In this note we are presenting different test scenarios for topic replication."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Replicate from local cluster to Event Streams on Cloud (See detail ",Object(r.b)("a",o({parentName:"li"},{href:"#scenario-1-from-kafka-local-as-source-to-event-streams-on-cloud-as-target"}),"in the scenario 1 section"),")"),Object(r.b)("li",{parentName:"ul"},"Replicate from ",Object(r.b)("a",o({parentName:"li"},{href:"https://strimzi.io/"}),"Strimzi")," ‘local’ Kafka cluster running on OpenShift to Event Streams on Cloud. (See detail ",Object(r.b)("a",o({parentName:"li"},{href:"#scenario-2-run-mirror-maker-2-cluster-close-to-target-cluster"}),"in the scenario 2 section"),")"),Object(r.b)("li",{parentName:"ul"},"Replicate from ",Object(r.b)("a",o({parentName:"li"},{href:"#scenario-3-from-event-streams-to-local-cluster"}),"Event Streams on cloud being the source cluster to local Kafka cluster")," running on local machine (started via docker-compose) using Strimzi Kafka docker image."),Object(r.b)("li",{parentName:"ul"},"Replicate from ",Object(r.b)("a",o({parentName:"li"},{href:"#scenario-5-from-event-streams-on-premise-to-event-streams-on-cloud"}),"Event Streams on premise running on Openshift being the source cluster to Event Stream on the Cloud as target cluster"),".")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",o({parentName:"tr"},{align:null}),"Environment"),Object(r.b)("th",o({parentName:"tr"},{align:null}),"Source"),Object(r.b)("th",o({parentName:"tr"},{align:null}),"Target"),Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Connect"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"1"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Local"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Event Streams on Cloud"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Local")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"2"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Strimzi on OCP"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Event Streams on Cloud"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"OCP / Roks")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"3"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Event Streams on Cloud"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Local"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Local")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"4"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Event Streams on Cloud"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Strimzi on OCP"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"OCP/ Roks")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"5"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Event Streams on OCP"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Event Streams on Cloud"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"OCP / Roks")))),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"mirror-maker-2")," folder includes, scripts, code and configurations to support those scenarios."),Object(r.b)("h2",null,"Pre-requisites"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"You need to have one Event Streams service created on IBM Cloud."),Object(r.b)("li",{parentName:"ul"},"You may need to use Event Streams CLI. So follow ",Object(r.b)("a",o({parentName:"li"},{href:"https://cloud.ibm.com/docs/services/EventStreams?topic=eventstreams-cli#cli"}),"those instructions")," to get it.")),Object(r.b)("p",null,"The following ibmcloud CLI command presents the Event Stream cluster’s metadata, like the broker list and the cluster ID:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"ibmcloud es cluster\n")),Object(r.b)("p",null,"For other CLI commands see ",Object(r.b)("a",o({parentName:"p"},{href:"https://cloud.ibm.com/docs/services/EventStreams?topic=eventstreams-cli_reference"}),"this summary"),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"To run local cluster we use docker-compose and docker. The docker compose file to start a local 3 Kafka brokers and 2 Zookeepers cluster is in ",Object(r.b)("inlineCode",{parentName:"li"},"mirror-maker-2/local-cluster")," folder. This compose file uses a local docker network called ",Object(r.b)("inlineCode",{parentName:"li"},"kafkanet"),". The docker image used for Kafka is coming from Strimzi open source project and is for the Kafka 2.4 version."),Object(r.b)("li",{parentName:"ul"},"When the Event Streams service is created, add a service credentials and get the brokers list and api key information. We will use them in a setenv.sh script file under ",Object(r.b)("inlineCode",{parentName:"li"},"mirror-maker-2")," folder to define environment variables.")),Object(r.b)("h2",null,"General concepts"),Object(r.b)("p",null,"As ",Object(r.b)("a",o({parentName:"p"},{href:"https://strimzi.io/docs/master/#con-configuring-mirror-maker-deployment-configuration-kafka-mirror-maker"}),"Mirror maker 2.0")," is using kafka Connect framework, we recommend to review our summary ",Object(r.b)("a",o({parentName:"p"},{href:"https://ibm-cloud-architecture.github.io/refarch-eda/kafka/connect/"}),"in this note"),". "),Object(r.b)("p",null,"The figure below illustrates the mirror maker internal components running within Kafka Connect."),Object(r.b)("img",{src:"images/mm-k-connect.png",alt:null}),Object(r.b)("p",null,"In distributed mode, Mirror Maker creates the following topics to the target cluster:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"mm2-configs.source.internal: This topic will store the connector and task configurations."),Object(r.b)("li",{parentName:"ul"},"mm2-offsets.source.internal: This topic is used to store offsets for Kafka Connect."),Object(r.b)("li",{parentName:"ul"},"mm2-status.source.internal: This topic will store status updates of connectors and tasks."),Object(r.b)("li",{parentName:"ul"},"source.heartbeats"),Object(r.b)("li",{parentName:"ul"},"source.checkpoints.internal")),Object(r.b)("p",null,"A typical mirror maker configuration is done via property file and defines source and target clusters with their connection properties and the replication flow definitions. Here is a simple example for a local cluster to a target cluster using TLS v1.2 and Sasl authentication protocol."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-properties"}),'clusters=source, target\nsource.bootstrap.servers=${KAFKA_SOURCE_BROKERS}\ntarget.bootstrap.servers=${KAFKA_TARGET_BROKERS}\ntarget.security.protocol=SASL_SSL\ntarget.ssl.protocol=TLSv1.2\ntarget.ssl.endpoint.identification.algorithm=https\ntarget.sasl.mechanism=PLAIN\ntarget.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password=${KAFKA_TARGET_APIKEY};\n# enable and configure individual replication flows\nsource->target.enabled=true\nsource->target.topics=products\ntasks.max=10\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"White listed topics are set with the ",Object(r.b)("inlineCode",{parentName:"li"},"source->target.topics")," attribute of the replication flow and uses ",Object(r.b)("a",o({parentName:"li"},{href:"https://www.vogella.com/tutorials/JavaRegularExpressions/article.html"}),"Java regular expression")," syntax."),Object(r.b)("li",{parentName:"ul"},"Blacklisted topics: by default the following pattern is applied:")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-properties"}),"blacklist = [follower\\.replication\\.throttled\\.replicas, leader\\.replication\\.throttled\\.replicas, message\\.timestamp\\.difference\\.max\\.ms, message\\.timestamp\\.type, unclean\\.leader\\.election\\.enable, min\\.insync\\.replicas]\n")),Object(r.b)("p",null,"but can be also specified with the properties: ",Object(r.b)("inlineCode",{parentName:"p"},"topics.blacklist"),". Comma-separated lists are also supported and Java regular expression."),Object(r.b)("p",null,"Internally ",Object(r.b)("inlineCode",{parentName:"p"},"MirrorSourceConnector")," and ",Object(r.b)("inlineCode",{parentName:"p"},"MirrorCheckpointConnector")," will\ncreate multiple tasks (up to ",Object(r.b)("inlineCode",{parentName:"p"},"tasks.max")," property), ",Object(r.b)("inlineCode",{parentName:"p"},"MirrorHeartbeatConnector"),"\ncreates only one single task. ",Object(r.b)("inlineCode",{parentName:"p"},"MirrorSourceConnector")," will have one task per topic-partition to replicate, while ",Object(r.b)("inlineCode",{parentName:"p"},"MirrorCheckpointConnector")," will have one task per consumer group. The Kafka connect framework uses the coordinator API, with the ",Object(r.b)("inlineCode",{parentName:"p"},"assign()")," API, so there is no consumer group while fetching data from source topic. There is no call to ",Object(r.b)("inlineCode",{parentName:"p"},"commit()")," neither: the rebalancing occurs only when there is a new topic created that matches the whitelist pattern."),Object(r.b)("h2",null,"Scenario 1: From Kafka local as source to Event Streams on Cloud as Target"),Object(r.b)("p",null,"The test scenario goal is to send the product definitions in the local ",Object(r.b)("inlineCode",{parentName:"p"},"products")," topic and then start mirror maker to see the data replicated to the ",Object(r.b)("inlineCode",{parentName:"p"},"source.products")," topic in Event Streams cluster."),Object(r.b)("img",{src:"images/local-to-es.png",alt:null}),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Set the environment variables in ",Object(r.b)("inlineCode",{parentName:"li"},"setenv.sh")," script for the source broker to be your local cluster, and the target to be event streams. Be sure to also set Event Streams APIKEY:")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),'export KAFKA_SOURCE_BROKERS=kafka1:9092,kafka2:9093,kafka3:9094\n\nexport KAFKA_TARGET_BROKERS=broker-3-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-1-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-0-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\nexport KAFKA_TARGET_APIKEY="<password attribut in event streams credentials>"\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"It may be needed to create the topics in the target cluster. This depends if mirror maker 2.0 is able to access the AdminClient API. Normally we observed with Event streams APIKEY it is possible to create topic with AdminClient, so there is no need to do the following commands. For other configuration where Access Control policies do not authorize program to create topic dynamically, the commands performed by and admin user will create the needed topic. (the mm2 prefix is the one used by mirror maker, but the name of the topic could be defined in the mirror maker properties)"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"ibmcloud es topic-create -n mm2-configs.source.internal -p 1  -c cleanup.policy=compact\nibmcloud es topic-create -n mm2-offsets.source.internal -p 25 -c cleanup.policy=compact\nibmcloud es topic-create -n mm2-status.source.internal -p 5 -c cleanup.policy=compact\nibmcloud es topic-create -n source.products -p 1\nibmcloud es topic-create -n source.heartbeats -p 1 -c cleanup.policy=compact\nibmcloud es topic-create -n source.checkpoints.internal -p 1 -c cleanup.policy=compact\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"In one Terminal window, start the local cluster using ",Object(r.b)("inlineCode",{parentName:"p"},"docker-compose")," under the ",Object(r.b)("inlineCode",{parentName:"p"},"mirror-maker-2/local-cluster")," folder: ",Object(r.b)("inlineCode",{parentName:"p"},"docker-compose up &"),". The data are persisted on the local disk in this folder.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"If this is the first time you started the source cluster, you need to create the ",Object(r.b)("inlineCode",{parentName:"p"},"products")," topic. Start a Kafka container to access the Kafka tools with the command:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"docker run -ti -v $(pwd):/home --network kafkanet strimzi/kafka:latest-kafka-2.4.0 bash\n")),Object(r.b)("p",{parentName:"li"},"Then in the bash shell, go to ",Object(r.b)("inlineCode",{parentName:"p"},"/home/local-cluster")," folder and execute the script: ",Object(r.b)("inlineCode",{parentName:"p"},"./createProductsTopic.sh"),". Verify topic is created with the command: ",Object(r.b)("inlineCode",{parentName:"p"},"/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka1:9092 --list"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Send some products data to this topic. For that we use a docker python image. The docker file to build this image is ",Object(r.b)("inlineCode",{parentName:"p"},"python-kafka/Dockerfile-python")," so the command to build this image (if you change the image name be sure to use the new name in future command) is: ",Object(r.b)("inlineCode",{parentName:"p"},"docker build -f Dockerfile-python -t jbcodeforce/python37 .")),Object(r.b)("p",{parentName:"li"},"Once the image is built, start the python environment with the following commands:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"source ./setenv.sh\ndocker run -ti -v $(pwd):/home --rm -e KAFKA_BROKERS=$KAFKA_SOURCE_BROKERS --network kafkanet jbcodeforce/python37   bash\n")),Object(r.b)("p",{parentName:"li"},"In this isolated python container bash shell do the following to send the 5 first products:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{}),"$ echo $KAFKA_BROKERS\nkafka1:9092,kafka2:9093,kafka3:9094\n$ python SendProductToKafka.py ./data/products.json\n\n[KafkaProducer] - {'bootstrap.servers': 'kafka1:9092,kafka2:9093,kafka3:9094', 'group.id': 'ProductsProducer'}\n{'product_id': 'P01', 'description': 'Carrots', 'target_temperature': 4, 'target_humidity_level': 0.4, 'content_type': 1}\n{'product_id': 'P02', 'description': 'Banana', 'target_temperature': 6, 'target_humidity_level': 0.6, 'content_type': 2}\n{'product_id': 'P03', 'description': 'Salad', 'target_temperature': 4, 'target_humidity_level': 0.4, 'content_type': 1}\n{'product_id': 'P04', 'description': 'Avocado', 'target_temperature': 6, 'target_humidity_level': 0.4, 'content_type': 1}\n{'product_id': 'P05', 'description': 'Tomato', 'target_temperature': 4, 'target_humidity_level': 0.4, 'content_type': 2}\n[KafkaProducer] - Message delivered to products [0]\n[KafkaProducer] - Message delivered to products [0]\n[KafkaProducer] - Message delivered to products [0]\n[KafkaProducer] - Message delivered to products [0]\n[KafkaProducer] - Message delivered to products [0]\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"To validate the data are in the source topic we can use the kafka console consumer. Here are the basic commands:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"docker run -ti -v $(pwd):/home --network kafkanet strimzi/kafka:latest-kafka-2.4.0 bash\n$ cd bin\n$ ./kafka-console-consumer.sh --bootstrap-server kafka1:9092 --topic products --from-beginning\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Define the event streams cluster properties file for the Kafka tool command. Set the password attribute of the ",Object(r.b)("inlineCode",{parentName:"p"},"jaas.config")," to match Event Streams APIKEY. The ",Object(r.b)("inlineCode",{parentName:"p"},"eventstream.properties")," file looks like:"))),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-properties"}),'bootstrap.servers=broker-3-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-1-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-0-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\nsecurity.protocol=SASL_SSL\nssl.protocol=TLSv1.2\nsasl.mechanism=PLAIN\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password=....;\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Restart the ",Object(r.b)("inlineCode",{parentName:"p"},"kafka-console-consumer")," with the bootstrap URL to access to Event Streams and with the replicated topic: ",Object(r.b)("inlineCode",{parentName:"p"},"source.products"),". Use the previously created properties file to get authentication properties so the command looks like:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"source /home/setenv.sh\n./kafka-console-consumer.sh --bootstrap-server $KAFKA_TARGET_BROKERS --consumer.config /home/eventstream.properties --topic source.products --from-beginning\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Now we are ready to start Mirror Maker 2.0, close to the local cluster, using, yet another docker image:"))),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"docker run -ti -v $(pwd):/home --network kafkanet strimzi/kafka:latest-kafka-2.4.0 bash\n$ /home/local-cluster/launchMM2.sh\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"This ",Object(r.b)("inlineCode",{parentName:"em"},"launchMM2.sh")," script is updating a template properties file with the values of the environment variables and calls with this updated file: ",Object(r.b)("inlineCode",{parentName:"em"},"/opt/kafka/bin/connect-mirror-maker.sh mm2.properties"))),Object(r.b)("p",null,"The trace includes a ton of messages, which displays different Kafka connect consumers and producers, workers and tasks. The logs can be found in the ",Object(r.b)("inlineCode",{parentName:"p"},"/tmp/logs")," folder within the docker container. The table includes some of the elements of this configuration:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",o({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",o({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"Worker clientId=connect-2, groupId=target-mm2"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Herder for target cluster topics but reading source topic")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"Producer clientId=producer-1"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Producer to taget cluster")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"Consumer clientId=consumer-target-mm2-1, groupId=target-mm2]"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Subscribed to 25 partition(s): mm2-offsets.target.internal-0 to 24")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"Consumer clientId=consumer-target-mm2-2, groupId=target-mm2]"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Subscribed to 5 partition(s): mm2-status.target.internal-0 to 4")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"Consumer clientId=consumer-target-mm2-3, groupId=target-mm2]"),Object(r.b)("td",o({parentName:"tr"},{align:null}),"Subscribed to partition(s): mm2-configs.target.internal-0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"Worker clientId=connect-2, groupId=target-mm2 . Starting connectors and tasks using config offset 6."),Object(r.b)("td",o({parentName:"tr"},{align:null}),"This trace shows mirror maker will start to consume message from the offset 6. A previous run has already committed the offset for this client id. This illustrate a Mirror Maker restarts")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"Starting connector MirrorHeartbeatConnector and Starting task MirrorHeartbeatConnector-0"),Object(r.b)("td",o({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"Starting connector MirrorCheckpointConnector"),Object(r.b)("td",o({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:null}),"Starting connector MirrorSourceConnector"),Object(r.b)("td",o({parentName:"tr"},{align:null}))))),Object(r.b)("p",null,"As expected, in the consumer console we can see the 5 product messages arriving to the ",Object(r.b)("inlineCode",{parentName:"p"},"source.topics")," after the replication complete."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{}),"{'bootstrap.servers': 'kafka1:9092,kafka2:9093,kafka3:9094', 'group.id': 'ProductsProducer'}\n  {'product_id': 'P01', 'description': 'Carrots', 'target_temperature': 4, 'target_humidity_level': 0.4, 'content_type': 1}\n  {'product_id': 'P02', 'description': 'Banana', 'target_temperature': 6, 'target_humidity_level': 0.6, 'content_type': 2}\n  {'product_id': 'P03', 'description': 'Salad', 'target_temperature': 4, 'target_humidity_level': 0.4, 'content_type': 1}\n  {'product_id': 'P04', 'description': 'Avocado', 'target_temperature': 6, 'target_humidity_level': 0.4, 'content_type': 1}\n  {'product_id': 'P05', 'description': 'Tomato', 'target_temperature': 4, 'target_humidity_level': 0.4, 'content_type': 2}\n")),Object(r.b)("h2",null,"Scenario 2: Run Mirror Maker 2 Cluster close to target cluster"),Object(r.b)("p",null,"This scenario is similar to the scenario 1 but Mirror Maker 2.0 now, runs within an OpenShift cluster in the same data center as Event Streams cluster, so closer to the target cluster:"),Object(r.b)("img",{src:"images/mm2-local-to-es.png",alt:null}),Object(r.b)("p",null,"We have created an Event Streams cluster on Washington DC data center. We have Strimzi operators deployed in Washington data center OpenShift Cluster."),Object(r.b)("p",null,"Producers are running locally on the same OpenShift cluster, where vanilla Kafka is running, or can run remotely using exposed Kafka brokers Openshift route. (The black rectangles in the figure above represent those producers.)"),Object(r.b)("p",null,"What needs to be done:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Get a OpenShift cluster in the same data center as Event Streams service: See this ",Object(r.b)("a",o({parentName:"p"},{href:"https://cloud.ibm.com/kubernetes/catalog/about?platformType=openshift"}),"product introduction"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Create a project in OpenShift, for example: ",Object(r.b)("inlineCode",{parentName:"p"},"mirror-maker-2-to-es"),". Remember it is mapped to a namespace in Kubernetes.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"At the minimum, to run Mirror Maker 2, we need to deploy the Strimzi Custom Resource Definitions, and the Mirror Maker 2.0 operator. See the detail in sections from the ",Object(r.b)("a",o({parentName:"p"},{href:"deployments/strimzi/deploy/"}),"deployment note"),". The 0.17.0 source is in ",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/strimzi/strimzi-kafka-operator/releases"}),"this repository"),", unzip and use the ",Object(r.b)("inlineCode",{parentName:"p"},"install")," folder with Strimzi installation instructions."),Object(r.b)("p",{parentName:"li"}," ",Object(r.b)("em",{parentName:"p"},"The service account and role binding do not need to be re-installed if you did it previously."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"If not done yet, create a secret for the API KEY of the Event Streams cluster:\n",Object(r.b)("inlineCode",{parentName:"p"},"oc create secret generic es-api-secret --from-literal=password=<replace-with-event-streams-apikey>"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"As the vanilla kafka source cluster is using TLS to communicate between client and brokers, we need to create a k8s secret for a Java truststore created from the ",Object(r.b)("inlineCode",{parentName:"p"},"ca.cert")," of the source cluster. This certificate is also in another secret: ",Object(r.b)("inlineCode",{parentName:"p"},"my-cluster-clients-ca-cert"),". "))),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"# build a local crt file from the secret: \noc extract secret/my-cluster-clients-ca-cert --keys=ca.crt --to=- > ca.crt\n# Verify the certificate:\nopenssl x509 -in ca.crt -text\n# transform it for java truststore.jks:\nkeytool -import -trustcacerts -alias root -file ca.crt -keystore truststore.jks -storepass password -noprompt\n# create a secret from file\noc create secret generic kafka-truststore --from-file=./truststore.jks\n# Verify the created secret\noc describe secret kafka-truststore\n")),Object(r.b)("p",null,"!!! Attention\nAt this step, we have two options, one using the Mirror Maker Operator and get the configuration of it via a yaml file, or use properties file and a special docker image. As of 3/20/2020 we have found an issue on Strimzi 0.17-rc2 MM operator, so we are proposing to use the properties approach as ",Object(r.b)("a",o({parentName:"p"},{href:"sc2-mm2/"}),"documented in this separated note"),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Define source and target cluster properties in mirror maker 2.0 ",Object(r.b)("inlineCode",{parentName:"li"},"kafka-to-es-mm2.yml")," descriptor file. We strongly recommend to study the schema definition of this ",Object(r.b)("a",o({parentName:"li"},{href:"https://github.com/strimzi/strimzi-kafka-operator/blob/2d35bfcd99295bef8ee98de9d8b3c86cb33e5842/install/cluster-operator/048-Crd-kafkamirrormaker2.yaml#L648-L663"}),"custom resource from this page"),". The ",Object(r.b)("a",o({parentName:"li"},{href:"https://github.com/jbcodeforce/kafka-studies/blob/master/mirror-maker-2/local-cluster/kafka-to-es-mm2.yml"}),"yaml file we used is here"),".")),Object(r.b)("p",null,"!!! note\nconnectCluster defined the cluster alias used for Kafka Connect, it must match a cluster in the list at ",Object(r.b)("inlineCode",{parentName:"p"},"spec.clusters"),".\nThe config part can match the Kafka configuration for consumer or producer, except properties starting by ssl, sasl, security, listeners, rest, bootstarp.servers which are declared at the cluster definition level. Also we have some challenges to make the connection to event streams working, as of Strimzi version 0.17 RC2, we need to add an empty ",Object(r.b)("inlineCode",{parentName:"p"},"tls: {}")," stanza to get connected. Also below, the declaration is using the previously defined secret for event streams API key."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-yaml"}),'  alias: "event-streams-wdc-as-target"\n    bootstrapServers: broker-3...\n    tls: {}\n    authentication:\n      passwordSecret:\n          secretName: es-api-secret  \n          password: password \n      username: token\n      type: plain\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Deploy Mirror maker 2.0 within this project. ")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{}),"oc apply -f kafka-to-es-mm2.yaml \n")),Object(r.b)("p",null,"This commmand create a kubernetes deployment as illustrated below, with one pod as the replicas is set to 1. If we need to add parallel processing because of the topic to replicate has multiple partitions, or there are a lot of topics to replicate, then adding pods will help to scale horizontally. The pods are in the same consumer group, so Kafka Brokers will do the partition rebalancing among those new added consumers."),Object(r.b)("img",{src:"images/mm2-deployment.png",alt:null}),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"To validate the replication works, we will connect a consumer to the ",Object(r.b)("inlineCode",{parentName:"li"},"source.products")," topic on Event Streams. So we define a target cluster property file (",Object(r.b)("inlineCode",{parentName:"li"},"eventstreams.properties"),") like:")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-properties"}),'bootstrap.servers=broker-3-q.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-q.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\nsecurity.protocol=SASL_SSL\nssl.protocol=TLSv1.2\nsasl.mechanism=PLAIN\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="am_...";\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Start a producer to send product records to the source Kafka cluster. If you have done the scenario 1, the first product definitions may be already in the target cluster, so we can send a second batch of products using a second data file:")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),'export KAFKA_BROKERS="my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443"\nexport KAFKA_CERT="/home/ca.crt"\ndocker run -ti -v $(pwd):/home --rm -e KAFKA_CERT=$KAFKA_CERT -e KAFKA_BROKERS=$KAFKA_BROKERS jbcodeforce/python37   bash\npython SendProductToKafka.py ./data/products2.json\n')),Object(r.b)("p",null,"!!! note\nThe python code uses the CA certificate and not the java truststore. The Kafka option is ",Object(r.b)("inlineCode",{parentName:"p"},"ssl.ca.location"),". If the code was done in Java then the trustore needs to be part of the docker image or mounted from a kubernetes secret into the expected file inside the container."),Object(r.b)("p",null,"As an alternate to use this external producer, we can start a producer as pod inside Openshift, and then send the product one by one:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc run kafka-producer -ti --image=strimzi/kafka:latest-kafka-2.4.0  --rm=true --restart=Never -- bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic products\nIf you don t see a command prompt, try pressing enter.\n\n>{'product_id': 'P01', 'description': 'Carrots', 'target_temperature': 4, 'target_humidity_level': 0.4, 'content_type': 1}\n>{'product_id': 'P02', 'description': 'Banana', 'target_temperature': 6, 'target_humidity_level': 0.6, 'content_type': 2}\n>{'product_id': 'P03', 'description': 'Salad', 'target_temperature': 4, 'target_humidity_level': 0.4, 'content_type': 1}\n>{'product_id': 'P04', 'description': 'Avocado', 'target_temperature': 6, 'target_humidity_level': 0.4, 'content_type': 1}\n>{'product_id': 'P05', 'description': 'Tomato', 'target_temperature': 4, 'target_humidity_level': 0.4, 'content_type': 2}\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"To validate the source ",Object(r.b)("inlineCode",{parentName:"li"},"products")," topic has records, start a consumer as pod on Openshift within the source Kafka cluster using the Strimzi/kafka image.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc run kafka-consumer -ti --image=strimzi/kafka:latest-kafka-2.4.0 --rm=true --restart=Never -- bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic products --from-beginning\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Finally to validate the product records are replicated to the Event Streams ",Object(r.b)("inlineCode",{parentName:"li"},"source.products")," we need to start a consumer connected to Event streams.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),'oc run kafka-consumer -ti --image=strimzi/kafka:latest-kafka-2.4.0 --rm=true --restart=Never -- bin/kafka-console-consumer.sh --bootstrap-server broker-3-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-1-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-0-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093 --consumer-property ssl.protocol=TLSv1.2 --consumer-property security.protocol=SASL_SSL --consumer-property sasl.jaas.config="org.apache.kafka.common.security.plain.PlainLoginModule required username=token password=am_rbb9e794mMwhE-KGPYo0hhW3h91e28OhT8IlruFe5;" --consumer-property sasl.mechanism=PLAIN --topic source.products --from-beginning\n')),Object(r.b)("h2",null,"Scenario 3: From Event Streams to local cluster"),Object(r.b)("p",null,"For this scenario the source is Event Streams on IBM Cloud and the target is a local server (may be on a laptop using vanilla Kafka image (Strimzi kafka 2.4 docker image) started with docker compose). This target cluster runs two zookeeper nodes, and three kafka nodes. We need 3 kafka brokers as mirror maker created topics with a replication factor set to 3."),Object(r.b)("img",{src:"images/mm2-scen3.png",alt:null}),Object(r.b)("p",null,"This time the producer adds headers to the Records sent so we can validate headers replication. The file ",Object(r.b)("inlineCode",{parentName:"p"},"es-cluster/es-mirror-maker.properties")," declares the mirroring settings as below:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-properties"}),'clusters=source, target\nsource.bootstrap.servers=broker-3-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-1-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-0-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\nsource.security.protocol=SASL_SSL\nsource.ssl.protocol=TLSv1.2\nsource.sasl.mechanism=PLAIN\nsource.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="985...";\ntarget.bootstrap.servers=kafka1:9092,kafka2:9093,kafka3:9094\n# enable and configure individual replication flows\nsource->target.enabled=true\nsource->target.topics=orders\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Start the target cluster runnning on your laptop using:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"docker-compose up\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Start ",Object(r.b)("a",o({parentName:"p"},{href:"https://cwiki.apache.org/confluence/display/KAFKA/KIP-382%3A+MirrorMaker+2.0"}),"mirror maker2.0"),": "),Object(r.b)("p",{parentName:"li"},"  By using a new container, start another kakfa 2.4+ docker container, connected to the  brokers via the ",Object(r.b)("inlineCode",{parentName:"p"},"kafkanet")," network, and mounting the configuration in the ",Object(r.b)("inlineCode",{parentName:"p"},"/home"),":"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"docker run -ti --network kafkanet -v $(pwd):/home strimzi/kafka:latest-kafka-2.4.0 bash\n")),Object(r.b)("p",{parentName:"li"},"  Inside this container starts mirror maker 2.0 using the script: ",Object(r.b)("inlineCode",{parentName:"p"},"/opt/kakfa/bin/connect-mirror-maker.sh")),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"/opt/kakfa/bin/connect-mirror-maker.sh /home/strimzi-mm2.properties\n")),Object(r.b)("p",{parentName:"li"},"  The ",Object(r.b)("inlineCode",{parentName:"p"},"strimzi-mm2.properties")," properties file given as argument defines the source and target clusters and the topics to replicate:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-properties"}),"clusters=source, target\nsource.bootstrap.servers=my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443\nsource.security.protocol=SSL\nsource.ssl.truststore.password=password\nsource.ssl.truststore.location=/home/truststore.jks\ntarget.bootstrap.servers=kafka1:9092,kafka2:9093,kafka3:9094\n# enable and configure individual replication flows\nsource->target.enabled=true\nsource->target.topics=orders\n")),Object(r.b)("p",{parentName:"li"},"  As the source cluster is deployed on Openshift, the exposed route to access the brokers is using TLS connection. So we need the certificate and create a truststore to be used by those Java programs. All kafka tools are done in java or scala so running in a JVM, which needs truststore for keep trusted TLS certificates.\nWhen running from a remote system to get the certificate do the following steps:"),Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Get the host ip address from the Route resource"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc get routes my-cluster-kafka-bootstrap -o=jsonpath='{.status.ingress[0].host}{\"\\n\"}'\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Get the TLS certificate from the broker"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc get secrets\noc extract secret/my-cluster-cluster-ca-cert --keys=ca.crt --to=- > ca.crt\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Transform the certificate fo java truststore"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{}),"```shell\nkeytool -import -trustcacerts -alias root -file ca.crt -keystore truststore.jks -storepass password -noprompt\n```\n")),Object(r.b)("p",{parentName:"li"},"For Openshift or Kubernetes deployment, the mirror maker descriptor needs to declare the TLS stamza:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{className:"language-yaml"}),"mirrors:\n")))),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"sourceCluster: “my-cluster-source”\ntargetCluster: “my-cluster-target”\nsourceConnector:\nconfig:\nreplication.factor: 1\noffset-syncs.topic.replication.factor: 1\nsync.topic.acls.enabled: “false”\ntargetConnector:\ntls:\ntrustedCertificates:\n- secretName: my-cluster-cluster-cert\ncertificate: ca.crt",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",o({parentName:"pre"},{}),""))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"The consumer may be started in second or third step. To start it, you can use a new container or use one of the running kafka broker container. Using the ",Object(r.b)("inlineCode",{parentName:"p"},"Docker perspective")," in Visual Code, we can get into a bash shell within one of the Kafka broker container. The local folder is mounted to ",Object(r.b)("inlineCode",{parentName:"p"},"/home"),". Then the script, ",Object(r.b)("inlineCode",{parentName:"p"},"consumeFromLocal.sh source.orders")," will get messages from the replicated topic: ",Object(r.b)("inlineCode",{parentName:"p"},"source.orders")))),Object(r.b)("h2",null,"Scenario 4: From Event Streams On Cloud to Strimzi Cluster on Openshift"),Object(r.b)("p",null,"We are reusing the Event Streams on Cloud cluster on Washington DC data center as source target and the vanilla Kafka 2.4 cluster as target, also running within Washington data center in a OpenShift Cluster. As both clusters are in the same data center, we deploy Mirror Maker 2.0 close to target kafka cluster."),Object(r.b)("img",{src:"images/mm2-test1.png",alt:null}),Object(r.b)("h2",null,"Scenario 5: From event streams on premise to event streams on cloud"),Object(r.b)("p",null,"The source cluster is a IBM Event Streams cluster running on Openshift on-premise servers. It was installed following the instructions ",Object(r.b)("a",o({parentName:"p"},{href:"https://ocp42.cloudpak8s.io/integration/deploy-eventstreams/"}),"documented here"),"."),Object(r.b)("img",{src:"images/mm2-a-a.png",alt:null}),Object(r.b)("p",null,"The target cluster is also IBM Event Streams on Cloud."),Object(r.b)("p",null,"TO BE CONTINUED"),Object(r.b)("h2",null,"Typical errors in Mirror Maker 2 traces"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Plugin class loader for connector: ‘org.apache.kafka.connect.mirror.MirrorCheckpointConnector’ was not found. ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"This error message is a light issue in kafka 2.4 and does not impact the replication. In Kafka 2.5 this message is for DEBUG logs."))),Object(r.b)("li",{parentName:"ul"},"Error while fetching metadata with correlation id 2314 : {source.heartbeats=UNKNOWN_TOPIC_OR_PARTITION}:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Those messages may come from multiple reasons. One is the name topic is not created. In Event Streams topics needs to be created via CLI or User Interface. It can also being related to the fact the consumer polls on a topic that has just been created and the leader for this topic-partition is not yet available, you are in the middle of a leadership election."),Object(r.b)("li",{parentName:"ul"},"The advertised listener may not be set or found."))),Object(r.b)("li",{parentName:"ul"},"Exception on not being able to create Log directory: do the following: ",Object(r.b)("inlineCode",{parentName:"li"},"export LOG_DIR=/tmp/logs")),Object(r.b)("li",{parentName:"ul"},"ERROR WorkerSourceTask{id=MirrorSourceConnector-0} Failed to flush, timed out while waiting for producer to flush outstanding 1 messages"),Object(r.b)("li",{parentName:"ul"},"ERROR WorkerSourceTask{id=MirrorSourceConnector-0} Failed to commit offsets (org.apache.kafka.connect.runtime.SourceTaskOffsetCommitter:114)")))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-kafka-mirrormaker-mdx-0d4372987fb7f3b2efb0.js.map