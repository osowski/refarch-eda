{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./src/pages/use-cases/kafka-streams/lab-2/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss"],"names":["PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","aria-label","list","React","Component","LastModifiedDate","date","lastModified","Date","toLocaleDateString","day","year","month","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports","_frontmatter","makeShortcode","name","console","warn","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-use-cases-kafka-streams-lab-2-index-mdx-f5ad92375e269774855c.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <AnchorLinks mdxType=\"AnchorLinks\">\n    <AnchorLink mdxType=\"AnchorLink\">Overview</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Scenario Prerequisites</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Adding in more Kafka Streams operators</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Producing to and Consuming from a Kafka Topic on Event Streams</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Overview`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`This is a continuation of the previous `}{`[Lab 1]`}{`(/use-cases/kafka-streams/lab-1/. You can follow most of those steps before you get started here.`}</li>\n      <li parentName=\"ul\">{`There’s a few more pre-reqs (if you so choose to use them) outlined below.`}</li>\n    </ul>\n    <h2>{`Scenario Prerequisites`}</h2>\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`For the purposes of this lab we suggest Java 8+`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Maven`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Maven will be needed for bootstrapping our application from the command-line and running\nour application.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`An IDE of your choice`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Ideally an IDE that supports Quarkus (such as Visual Studio Code)`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`OpenShift Container Platform, IBM Cloud Pak for Integration and IBM Event Streams`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`This is an optional portion of the lab for those who have access to an OCP Cluster, IBM Cloud Pak for Integration\nas well as IBM Event Streams installed on top of the Cloud Pak.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`The following are optional`}</strong></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`OpenShift Container Platform`}</strong></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`v4.4.x`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`IBM Cloud Pak for Integration`}</strong></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`CP4I2020.2`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`IBM Event Streams`}</strong></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The section on use with Event Streams on CP4I assumes Event Streams v10. IF using a previous version such as ESv2019.4.2\nthere are some differences to how you would configure `}<inlineCode parentName=\"li\">{`application.properties`}</inlineCode>{` to establish a connectio`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Adding in more Kafka Streams operators`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Cool. Let’s now create a test to test two different operators, `}<inlineCode parentName=\"li\">{`filter`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`map`}</inlineCode>{`. Let’s add the following declarations.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`private static String tradingTable = \"tradingTable\";\nprivate static String tradingStoreName = \"tradingStore\";\nprivate static TestInputTopic<String, String> tradingTableTopic;\n`}</code></pre>\n    <p>{`Inside the `}<inlineCode parentName=\"p\">{`buildTopology()`}</inlineCode>{` function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`KeyValueBytesStoreSupplier tradingStoreSupplier = Stores.persistentKeyValueStore(tradingStoreName);\n\nKTable<String, String> stockTradingStore = builder.table(tradingTable,\n            Consumed.with(Serdes.String(), Serdes.String()),\n            Materialized.as(tradingStoreSupplier));\n`}</code></pre>\n    <p>{`And let’s edit the `}<inlineCode parentName=\"p\">{`branch[1]`}</inlineCode>{` logic again to create new `}<inlineCode parentName=\"p\">{`KeyValue`}</inlineCode>{` pairs of `}<inlineCode parentName=\"p\">{`userId`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`stockSymbol`}</inlineCode></p>\n    <p><em parentName=\"p\">{`Note`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`Like in Lab 1, since we’re changing `}<inlineCode parentName=\"li\">{`branches[1]`}</inlineCode>{` logic you will need to comment out the `}<inlineCode parentName=\"li\">{`@Test`}</inlineCode>{` annotation for `}<inlineCode parentName=\"li\">{`filteredStreamHasTwoRecords()`}</inlineCode>{`\ntest function or there will be exceptions thrown.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`branches[1].filter(\n            (key, value) -> (value.totalCost > 5000)\n        )\n        .map(\n            (key, value) -> KeyValue.pair(value.userId, value.stockSymbol)\n        )\n        .to(\n            tradingTable,\n            Produced.with(Serdes.String(), Serdes.String())\n        );\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You may notice something different here. Previously we wrote straight to `}<inlineCode parentName=\"li\">{`outTopic`}</inlineCode>{`, however now we’re writing to\na KTable so that we can query the State Store with our test. So let’s create a new test like below -`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Test\n    public void filterAndMapNewPair() {\n\n        FinancialMessage mock = new FinancialMessage(\n            \"1\", \"MET\", \"SWISS\", 12, 1822.38, 21868.55, 94, 7, true\n        );\n        inTopic.pipeInput(\"1\", mock);\n\n        KeyValueStore<String,ValueAndTimestamp<String>> tableStore = testDriver.getTimestampedKeyValueStore(tradingStoreName);\n        Assertions.assertEquals(1, tableStore.approximateNumEntries());\n        Assertions.assertEquals(\"MET\", tableStore.get(\"1\").value());\n        //System.out.println(tableStore.get(\"1\").value());\n    }\n`}</code></pre>\n    <p>{`The first assertion checks whether the store has a record and the second assertion checks that the mock record that we\ninserted has the correct value as our map function created new KeyValue pairs of of `}<inlineCode parentName=\"p\">{`<userId, stockSymbol>`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It’s now time to move to something a little bit more advanced. We’re not going to join a KStream with a KTable. The Streams API\nhas an inner join, left join, and an outer join. We’ll mention this later but KStream-KTable joins are Non-Windowed and asymmetric.\nBy asymmetric we mean that a join only gets triggered if the left input stream gets a new record while the right (our KTable) is only\nused to hold our input records and only used to update a materialized table.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Let’s instantiate a few more variables.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    private static String joinedTopicName = \"joinedTopic\";\n    private static TestOutputTopic<String, String> joinedTopic;\n    private static String joinedStoreName = \"joinedStore\";\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`And let’s create a new KTable to persist the new joined records so that we can query it.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`KTable<String, String> joinedMessageStore = builder.table(joinedTopicName,\n            Consumed.with(Serdes.String(), Serdes.String()),\n            Materialized.as(joinedStoreSupplier));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Comment out the previous branch logic or remove them. Our `}<inlineCode parentName=\"li\">{`buildTopology()`}</inlineCode>{` function should look like the below -`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void buildTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        KeyValueBytesStoreSupplier storeSupplier = Stores.persistentKeyValueStore(storeName);\n        KeyValueBytesStoreSupplier tradingStoreSupplier = Stores.persistentKeyValueStore(tradingStoreName);\n        KeyValueBytesStoreSupplier joinedStoreSupplier = Stores.persistentKeyValueStore(joinedStoreName);\n\n        KStream<String, FinancialMessage> transactionStream =\n            builder.stream(\n                inTopicName,\n                Consumed.with(Serdes.String(), financialMessageSerde)\n            );\n\n        KTable<String, String> stockTradingStore = builder.table(tradingTable,\n            Consumed.with(Serdes.String(), Serdes.String()),\n            Materialized.as(tradingStoreSupplier));\n\n        KTable<String, String> joinedMessageStore = builder.table(joinedTopicName,\n            Consumed.with(Serdes.String(), Serdes.String()),\n            Materialized.as(joinedStoreSupplier));\n\n        KStream<String, String> joinedStream = transactionStream.join(\n            stockTradingStore,\n            (financialMessage, companyName) -> \"userId = \" + financialMessage.userId + \" companyName = \" + companyName);\n\n        joinedStream.to(\n            joinedTopicName,\n            Produced.with(Serdes.String(), Serdes.String()));\n\n        testDriver = new TopologyTestDriver(builder.build(), getStreamsConfig());\n        inTopic = testDriver.createInputTopic(inTopicName, new StringSerializer(), new JsonbSerializer<FinancialMessage>());\n        tradingTableTopic = testDriver.createInputTopic(tradingTable, new StringSerializer(), new StringSerializer());\n        joinedTopic = testDriver.createOutputTopic(joinedTopicName, new StringDeserializer(), new StringDeserializer());\n    }\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`A closer examination shows us the following`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`        KTable<String, String> joinedMessageStore = builder.table(joinedTopicName,\n            Consumed.with(Serdes.String(), Serdes.String()),\n            Materialized.as(joinedStoreSupplier));\n\n        KStream<String, String> joinedStream = transactionStream.join(\n            stockTradingStore,\n            (financialMessage, companyName) -> \"userId = \" + financialMessage.userId + \" companyName = \" + companyName);\n\n        joinedStream.to(\n            joinedTopicName,\n            Produced.with(Serdes.String(), Serdes.String()));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A new KStream named `}<inlineCode parentName=\"p\">{`joinedStream`}</inlineCode>{` is created that is the result of an `}<inlineCode parentName=\"p\">{`inner join`}</inlineCode>{` between the left `}<inlineCode parentName=\"p\">{`transactionStream`}</inlineCode>{` and\nthe right table `}<inlineCode parentName=\"p\">{`stockTradingStore`}</inlineCode>{`. A join is performed on matching keys between the Stream and the Table and matched records\nproduced a new `}<inlineCode parentName=\"p\">{`<String, String>`}</inlineCode>{` pair with the value of `}<inlineCode parentName=\"p\">{`\"userId = \" + financialMessage.userId + \" companyName = \" + companyName`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Let’s implement a simple test to make sure that our inner join works.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Test\n    public void checkStreamAndTableJoinHasOneRecord() {\n\n        tradingTableTopic.pipeInput(\"2\", \"Metropolitan Museum of Art\");\n\n        FinancialMessage mock = new FinancialMessage(\n            \"1\", \"MET\", \"SWISS\", 12, 1822.38, 21868.55, 94, 7, true\n        );\n        inTopic.pipeInput(\"1\", mock);\n\n        KeyValueStore<String,ValueAndTimestamp<String>> joinedTableStore = testDriver.getTimestampedKeyValueStore(joinedStoreName);\n        Assertions.assertEquals(1, joinedTableStore.approximateNumEntries());\n        System.out.println(joinedTableStore.get(\"1\").value());\n    }\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Our KTable gets one record `}<inlineCode parentName=\"li\">{`(\"1\", \"Metropolitan Museum of Art\")`}</inlineCode>{`, and our Stream gets our mock message. The `}<inlineCode parentName=\"li\">{`inTopic`}</inlineCode>{`\nhere is the left side of the inner join so a join gets triggered. The `}<inlineCode parentName=\"li\">{`joinedTableStore`}</inlineCode>{` has the results of the `}<inlineCode parentName=\"li\">{`joinedTopic`}</inlineCode>{`\nso that we can query it. However, this test fails. Why? The reaosn is due to the fact that our `}<inlineCode parentName=\"li\">{`tradingTableTopic`}</inlineCode>{` has a record with\na key of `}<inlineCode parentName=\"li\">{`\"2\"`}</inlineCode>{` and our message has a key of `}<inlineCode parentName=\"li\">{`\"1\"`}</inlineCode>{` so there are no matching records. To make the test pass, change the 2 to a 1.`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`Time to create a new Test class to not try to confuse ourselves too much. But first let’s create two new POJO classes\nand name them `}<inlineCode parentName=\"li\">{`EnrichedMessage.java`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`AggregatedMessage.java`}</inlineCode>{`.`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`EnrichedMessage`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.cpat.Domain;\n\n\npublic class EnrichedMessage {\n\n    public String userId;\n    public String stockSymbol;\n    public int quantity;\n    public double stockPrice;\n    public double totalCost;\n    public double adjustedCost;\n    public boolean technicalValidation;\n    public String companyName;\n\n    public EnrichedMessage (FinancialMessage message, String companyName) {\n        this.userId = message.userId;\n        this.stockSymbol = message.stockSymbol;\n        this.quantity = message.quantity;\n        this.stockPrice = message.stockPrice;\n        this.totalCost = message.totalCost;\n        this.companyName = companyName;\n\n        if (message.technicalValidation)\n        {\n            this.technicalValidation = message.technicalValidation;\n            this.adjustedCost = message.totalCost * 1.15;\n        }\n\n        else {\n            this.technicalValidation = message.technicalValidation;\n            this.adjustedCost = message.totalCost;\n        }\n    }\n}\n`}</code></pre>\n    <p><em parentName=\"p\">{`AggregatedMessage`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.cpat.Domain;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\n\n\npublic class AggregatedMessage {\n\n    public String userId;\n    public String stockSymbol;\n    public int quantity;\n    public double stockPrice;\n    public double totalCost;\n    public double adjustedCost;\n    public boolean technicalValidation;\n    public String companyName;\n    public int count;\n    public double sum;\n    public double average;\n\n    public AggregatedMessage updateFrom(EnrichedMessage message) {\n        this.userId = message.userId;\n        this.stockSymbol = message.stockSymbol;\n        this.quantity = message.quantity;\n        this.stockPrice = message.stockPrice;\n        this.totalCost = message.totalCost;\n        this.companyName = message.companyName;\n        this.adjustedCost = message.adjustedCost;\n        this.technicalValidation = message.technicalValidation;\n\n        this.count ++;\n        this.sum += message.adjustedCost;\n        this.average = BigDecimal.valueOf(sum / count)\n                    .setScale(1, RoundingMode.HALF_UP).doubleValue();\n\n        return this;\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Lastly let’s create that new Test class named `}<inlineCode parentName=\"li\">{`TestAggregate.java`}</inlineCode>{` and paste the following`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.cpat.lab;\n\nimport java.util.Properties;\n\nimport org.apache.kafka.common.serialization.LongDeserializer;\nimport org.apache.kafka.common.serialization.Serde;\nimport org.apache.kafka.common.serialization.Serdes;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.apache.kafka.streams.KeyValue;\nimport org.apache.kafka.streams.StreamsBuilder;\nimport org.apache.kafka.streams.StreamsConfig;\nimport org.apache.kafka.streams.TestInputTopic;\nimport org.apache.kafka.streams.TestOutputTopic;\nimport org.apache.kafka.streams.TopologyTestDriver;\nimport org.apache.kafka.streams.kstream.Consumed;\nimport org.apache.kafka.streams.kstream.KGroupedStream;\nimport org.apache.kafka.streams.kstream.KStream;\nimport org.apache.kafka.streams.kstream.KTable;\nimport org.apache.kafka.streams.kstream.Materialized;\nimport org.apache.kafka.streams.kstream.Produced;\nimport org.apache.kafka.streams.kstream.Windowed;\nimport org.apache.kafka.streams.kstream.WindowedSerdes;\nimport org.apache.kafka.streams.processor.StateStore;\nimport org.apache.kafka.streams.state.KeyValueBytesStoreSupplier;\nimport org.apache.kafka.streams.state.KeyValueIterator;\nimport org.apache.kafka.streams.state.KeyValueStore;\nimport org.apache.kafka.streams.state.Stores;\nimport org.apache.kafka.streams.state.ValueAndTimestamp;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\nimport io.quarkus.kafka.client.serialization.JsonbDeserializer;\nimport io.quarkus.kafka.client.serialization.JsonbSerde;\nimport io.quarkus.kafka.client.serialization.JsonbSerializer;\nimport io.quarkus.test.junit.QuarkusTest;\n\nimport com.ibm.garage.cpat.FinancialMessage.*;\nimport com.ibm.garage.cpat.AggregatedMessage.AggregatedMessage;\nimport com.ibm.garage.cpat.EnrichedMessage.*;\n\n\n@QuarkusTest\npublic class TestAggregate {\n\n    private static TopologyTestDriver testDriver;\n    private static String inTopicName = \"financialMessages\";\n    private static String outTopicName = \"enrichedMessages\";\n    private static String storeName = \"financialStore\";\n    private static String aggregatedTopicName = \"aggregatedMessages\";\n\n    private static String companyTable = \"companyTable\";\n    private static String companyStoreName = \"companyStore\";\n\n    private static TestInputTopic<String, FinancialMessage> inTopic;\n    private static TestOutputTopic<String, EnrichedMessage> outTopic;\n    private static TestOutputTopic<String, AggregatedMessage> aggregatedTopic;\n    private static TestInputTopic<String, String> companyTableTopic;\n\n    private static final JsonbSerde<FinancialMessage> financialMessageSerde = new JsonbSerde<>(FinancialMessage.class);\n    private static final JsonbSerde<EnrichedMessage> enrichedMessageSerde = new JsonbSerde<>(EnrichedMessage.class);\n    private static final JsonbSerde<AggregatedMessage> aggregatedMessageSerde = new JsonbSerde<>(AggregatedMessage.class);\n    private static final JsonbDeserializer<EnrichedMessageDeserializer> enrichedMessageDeserializer = new JsonbDeserializer<>(EnrichedMessageDeserializer.class);\n\n\n    public static Properties getStreamsConfig() {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"kstream-lab3\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummmy:3456\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        //props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, financialMessageSerde);\n        return props;\n    }\n\n    @BeforeAll\n    public static void buildTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        KeyValueBytesStoreSupplier storeSupplier = Stores.persistentKeyValueStore(storeName);\n        KeyValueBytesStoreSupplier companyStoreSupplier = Stores.persistentKeyValueStore(companyStoreName);\n\n        // create a KStream for financial messages.\n        KStream<String, FinancialMessage> financialStream =\n            builder.stream(\n                inTopicName,\n                Consumed.with(Serdes.String(), financialMessageSerde)\n            );\n\n        // create a KTable from a topic for companies.\n        KTable<String, String> companyStore = builder.table(companyTable,\n            Consumed.with(Serdes.String(), Serdes.String()),\n            Materialized.as(companyStoreSupplier));\n\n        // join KStream with KTable and use aggregate.\n        KStream<String, EnrichedMessage> enrichedStream = financialStream.join(\n                companyStore,\n                //(financialMessage, companyName) -> financialMessage.userId,\n                (financialMessage, companyName) -> {\n                    return new EnrichedMessage(financialMessage, companyName);\n                }\n            );\n\n        enrichedStream.groupByKey()\n            .aggregate(\n                AggregatedMessage::new,\n                (userId, value, aggregatedMessage) -> aggregatedMessage.updateFrom(value),\n                Materialized.<String, AggregatedMessage> as(storeSupplier)\n                                .withKeySerde(Serdes.String())\n                                .withValueSerde(aggregatedMessageSerde)\n            )\n            .toStream()\n            .to(\n                aggregatedTopicName,\n                Produced.with(Serdes.String(), aggregatedMessageSerde)\n            );\n\n        testDriver = new TopologyTestDriver(builder.build(), getStreamsConfig());\n        inTopic = testDriver.createInputTopic(inTopicName, new StringSerializer(), new JsonbSerializer<FinancialMessage>());\n        //outTopic = testDriver.createOutputTopic(outTopicName, new StringDeserializer(), new JsonbDeserializer<>(EnrichedMessage.class));\n        companyTableTopic = testDriver.createInputTopic(companyTable, new StringSerializer(), new StringSerializer());\n        aggregatedTopic = testDriver.createOutputTopic(aggregatedTopicName, new StringDeserializer(), new JsonbDeserializer<>(AggregatedMessage.class));\n    }\n\n    @AfterAll\n    public static void close(){\n        testDriver.close();\n    }\n}\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`What’s happening here is we’re creating a KStream `}<inlineCode parentName=\"li\">{`financialStream`}</inlineCode>{` and a KTable `}<inlineCode parentName=\"li\">{`companyTable`}</inlineCode>{` and then joining them.\nThe join of those two gives us an `}<inlineCode parentName=\"li\">{`EnrichedMessage`}</inlineCode>{` which we’re processing through a second KStream `}<inlineCode parentName=\"li\">{`enrichedStream`}</inlineCode>{`. This\nis grouped by key and the aggregate operator is called to create new Aggregated Messages which are persisted in the `}<inlineCode parentName=\"li\">{`storeSupplier`}</inlineCode>{`\nstate store and also streamed to the `}<inlineCode parentName=\"li\">{`aggregatedTopic`}</inlineCode>{`.`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`Now to add the actual Test`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Test\n    public void aggregatedMessageExists() {\n\n        companyTableTopic.pipeInput(\"1\", \"Metropolitan Museum of Art\");\n\n        FinancialMessage mock = new FinancialMessage(\n            \"1\", \"MET\", \"SWISS\", 12, 1822.38, 21868.55, 94, 7, true\n        );\n        FinancialMessage mock2 = new FinancialMessage(\n            \"1\", \"MET\", \"SWISS\", 12, 1822.38, 6634.56, 94, 7, true\n        );\n        inTopic.pipeInput(\"1\", mock);\n        inTopic.pipeInput(\"1\", mock2);\n\n        KeyValueStore<String,ValueAndTimestamp<AggregatedMessage>> aggregatedTableStore = testDriver.getTimestampedKeyValueStore(storeName);\n        Assertions.assertEquals(2, aggregatedTableStore.approximateNumEntries());\n        System.out.println(\"Average = \" + aggregatedTableStore.get(\"1\").value().average);\n        Assertions.assertEquals(16389.3, aggregatedTableStore.get(\"2\").value().average);\n    }\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Here in this test we have two different financialMessages inserted with a key of `}<inlineCode parentName=\"li\">{`\"1\"`}</inlineCode>{` and there is only one entry\nin the KTable `}<inlineCode parentName=\"li\">{`(\"1\", \"Metropolitan Museum of Art\")`}</inlineCode>{`. There are two assertions in this test. The first one passes, but the second\none fails. Why is that? There are two records within the store which is correct… however since the store is a key based, the record\nwith a key of `}<inlineCode parentName=\"li\">{`\"1\"`}</inlineCode>{` is being updated. There is no key of `}<inlineCode parentName=\"li\">{`\"2\"`}</inlineCode>{`. To get the second Assertion to pass change`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Assertions.assertEquals(16389.3, aggregatedTableStore.get(\"2\").value().average);\n`}</code></pre>\n    <p>{`to`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Assertions.assertEquals(16389.3, aggregatedTableStore.get(\"1\").value().average);\n`}</code></pre>\n    <h2>{`Producing to and Consuming from a Kafka Topic on Event Streams`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Typically with the Kafka Streams API it’s typically assumed that the data is already present on a topic. To expedite the processing\nwe’re going to use Reactive Messaging to quickly send some quick messages to our topic. Create a `}<inlineCode parentName=\"li\">{`MockProducer.java`}</inlineCode>{` class somewhere\nalong the lines of `}<inlineCode parentName=\"li\">{`src/main/java/com/ibm/Infrastructure/MockProducer.java`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.cpat.Infrastructure;\n\nimport javax.enterprise.context.ApplicationScoped;\n\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\n\nimport io.reactivex.Flowable;\nimport io.smallrye.reactive.messaging.kafka.KafkaRecord;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.Random;\n\nimport com.ibm.garage.cpat.Domain.*;\n\n\n@ApplicationScoped\npublic class MockProducer {\n\n    private Random random = new Random();\n\n    FinancialMessage mock = new FinancialMessage(\n        \"1\", \"MET\", \"SWISS\", 12, 1822.38, 21868.55, 94, 7, true\n        );\n\n    @Outgoing(\"mock-messages\")\n    public Flowable<KafkaRecord<String,FinancialMessage>> produceMock() {\n        return Flowable.interval(5, TimeUnit.SECONDS)\n                       .map(tick -> {\n                            return setRandomUserId(mock);\n                        });\n    }\n\n    public KafkaRecord<String, FinancialMessage> setRandomUserId(FinancialMessage mock) {\n        mock.userId = String.valueOf(random.nextInt(100));\n\n        return KafkaRecord.of(mock.userId, mock);\n    }\n}\n`}</code></pre>\n    <p>{`What this producer does is it produces a mock message every 5 seconds to the `}<inlineCode parentName=\"p\">{`\"mock-messages\"`}</inlineCode>{` channel\nwith a random userId (out of 100).`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Next create a class for the Topology that we’re going to build. Something similar to the MockProducer above i.e.\n`}<inlineCode parentName=\"li\">{`src/main/java/com/ibm/Domain/FinancialMessageTopology.java`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.cpat.Domain;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.inject.Produces;\n\nimport org.eclipse.microprofile.config.inject.ConfigProperty;\n\nimport org.apache.kafka.common.serialization.Serdes;\nimport org.apache.kafka.streams.StreamsBuilder;\nimport org.apache.kafka.streams.Topology;\nimport org.apache.kafka.streams.kstream.Consumed;\nimport org.apache.kafka.streams.kstream.Produced;\n\nimport io.quarkus.kafka.client.serialization.JsonbSerde;\n\n\n@ApplicationScoped\npublic class FinancialMessageTopology {\n\n    @ConfigProperty(name = \"START_TOPIC_NAME\")\n    private String INCOMING_TOPIC;\n\n    @ConfigProperty(name = \"TARGET_TOPIC_NAME\")\n    private String OUTGOING_TOPIC;\n\n\n    @Produces\n    public Topology buildTopology() {\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        JsonbSerde<FinancialMessage> financialMessageSerde = new JsonbSerde<>(FinancialMessage.class);\n\n        // Stream reads from input topic, filters it by checking the boolean field on the nessage.\n        // If the boolean is true, it gets passed to the mapValues function which then that record\n        // to an outgoing topic.\n\n        builder.stream(\n            INCOMING_TOPIC,\n            Consumed.with(Serdes.String(), financialMessageSerde)\n        )\n        .filter (\n            (key, message) -> checkValidation(message)\n        )\n        .mapValues (\n            checkedMessage -> adjustPostValidation(checkedMessage)\n        )\n        .to (\n            OUTGOING_TOPIC,\n            Produced.with(Serdes.String(), financialMessageSerde)\n        );\n\n        return builder.build();\n    }\n\n    public boolean checkValidation(FinancialMessage message) {\n        return (message.technicalValidation);\n    }\n\n    public FinancialMessage adjustPostValidation(FinancialMessage message) {\n        message.totalCost = message.totalCost * 1.15;\n\n        return message;\n    }\n\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Important`}</em>{` Since this is a Quarkus application a lot of the configuration settings are done via a properties file.\nIn Quarkus it’s in `}<inlineCode parentName=\"li\">{`src/main/resources/application.properties`}</inlineCode>{`. Open that file and paste the following. If connecting to\nEvent Streams v10.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`quarkus.http.port=8080\nquarkus.log.console.enable=true\nquarkus.log.console.level=INFO\n\n# Base ES Connection Details\nmp.messaging.connector.smallrye-kafka.bootstrap.servers=\\${BOOTSTRAP_SERVERS}\nmp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.smallrye-kafka.sasl.mechanism=SCRAM-SHA-512\nmp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \\\\\n                username=\\${SCRAM_USERNAME} \\\\\n                password=\\${SCRAM_PASSWORD};\nmp.messaging.connector.smallrye-kafka.ssl.truststore.location=\\${CERT_LOCATION}\nmp.messaging.connector.smallrye-kafka.ssl.truststore.password=\\${CERT_PASSWORD}\nmp.messaging.connector.smallrye-kafka.ssl.truststore.type=PKCS12\n\n\n# Initial mock JSON message producer configuration\nmp.messaging.outgoing.mock-messages.connector=smallrye-kafka\nmp.messaging.outgoing.mock-messages.topic=\\${START_TOPIC_NAME}\nmp.messaging.outgoing.mock-messages.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer\n\n\n\n# Quarkus Kafka Streams configuration settings\nquarkus.kafka-streams.bootstrap-servers=\\${BOOTSTRAP_SERVERS}\nquarkus.kafka-streams.application-id=financial-stream\nquarkus.kafka-streams.application-server=localhost:8080\nquarkus.kafka-streams.topics=\\${START_TOPIC_NAME},\\${TARGET_TOPIC_NAME}\nquarkus.kafka-streams.health.enabled=true\n\nquarkus.kafka-streams.security.protocol=SASL_SSL\nquarkus.kafka-streams.ssl.protocol=TLSv1.2\nquarkus.kafka-streams.sasl.mechanism=SCRAM-SHA-512\nquarkus.kafka-streams.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \\\\\n                username=\\${SCRAM_USERNAME} \\\\\n                password=\\${SCRAM_PASSWORD};\nquarkus.kafka-streams.ssl.truststore.location=\\${CERT_LOCATION}\nquarkus.kafka-streams.ssl.truststore.password=\\${CERT_PASSWORD}\nquarkus.kafka-streams.ssl.truststore.type=PKCS12\n\n# pass-through options\nkafka-streams.cache.max.bytes.buffering=10240\nkafka-streams.commit.interval.ms=1000\nkafka-streams.metadata.max.age.ms=500\nkafka-streams.auto.offset.reset=latest\nkafka-streams.metrics.recording.level=DEBUG\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`If using a previous Event Streams version (such as v2019.4.2) or on IBM Cloud.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`quarkus.http.port=8080\nquarkus.log.console.enable=true\nquarkus.log.console.level=INFO\n\n# Base ES Connection Details\nmp.messaging.connector.smallrye-kafka.bootstrap.servers=\\${BOOTSTRAP_SERVERS}\nmp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.smallrye-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.PlainLoginModule required \\\\\n                username=\"token\" \\\\\n                password=\\${API_KEY};\n# If connecting to Event Streams on IBM Cloud the following truststore options are not needed.\nmp.messaging.connector.smallrye-kafka.ssl.truststore.location=\\${CERT_LOCATION}\nmp.messaging.connector.smallrye-kafka.ssl.truststore.password=password\n\n\n# Initial mock JSON message producer configuration\nmp.messaging.outgoing.mock-messages.connector=smallrye-kafka\nmp.messaging.outgoing.mock-messages.topic=\\${START_TOPIC_NAME}\nmp.messaging.outgoing.mock-messages.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer\n\n\n\n# Quarkus Kafka Streams configuration settings\nquarkus.kafka-streams.bootstrap-servers=\\${BOOTSTRAP_SERVERS}\nquarkus.kafka-streams.application-id=financial-stream\nquarkus.kafka-streams.application-server=localhost:8080\nquarkus.kafka-streams.topics=\\${START_TOPIC_NAME},\\${TARGET_TOPIC_NAME}\nquarkus.kafka-streams.health.enabled=true\n\nquarkus.kafka-streams.security.protocol=SASL_SSL\nquarkus.kafka-streams.ssl.protocol=TLSv1.2\nquarkus.kafka-streams.sasl.mechanism=PLAIN\nquarkus.kafka-streams.sasl.jaas.config=org.apache.kafka.common.security.scram.PlainLoginModule required \\\\\n                username=\"token\" \\\\\n                password=\\${API_KEY};\n# If connecting to Event Streams on IBM Cloud the following truststore options are not needed.\nquarkus.kafka-streams.ssl.truststore.location=\\${CERT_LOCATION}\nquarkus.kafka-streams.ssl.truststore.password=password\n\n# pass-through options\nkafka-streams.cache.max.bytes.buffering=10240\nkafka-streams.commit.interval.ms=1000\nkafka-streams.metadata.max.age.ms=500\nkafka-streams.auto.offset.reset=latest\nkafka-streams.metrics.recording.level=DEBUG\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`As noted you can see that there are five different environment variables that we need to configure. `}<inlineCode parentName=\"li\">{`START_TOPIC_NAME`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`TARGET_TOPIC_NAME`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`BOOTSTRAP_SERVERS`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`CERT_LOCATION`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`API_KEY`}</inlineCode>{`. You can get your API Key and Bootstrap Server address from your Event Streams instance\nconnection settings. Export the following environment variables. If connecting to Event Streams on IBM Cloud the `}<inlineCode parentName=\"li\">{`CERT_LOCATION`}</inlineCode>{`\nisn’t needed, so you can comment out those two lines as well as not needing the `}<inlineCode parentName=\"li\">{`CERT_LOCATION`}</inlineCode>{` ENV. Also if you would like to connect to a plain local Kafka Cluster on a container for example you will need to remove some of the security settings in `}<inlineCode parentName=\"li\">{`application.properties`}</inlineCode>{` (ssl, sasl, etc.)`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`ESv10`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export BOOTSTRAP_SERVERS=your-bootstrap-server-address:443 \\\\\nexport START_TOPIC_NAME=name-of-topic-to-consume-from \\\\\nexport TARGET_TOPIC_NAME=name-of-topic-to-produce-to \\\\\nexport CERT_LOCATION=/path-to-pkcs12-cert/es-cert.p12 \\\\\nexport CERT_PASSWORD=certificate-password \\\\\nexport SCRAM_USERNAME=your-scram-username \\\\\nexport SCRAM_PASSWORD=your-scram-password\n`}</code></pre>\n    <p><em parentName=\"p\">{`Previous ES versions`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export BOOTSTRAP_SERVERS=your-bootstrap-server-address:443 \\\\\nexport START_TOPIC_NAME=name-of-topic-to-consume-from \\\\\nexport TARGET_TOPIC_NAME=name-of-topic-to-produce-to \\\\\nexport CERT_LOCATION=/path-to-jks-cert/es-cert.jks \\\\\nexport API_KEY=your-api-key\n`}</code></pre>\n    <p><em parentName=\"p\">{`Local Kafka Cluster`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export BOOTSTRAP_SERVERS=your-bootstrap-server-address:443 \\\\\nexport START_TOPIC_NAME=name-of-topic-to-consume-from \\\\\nexport TARGET_TOPIC_NAME=name-of-topic-to-produce-to \n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You can now test the Quarkus application`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./mvnw quarkus:dev\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"last-modified-date-module--bx--text-truncate--end--123zi\",\"bxTextTruncateFront\":\"last-modified-date-module--bx--text-truncate--front--3xeKz\",\"text\":\"last-modified-date-module--text--24m-4\",\"row\":\"last-modified-date-module--row--2BquN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};"],"sourceRoot":""}