{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack:///./src/pages/use-cases/kafka-streams/lab-1/index.mdx"],"names":["PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","aria-label","list","React","Component","LastModifiedDate","date","lastModified","Date","toLocaleDateString","day","year","month","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports","_frontmatter","makeShortcode","name","console","warn","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-use-cases-kafka-streams-lab-1-index-mdx-977739e9a83ad41ff5b4.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"last-modified-date-module--bx--text-truncate--end--123zi\",\"bxTextTruncateFront\":\"last-modified-date-module--bx--text-truncate--front--3xeKz\",\"text\":\"last-modified-date-module--text--24m-4\",\"row\":\"last-modified-date-module--row--2BquN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <AnchorLinks mdxType=\"AnchorLinks\">\n    <AnchorLink mdxType=\"AnchorLink\">Overview</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Scenario Prerequisites</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Setting up the Quarkus Application</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Creating your first Test Class</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">More Robust Kafka Streams Testing</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Next Steps</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Overview`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`In this lab scenario we’re going to use `}<a parentName=\"li\" {...{\n          \"href\": \"https://quarkus.io\"\n        }}>{`Quarkus`}</a>{` - a subatomic and supersonic framework for Java for\nthe purposes of this lab.`}</li>\n      <li parentName=\"ul\">{`We will be testing using `}<a parentName=\"li\" {...{\n          \"href\": \"https://kafka.apache.org/documentation/streams/\"\n        }}>{`Apache Kafka Streams`}</a>{` TestDriver to mimic a Topology, a Stream and Table.`}</li>\n      <li parentName=\"ul\">{`While using the TestDriver we will perform operations such as groupBy, join with another Stream or Kafka Table.`}</li>\n      <li parentName=\"ul\">{`Lastly and optionally (in Lab 2) we will use Kafka Streams to send events to a Kafka Topic on IBM Event Streams on Cloud Pak for Integration.`}</li>\n    </ul>\n    <h2>{`Scenario Prerequisites`}</h2>\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`For the purposes of this lab we suggest Java 8+`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Maven`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Maven will be needed for bootstrapping our application from the command-line and running\nour application.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`An IDE of your choice`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Ideally an IDE that supports Quarkus (such as Visual Studio Code)`}</li>\n    </ul>\n    <h2>{`Setting up the Quarkus Application`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`We will bootstrap the Quarkus application with the following Maven command`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mvn io.quarkus:quarkus-maven-plugin:1.10.5.Final:create \\\\\n    -DprojectGroupId=com.ibm \\\\\n    -DprojectArtifactId=quarkus-kstreams-lab-1 \\\\\n    -Dextensions=\"resteasy-jsonb,quarkus-kafka-streams\"\n`}</code></pre>\n    <p>{`You can replace the fields within {} as you like.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Since we will be using the Kafka Streams testing functionality we will need to edit the `}<inlineCode parentName=\"li\">{`pom.xml`}</inlineCode>{` to add\nthe dependency to our project. Open `}<inlineCode parentName=\"li\">{`pom.xml`}</inlineCode>{` and add the following.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka-streams-test-utils</artifactId>\n    <version>2.5.0</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.hamcrest</groupId>\n    <artifactId>hamcrest</artifactId>\n    <version>2.2</version>\n</dependency>\n`}</code></pre>\n    <h2>{`Creating your Test Class`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the directory structure you will need for your Java file. `}<em parentName=\"p\">{`(`}<strong parentName=\"em\">{`NOTE:`}</strong>{` If you are working in an IDE, this may be done for you when you create your package and classes.)`}</em></p>\n        <p parentName=\"li\">{` `}<inlineCode parentName=\"p\">{`mkdir -p src/test/java/com/ibm/garage/cpat`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create a new file named `}<inlineCode parentName=\"p\">{`src/test/java/com/ibm/garage/cpat/TestLoadKtableFromTopic.java`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Open the `}<inlineCode parentName=\"p\">{`TestLoadKtableFromTopic.java`}</inlineCode>{` file and paste the following content.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.cpat.lab;\n\nimport java.util.Properties;\n\nimport org.apache.kafka.common.serialization.Serdes;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.apache.kafka.streams.KeyValue;\nimport org.apache.kafka.streams.StreamsBuilder;\nimport org.apache.kafka.streams.StreamsConfig;\nimport org.apache.kafka.streams.TestInputTopic;\nimport org.apache.kafka.streams.TestOutputTopic;\nimport org.apache.kafka.streams.TopologyTestDriver;\nimport org.apache.kafka.streams.kstream.Consumed;\nimport org.apache.kafka.streams.kstream.KTable;\nimport org.apache.kafka.streams.kstream.Materialized;\nimport org.apache.kafka.streams.processor.StateStore;\nimport org.apache.kafka.streams.state.KeyValueBytesStoreSupplier;\nimport org.apache.kafka.streams.state.KeyValueIterator;\nimport org.apache.kafka.streams.state.KeyValueStore;\nimport org.apache.kafka.streams.state.Stores;\nimport org.apache.kafka.streams.state.ValueAndTimestamp;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\nimport io.quarkus.test.junit.QuarkusTest;\n\n/**\n * This is a simple example of loading some reference data from stream into a Ktable for\n * lookup. It uses a persistent state store.\n */\n@QuarkusTest\npublic class TestLoadKtableFromTopic {\n    private static TopologyTestDriver testDriver;\n    private static String companySectorsTopic = \"sector-types\";\n    private static String storeName = \"sector-types-store\";\n\n    private static TestInputTopic<String, String> inTopic;\n    private static TestOutputTopic<String, Long> outTopic;\n    private static TestOutputTopic<String, String> errorTopic;\n\n    public static Properties getStreamsConfig() {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"kstream-lab1\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummmy:1234\");\n        return props;\n    }\n\n    @BeforeAll\n    public static void buildTopology(){\n        final StreamsBuilder builder = new StreamsBuilder();\n        // Adding a state store is a simple matter of creating a StoreSupplier\n        // instance with one of the static factory methods on the Stores class.\n        // all persistent StateStore instances provide local storage using RocksDB\n        KeyValueBytesStoreSupplier storeSupplier = Stores.persistentKeyValueStore(storeName);\n\n        // A KTable is created from the companySectorsTopic, with key and value deserialized.\n        // With Materialized.as() causing the Table to force a state store materialization (storeSupplier).\n        KTable<String, String> sectorTypeTable = builder.table(companySectorsTopic,\n                Consumed.with(Serdes.String(), Serdes.String()),\n                Materialized.as(storeSupplier));\n\n        testDriver = new TopologyTestDriver(builder.build(), getStreamsConfig());\n        inTopic = testDriver.createInputTopic(companySectorsTopic, new StringSerializer(), new StringSerializer());\n\n    }\n\n    @AfterAll\n    public static void close(){\n        testDriver.close();\n    }\n\n    @Test\n    public void shouldHaveSixSectorTypes(){\n        inTopic.pipeInput(\"C01\",\"Health Care\");\n        inTopic.pipeInput(\"C02\",\"Finance\");\n        inTopic.pipeInput(\"C03\",\"Consumer Services\");\n        inTopic.pipeInput(\"C04\",\"Transportation\");\n        inTopic.pipeInput(\"C05\",\"Capital Goods\");\n        inTopic.pipeInput(\"C06\",\"Public Utilities\");\n\n        KeyValueStore<String,ValueAndTimestamp<String>> store = testDriver.getTimestampedKeyValueStore(storeName);\n        Assertions.assertNotNull(store);\n\n        ValueAndTimestamp<String> sector = store.get(\"C02\");\n        Assertions.assertNotNull(sector);\n        Assertions.assertEquals(\"Finance\", sector.value());\n        Assertions.assertEquals(6, store.approximateNumEntries());\n\n\n        // demonstrate how to get all the values from the table:\n        KeyValueIterator<String, ValueAndTimestamp<String>> sectors = store.all();\n        while (sectors.hasNext()) {\n            KeyValue<String,ValueAndTimestamp<String>> s = sectors.next();\n            System.out.println(s.key + \":\" + s.value.value());\n        }\n        for ( StateStore s: testDriver.getAllStateStores().values()) {\n            System.out.println(s.name());\n        }\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`What the above code does is it uses TopologyTestDriver to mimic a Topology. A Topology is basically a graph of stream processors (nodes) and the edges between these nodes are the streams. In the first section we instantiate our `}<inlineCode parentName=\"p\">{`TopologyTestDriver`}</inlineCode>{` named `}<inlineCode parentName=\"p\">{`testDriver`}</inlineCode>{`, as well as the topic name and store name.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Test the application by running the following:`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./mvnw clean verify\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Depending upon versions of the packages brought in, you may see an initial test failure due to needing to update the `}<inlineCode parentName=\"p\">{`src/main/resources/application.properties`}</inlineCode>{` file with the following properties: `}<em parentName=\"p\">{`(The values are insignifcant for the execution of our tests, but he existence of the property is required by the underlying Quarkus & Kafka Streams integration)`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`quarkus.kafka-streams.application-id=my-kafka-streams\nquarkus.kafka-streams.topics=topic1\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You should see the tests pass with the following output:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running com.ibm.GreetingResourceTest\n2021-01-16 14:20:26,488 INFO  [io.quarkus] (main) Quarkus 1.10.5.Final on JVM started in 2.089s. Listening on: http://localhost:8081\n2021-01-16 14:20:26,490 INFO  [io.quarkus] (main) Profile test activated. \n2021-01-16 14:20:26,490 INFO  [io.quarkus] (main) Installed features: [cdi, kafka-streams, resteasy, resteasy-jsonb]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.096 s - in com.ibm.GreetingResourceTest\n[INFO] Running com.ibm.garage.cpat.lab.TestLoadKtableFromTopic\nC01:Health Care\nC02:Finance\nC03:Consumer Services\nC04:Transportation\nC05:Capital Goods\nC06:Public Utilities\nsector-types-store\n2021-01-16 14:20:28,253 WARN  [org.apa.kaf.str.sta.int.RocksDBStore] (main) Closing 1 open iterators for store sector-types-store\n2021-01-16 14:20:28,256 INFO  [org.apa.kaf.str.pro.int.StateDirectory] (main) stream-thread [main] Deleting state directory 0_0 for task 0_0 as user calling cleanup.\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.222 s - in com.ibm.garage.cpat.lab.TestLoadKtableFromTopic\n2021-01-16 14:20:28,292 INFO  [io.quarkus] (main) Quarkus stopped in 0.028s\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`How this test topology creation flow works:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`A StreamsBuilder object (builder) from the Kafka Streams DSL API is created.`}</li>\n          <li parentName=\"ul\">{`A KeyValueBytesStoreSupplier (storeSupplier) is configured with String variable (storeName).`}</li>\n          <li parentName=\"ul\">{`A KTable is created reading from the topic (companySectorsTopic), deserialized and materialized as\nthe previously create (storeSupplier).`}</li>\n          <li parentName=\"ul\">{`A TopologyTestDriver (testDriver) is built from the provided config properties and the KTable within the builder topology.`}</li>\n          <li parentName=\"ul\">{`Lastly test input topic (inTopic) is created from the testDriver topology.`}</li>\n          <li parentName=\"ul\">{`When `}<inlineCode parentName=\"li\">{`inTopic.pipeInput(\"C01\",\"Health Care\");`}</inlineCode>{` is invoked, it populates the topic, which then populates the KTable\nwhich ultimately persists in a KeyValue State Store.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`You should see the tests pass. These are three simple tests. The first of which checks that the value fetched from\nthe Kafka Table is not null,the second makes sure that value retrieved from key `}<inlineCode parentName=\"p\">{`C02`}</inlineCode>{` is equal to `}<inlineCode parentName=\"p\">{`Finance`}</inlineCode>{` and lastly\nwe make sure that the our state store (which was piped by ways of the Kafka Topic) indeed has six key-value pairs.`}</p>\n      </li>\n    </ul>\n    <h2>{`More Robust Kafka Streams Testing`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Now that we have tested some simple functionality by using the Kafka Streams API let’s check out some other\noperators that we can use.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Let’s create a new class for our Plain Old Java Object (POJO) named FinancialMessage: `}<inlineCode parentName=\"p\">{`src/main/java/com/ibm/garage/cpat/domain/FinancialMessage.java`}</inlineCode></p>\n      </li>\n    </ul>\n    <p>{`Now copy and paste the following content into the newly created file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.cpat.domain;\n\npublic class FinancialMessage {\n\n    public String userId;\n    public String stockSymbol;\n    public String exchangeId;\n    public int quantity;\n    public double stockPrice;\n    public double totalCost;\n    public int institutionId;\n    public int countryId;\n    public boolean technicalValidation;\n\n    public FinancialMessage() {\n\n    }\n\n    public FinancialMessage(String userId, String stockSymbol, String exchangeId,\n                            int quantity, double stockPrice, double totalCost,\n                            int institutionId, int countryId, boolean technicalValidation) {\n\n        this.userId = userId;\n        this.stockSymbol = stockSymbol;\n        this.exchangeId = exchangeId;\n        this.quantity = quantity;\n        this.stockPrice = stockPrice;\n        this.totalCost = totalCost;\n        this.institutionId = institutionId;\n        this.countryId = countryId;\n        this.technicalValidation = technicalValidation;\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` We have not provided any accessors (getters) or mutators (setters) for simplicity. You can\nset those at your own discretion.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Now that we have our new Java class, let’s create a new and separate Java Test class: `}<inlineCode parentName=\"li\">{`src/test/java/com/ibm/garage/cpat/lab/TestFinancialMessage.java`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`Copy the contents below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.cpat.lab;\n\nimport java.util.Properties;\n\nimport org.apache.kafka.common.serialization.LongDeserializer;\nimport org.apache.kafka.common.serialization.Serde;\nimport org.apache.kafka.common.serialization.Serdes;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.apache.kafka.streams.KeyValue;\nimport org.apache.kafka.streams.StreamsBuilder;\nimport org.apache.kafka.streams.StreamsConfig;\nimport org.apache.kafka.streams.TestInputTopic;\nimport org.apache.kafka.streams.TestOutputTopic;\nimport org.apache.kafka.streams.TopologyTestDriver;\nimport org.apache.kafka.streams.kstream.Consumed;\nimport org.apache.kafka.streams.kstream.KStream;\nimport org.apache.kafka.streams.kstream.Materialized;\nimport org.apache.kafka.streams.kstream.Produced;\nimport org.apache.kafka.streams.kstream.Windowed;\nimport org.apache.kafka.streams.kstream.WindowedSerdes;\nimport org.apache.kafka.streams.state.KeyValueBytesStoreSupplier;\nimport org.apache.kafka.streams.state.KeyValueStore;\nimport org.apache.kafka.streams.state.Stores;\nimport org.apache.kafka.streams.state.ValueAndTimestamp;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\nimport io.quarkus.kafka.client.serialization.JsonbSerde;\nimport io.quarkus.kafka.client.serialization.JsonbSerializer;\nimport io.quarkus.test.junit.QuarkusTest;\n\nimport com.ibm.garage.cpat.domain.*;\n\n\n@QuarkusTest\npublic class TestFinancialMessage {\n\n    private static TopologyTestDriver testDriver;\n    private static String inTopicName = \"transactions\";\n    private static String outTopicName = \"output\";\n    private static String errorTopicName = \"errors\";\n    private static String storeName = \"transactionCount\";\n    private static TestInputTopic<String, FinancialMessage> inTopic;\n    private static TestOutputTopic<String, Long> outTopic;\n    private static TestOutputTopic<String, String> errorTopic;\n\n    private static final JsonbSerde<FinancialMessage> financialMessageSerde = new JsonbSerde<>(FinancialMessage.class);\n\n    public static Properties getStreamsConfig() {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"kstream-lab2\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummmy:2345\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        //props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, financialMessageSerde);\n        return props;\n    }\n\n    @BeforeAll\n    public static void buildTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        KeyValueBytesStoreSupplier storeSupplier = Stores.persistentKeyValueStore(storeName);\n\n        KStream<String, FinancialMessage> transactionStream =\n            builder.stream(\n                inTopicName,\n                Consumed.with(Serdes.String(), financialMessageSerde)\n            );\n\n        // First verify user id is present, if not route to error\n        KStream<String, FinancialMessage>[] branches =\n                transactionStream.branch(\n                    (key, value) -> value.userId == null,\n                    (key, value) -> true\n                );\n\n        // Handle error by sending to the errors topic.\n        branches[0].map(\n                 (key, value) -> { return KeyValue.pair(key, \"No customer id provided\");}\n                 )\n                .to(\n                    errorTopicName, Produced.with(Serdes.String(), Serdes.String())\n                );\n\n\n        // use groupBy to swap the key, then count by customer id,\n        branches[1].groupBy(\n                    (key, value) -> value.userId\n                )\n                .count(\n                    Materialized.as(storeSupplier)\n                )\n                .toStream()\n                .to(\n                    outTopicName,\n                    Produced.with(Serdes.String(), Serdes.Long())\n            );\n\n        testDriver = new TopologyTestDriver(builder.build(), getStreamsConfig());\n        inTopic = testDriver.createInputTopic(inTopicName, new StringSerializer(), new JsonbSerializer<FinancialMessage>());\n        //outTopic = testDriver.createOutputTopic(outTopicName,windowedSerde.deserializer(), new LongDeserializer());\n        outTopic = testDriver.createOutputTopic(outTopicName, new StringDeserializer(), new LongDeserializer());\n        errorTopic = testDriver.createOutputTopic(errorTopicName, new StringDeserializer(), new StringDeserializer());\n    }\n\n    @AfterAll\n    public static void close(){\n        testDriver.close();\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`We have the setup for the TestTopology. Now, we can add a test that will insert two events into the topic. Add the following code to your test class:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Test\n    public void shouldHaveOneTransaction() {\n        // A FinancialMessage is mocked and set to the input topic. Within the Topology,\n        // this gets sent to the outTopic because a userId exists for the incoming message.\n\n        FinancialMessage mock = new FinancialMessage(\n            \"1\", \"MET\", \"SWISS\", 12, 1822.38, 21868.55, 94, 7, true\n        );\n        FinancialMessage mock2 = new FinancialMessage(\n            \"2\", \"ASDF\", \"HELLO\", 5, 1000.22, 4444.12, 38, 6, true\n        );\n\n        inTopic.pipeInput(\"T01\", mock);\n        inTopic.pipeInput(\"T02\", mock2);\n\n        Assertions.assertFalse(outTopic.isEmpty());\n        Assertions.assertEquals(1, outTopic.readKeyValue().value);\n\n        KeyValueStore<String,ValueAndTimestamp<FinancialMessage>> store = testDriver.getTimestampedKeyValueStore(storeName);\n        Assertions.assertEquals(1, store.approximateNumEntries());\n    }\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Test the application by running the following:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./mvnw clean verify\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You should see the following output:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running com.ibm.GreetingResourceTest\n2021-01-16 17:21:37,836 INFO  [io.quarkus] (main) Quarkus 1.10.5.Final on JVM started in 1.996s. Listening on: http://localhost:8081\n2021-01-16 17:21:37,837 INFO  [io.quarkus] (main) Profile test activated. \n2021-01-16 17:21:37,838 INFO  [io.quarkus] (main) Installed features: [cdi, kafka-streams, resteasy, resteasy-jsonb]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.234 s - in com.ibm.GreetingResourceTest\n[INFO] Running com.ibm.garage.cpat.lab.TestFinancialMessage\n2021-01-16 17:21:39,460 INFO  [org.apa.kaf.str.pro.int.StateDirectory] (main) stream-thread [main] Deleting state directory 0_0 for task 0_0 as user calling cleanup.\n[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.273 s <<< FAILURE! - in com.ibm.garage.cpat.lab.TestFinancialMessage\n[ERROR] shouldHaveOneTransaction  Time elapsed: 0.09 s  <<< FAILURE!\norg.opentest4j.AssertionFailedError: expected: <1> but was: <2>\n    at com.ibm.garage.cpat.lab.TestFinancialMessage.shouldHaveOneTransaction(TestFinancialMessage.java:132)\n\n[INFO] Running com.ibm.garage.cpat.lab.TestLoadKtableFromTopic\nC01:Health Care\nC02:Finance\nC03:Consumer Services\nC04:Transportation\nC05:Capital Goods\nC06:Public Utilities\nsector-types-store\n2021-01-16 17:21:39,505 WARN  [org.apa.kaf.str.sta.int.RocksDBStore] (main) Closing 1 open iterators for store sector-types-store\n2021-01-16 17:21:39,507 INFO  [org.apa.kaf.str.pro.int.StateDirectory] (main) stream-thread [main] Deleting state directory 0_0 for task 0_0 as user calling cleanup.\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.039 s - in com.ibm.garage.cpat.lab.TestLoadKtableFromTopic\n2021-01-16 17:21:39,541 INFO  [io.quarkus] (main) Quarkus stopped in 0.028s\n[INFO] \n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestFinancialMessage.shouldHaveOneTransaction:132 expected: <1> but was: <2>\n[INFO] \n[ERROR] Tests run: 3, Failures: 1, Errors: 0, Skipped: 0\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`We see that our recently added test `}<strong parentName=\"p\">{`failed`}</strong>{`. And this is expected due to the fact that we inserted two records but our test expects one. To remedy this test we must change\n`}<inlineCode parentName=\"p\">{`Assertions.assertEquals(1, store.approximateNumEntries());`}</inlineCode>{` Set to 2 the comparisson.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Next let’s add another very simple test. Copy the following code to your Java test class:`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Test\n    public void testErrorTopicIsNotEmpty() {\n        FinancialMessage mock = new FinancialMessage(\n            null, \"MET\", \"SWISS\", 12, 1822.38, 21868.55, 94, 7, true\n        );\n\n        inTopic.pipeInput(\"T03\", mock);\n\n        Assertions.assertFalse(errorTopic.isEmpty());\n    }\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Test the application by running the following:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./mvnw clean verify\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You should see the following output:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running com.ibm.GreetingResourceTest\n2021-01-16 17:29:34,258 INFO  [io.quarkus] (main) Quarkus 1.10.5.Final on JVM started in 2.470s. Listening on: http://localhost:8081\n2021-01-16 17:29:34,260 INFO  [io.quarkus] (main) Profile test activated. \n2021-01-16 17:29:34,260 INFO  [io.quarkus] (main) Installed features: [cdi, kafka-streams, resteasy, resteasy-jsonb]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.694 s - in com.ibm.GreetingResourceTest\n[INFO] Running com.ibm.garage.cpat.lab.TestFinancialMessage\n2021-01-16 17:29:36,001 INFO  [org.apa.kaf.str.pro.int.StateDirectory] (main) stream-thread [main] Deleting state directory 0_0 for task 0_0 as user calling cleanup.\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.309 s - in com.ibm.garage.cpat.lab.TestFinancialMessage\n[INFO] Running com.ibm.garage.cpat.lab.TestLoadKtableFromTopic\nC01:Health Care\nC02:Finance\nC03:Consumer Services\nC04:Transportation\nC05:Capital Goods\nC06:Public Utilities\nsector-types-store\n2021-01-16 17:29:36,057 WARN  [org.apa.kaf.str.sta.int.RocksDBStore] (main) Closing 1 open iterators for store sector-types-store\n2021-01-16 17:29:36,059 INFO  [org.apa.kaf.str.pro.int.StateDirectory] (main) stream-thread [main] Deleting state directory 0_0 for task 0_0 as user calling cleanup.\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.049 s - in com.ibm.garage.cpat.lab.TestLoadKtableFromTopic\n2021-01-16 17:29:36,099 INFO  [io.quarkus] (main) Quarkus stopped in 0.031s\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0\n`}</code></pre>\n    <p>{`As you can see here, our message payload is created with `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` for the userId field which means this message will branch out to the `}<inlineCode parentName=\"p\">{`errorTopic`}</inlineCode>{`. The purpose of the test\nis to check if our `}<inlineCode parentName=\"p\">{`errorTopic`}</inlineCode>{` is empty, which should not be. Since our `}<inlineCode parentName=\"p\">{`errorTopic.isEmpty()`}</inlineCode>{` resolves to false and our assertion\nis asserting that it is false as well, thus the test passes.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Now that we have two simple tests, let’s update our first branch to allow us to filter the stream on a condition\nthat we want. Let’s edit our `}<inlineCode parentName=\"li\">{`branches[1]`}</inlineCode>{` statement so that it will filter out and retain only the records where\nthe `}<inlineCode parentName=\"li\">{`totalCost`}</inlineCode>{` is greater than 5000.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`branches[1].filter(\n            (key, value) -> (value.totalCost > 5000)\n        )\n        .groupBy(\n            (key, value) -> value.userId\n        )\n        .count(\n            Materialized.as(storeSupplier)\n        )\n        .toStream()\n        .to(\n            outTopicName,\n            Produced.with(Serdes.String(), Serdes.Long())\n        );\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Test the application by running the following:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./mvnw clean verify\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You should see the following output:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running com.ibm.GreetingResourceTest\n2021-01-16 17:40:50,765 INFO  [io.quarkus] (main) Quarkus 1.10.5.Final on JVM started in 2.102s. Listening on: http://localhost:8081\n2021-01-16 17:40:50,766 INFO  [io.quarkus] (main) Profile test activated. \n2021-01-16 17:40:50,766 INFO  [io.quarkus] (main) Installed features: [cdi, kafka-streams, resteasy, resteasy-jsonb]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.474 s - in com.ibm.GreetingResourceTest\n[INFO] Running com.ibm.garage.cpat.lab.TestFinancialMessage\n2021-01-16 17:40:52,393 INFO  [org.apa.kaf.str.pro.int.StateDirectory] (main) stream-thread [main] Deleting state directory 0_0 for task 0_0 as user calling cleanup.\n[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.307 s <<< FAILURE! - in com.ibm.garage.cpat.lab.TestFinancialMessage\n[ERROR] shouldHaveOneTransaction  Time elapsed: 0.022 s  <<< FAILURE!\norg.opentest4j.AssertionFailedError: expected: <2> but was: <1>\n    at com.ibm.garage.cpat.lab.TestFinancialMessage.shouldHaveOneTransaction(TestFinancialMessage.java:135)\n\n[INFO] Running com.ibm.garage.cpat.lab.TestLoadKtableFromTopic\nC01:Health Care\nC02:Finance\nC03:Consumer Services\nC04:Transportation\nC05:Capital Goods\nC06:Public Utilities\nsector-types-store\n2021-01-16 17:40:52,445 WARN  [org.apa.kaf.str.sta.int.RocksDBStore] (main) Closing 1 open iterators for store sector-types-store\n2021-01-16 17:40:52,447 INFO  [org.apa.kaf.str.pro.int.StateDirectory] (main) stream-thread [main] Deleting state directory 0_0 for task 0_0 as user calling cleanup.\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.046 s - in com.ibm.garage.cpat.lab.TestLoadKtableFromTopic\n2021-01-16 17:40:52,487 INFO  [io.quarkus] (main) Quarkus stopped in 0.031s\n[INFO] \n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestFinancialMessage.shouldHaveOneTransaction:135 expected: <2> but was: <1>\n[INFO] \n[ERROR] Tests run: 4, Failures: 1, Errors: 0, Skipped: 0\n`}</code></pre>\n    <p>{`We see that our first tests is now `}<strong parentName=\"p\">{`failing again`}</strong>{`. And this is expected because we are changing the logic of how `}<inlineCode parentName=\"p\">{`branches[1]`}</inlineCode>{` works to filter out those transactions less than `}<inlineCode parentName=\"p\">{`5000`}</inlineCode>{`. This makes the second record we send in to get filtered out. In order to fix our test again, we either decrease the assertion for the expected entries in our store back to 1 or we modify the amount of the second transaction to be greater than `}<inlineCode parentName=\"p\">{`5000`}</inlineCode>{`. Once we do that, if we test the application again, we should get all tests passing.`}</p>\n    <h2>{`Next Steps`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Now that you have finished this initial part of Lab 1 you can optionally proceed to `}<a parentName=\"li\" {...{\n          \"href\": \"/refarch-eda/use-cases/kafka-streams/lab-2/\"\n        }}>{`Lab 2`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}