{"version":3,"sources":["webpack:///./src/pages/patterns/intro/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sCACA,iLACA,8IACA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gFADQ,0BAApB,8VAKA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qEADQ,wBAApB,4fAKA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uBADQ,qBAApB,0kBAMA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sBADQ,kBAApB,kIAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,YADQ,4CAApB,0GAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,YADQ,iBAApB,+WAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,WADQ,uCAApB,4KAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qEADQ,wBAApB,2SAKF,2CACA,iCACA,sXAGA,kCACA,mMAEA,gZAGA,mKAKJJ,EAAWK,gBAAiB","file":"component---src-pages-patterns-intro-index-mdx-86efdf91c4c4ff563eb1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Introduction`}</h1>\n    <p>{`In this set of articles, we are detailing some of the most import event-driven patterns to be used during your event-driven microservice implementation.`}</p>\n    <p>{`Adopting messaging (Pub/Sub) as a microservice communication approach involves using at least the following patterns:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://microservices.io/patterns/decomposition/decompose-by-subdomain.html\"\n        }}>{`Decompose by subdomain`}</a>{`, event driven\nmicroservices are still microservices, so we need to find them, and the domain-driven subdomains is a good approach to identify and classify business\nfunction and therefore microservices. With the event storming method, aggregates help to find those subdomain of responsibility. (Source Chris Richardson - Microservices Patterns)`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://microservices.io/patterns/data/database-per-service.html\"\n        }}>{`Database per service`}</a>{` to enforce each service persists data privately and is accessible only via its API.\nServices are loosely coupled limiting impact to other service when database schema changes. The database technology is selected from business requirements. (Source Chris Richardson - Microservices Patterns)\nThe implementation of transactions that span multiple services is complex and enforce using the Saga pattern. Queries that goes over multiple entities is a challenge and CQRS represents an interesting solution.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#strangler-pattern\"\n        }}>{`Strangler pattern`}</a>{` is used to incrementally migrate an existing, monolytic application by replacing a set of features to a microservice but keep both running in parallel.\nApplying a domain driven design approach, you may strangle the application using bounded context. But then as soon as this pattern is applied, you need to assess the co-existence between\nexisting bounded contexts and the new microservices. One of the challenges will be to define where the write and read operations occurs, and how data should be replicated between the contexts.\nThis is where event driven architecture helps.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./event-sourcing/\"\n        }}>{`Event sourcing`}</a>{` persists, to an append log, the states of a business entity, such an Order, as a sequence of immutable state-changing events.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./cqrs/\"\n        }}>{`Command Query Responsibility Segregation`}</a>{` helps to separate queries from commands and help to address queries with cross-microservice boundary.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./saga/\"\n        }}>{`Saga pattern:`}</a>{` Microservices publish events when something happens in the scope of their control like an update in the business entities they are responsible for. A microservice interested in other business entities, subscribe to those events and it can update its own states and business entities when receiving such events. Business entity keys needs to be unique, immutable.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./dlq/\"\n        }}>{`Event reprocessing with dead letter`}</a>{`: event driven microservice may have to call external service via synchronous call, we need to process failure to get response from those service, using event backbone.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://microservices.io/patterns/data/transactional-outbox.html\"\n        }}>{`Transactional outbox`}</a>{`: A service command typically needs to update the database and send messages/events.\nThe approach is to use a outbox table to keep the message to sent and a message relay process to publish events inserted into database to the event backbone. (Source Chris Richardson - Microservices Patterns)`}</li>\n    </ul>\n    <h2>{`Strangler pattern`}</h2>\n    <h3>{`Problem`}</h3>\n    <p>{`How to migrate a monolytics application to microservice without doing a big bang, redeveloping the application from white page.\nReplacing and rewritting an existing application can be a huge investment. Rewritting a subset of business functions while\nrunning current application in parallel may be relevant and reduce risk and velocity of changes.`}</p>\n    <h3>{`Solution`}</h3>\n    <p>{`The approach is to use a “strangler” interface to dispatch request to new or old features. Existing features\nto migrate are selected by trying to isolate sub components.`}</p>\n    <p>{`One of main challenge is to isolate data store and how the new microservices and the legacy application are accessing\nthe shared data. Continuous data replication can be a solution to propagate write model to read model.\nWrite model will most likely stays on the monolitic application, change data capture can be used, with event backbone to propagate change to read model.`}</p>\n    <p>{`The facade needs to be scalable and not a single point of failure. It needs to support new APIs (RESTful) and old API (most likely SOAP).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}