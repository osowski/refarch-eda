{"componentChunkName":"component---src-pages-technology-event-streams-security-mdx","path":"/technology/event-streams/security/","result":{"pageContext":{"frontmatter":{"title":"Event Streams on Cloud Security Control Lab","description":"Hands on lab to understand Event Streams on Cloud security features"},"relativePagePath":"/technology/event-streams/security.mdx","titleType":"append","MdxNode":{"id":"69b5b671-f81f-51da-8993-cab4e7ae674d","children":[],"parent":"c9353097-ae5a-514e-a92a-821b0dc0b2a0","internal":{"content":"---\ntitle: Event Streams on Cloud Security Control Lab\ndescription: Hands on lab to understand Event Streams on Cloud security features\n---\n\nThis documentation aims to be a introductory hands-on lab for the security feature of IBM Event Streams.\n\n<AnchorLinks>\n  <AnchorLink>IAM Concept Summary</AnchorLink>\n  <AnchorLink>Event Streams access management concepts</AnchorLink>\n  <AnchorLink>Pre-requisites</AnchorLink>\n  <AnchorLink>Add access group to the account using IAM</AnchorLink>\n  <AnchorLink>Limiting topic access to group of users</AnchorLink>\n</AnchorLinks>\n\n## IAM Concept Summary\n\nTo undertand the Identity and access management you can read [this article](https://cloud.ibm.com/docs/iam?topic=iam-iamoverview). \n\nTo summarize:\n\n* Account represents the billable entity, and can have multiple users.\n* Users are given access to resource groups.\n* _ Identity_ concept consists of user identities, service and app identities, API keys, and resources.\n* Applications and IBM Cloud Services are identified with a service ID.\n* To restrict permissions for using specific services, you can assign specific access policies to the service ID and user ID\n* Resource groups are here to organize any type of resources (services, clusters, VMs...) that are managed by  Identity and Access Management (IAM).\n* Resource groups are not scoped by location.\n* API keys can be use to authenticate user or a service / application.\n* To control access three components are used: access groups, resources and access policies.\n\t* Access group are used to organize a set of users and service IDs into a single entity and easily assign permissions via _access policies_\n\t* _Policies_ give permission to access account resources. Policies include a subject (user, service, access group), target (resource), and role. \n\t* Policy can be set to all resources in a resource group\n\t* There are two types of access _roles_: platform management and service access.\n\nHere is the main page for the IAM service on IBM Cloud where an account owner can manage the different components of the security control:\n\n![1](./images/iam-main-page.png)\n\n## Event Streams access management concepts\n\nThis section is a quick overview of the [Managing access to your Event Streams resources](https://cloud.ibm.com/docs/services/EventStreams?topic=eventstreams-security) article.\n\n### Roles\n\nUsers can perform specific tasks when they are assigned to a role for which access policies are defined. The roles defined for Event Streams are [Reader, Writer and Manager](https://cloud.ibm.com/docs/EventStreams?topic=EventStreams-security#what_secure).\n\n* _Reader_: Users can view Event Streams resources, and applications can only consume records\n* _Writer_ : Users can edit resource, and applications can produce and consume records\n* _Manager_: Users can do privileged actions.\n\n### Assign access\n\nThe product documentation addresses how to assign access in [this section](https://cloud.ibm.com/docs/EventStreams?topic=EventStreams-security#assign_access).\n\nThe type of Kafka resources that may be secured are: *cluster, topic, group, or transaction id*. In this lab we will give topic access to users within a group and application by using service ID.\n\n## Pre-requisites\n\nThis lab requires the following components to work against:\n\n1. An IBM Cloud account. Get a IBM Cloud Account by using the register link in [https://cloud.ibm.com/login](https://cloud.ibm.com/login)\nCreate a new account is free of charge. \n1. IBM Cloud CLI (<https://cloud.ibm.com/docs/cli?topic=cloud-cli-getting-started>)\n1. IBM CLoud CLI Event Streams plugin (`ibmcloud plugin install event-streams`)\n\n## Add access group to the account using IAM\n\nThe goal of this step is to create an access group to access Event Streams services as administrator.\n\n1. From the IBM Cloud main page, go to the Manage > IAM menu on top right of IBM Cloud Dashboard page:\n\n\t![2](./images/iam-access-1.png)\n\n\tThis should lead you to the main IAM page as illustrated in figure below:\n\n\t![21](./images/iam-main-page.png)\n\n1. Under the Access Group, you can create a new group of users. This will be an administrator group:\n\n\t![3](./images/iam-new-ag.png)\n\n1. Then add users to this newly created group, by selecting users from the list, (those users were invited to join the account at some time) and Click on `Add to group` link.\n\n\t![4](./images/iam-ag-add-user.png)\n\n1. Finally, you want now to add _Access Policies_ to control access to Event Streams clusters. For that click _Assign access_ button:\n\n\t![5](./images/iam-es-ap-1.png)\n\n1. Then select the type of resource (Event Streams), you want to define the access policy on:\n\n\t![6](./images/iam-es-ap-2.png)\n\n1. Then specify that the group can manage all instances of Event Streams service. The condition applies to the service instance with a _Manager_ role:\n\n\t![7](./images/iam-es-ap-3.png)\n\n1. Add the policy and assign it to the group. You could stay in the same panel to add more target to the policy.\n\n\t![8](./images/iam-es-ap-4.png)\n\n1. The newly created, _access policies for administer / manager_ to any Event Streams services is now listed in the access group:\n\n\t![9](./images/iam-es-ap-5.png)\n\nAny user who has a manager role for either 'All' services or 'All' Event Streams services in the same account will also have full access.\n\n## Limiting topic access to group of users\n\nThe product document illustrates some access control common scenarios in [this section](https://cloud.ibm.com/docs/services/EventStreams?topic=eventstreams-security#security_scenarios). We recommend reading those settings.\n\nIn this step we are implementing one of the classical scenario: suppose we have a line of business that will create topics by applying a naming convention where topic name starts with a prefix like: `bn-lob1-*`.  We want users and service ID to  get read / write access to only those topics matching those prefix.\n\nTo do so you need to:\n\n1. Add an access group to include member of the line of business: `bn-lob1-group`\n1. Define an access policy with the following criterias:\n\t* Event streams as resource type\n\t* All regions\n\t* Specifying one of the Event Streams resource instance (the one you provisioned [in this lab](../es-cloud/))\n\t* Select the service instance that hosts the target cluster\n\t* Specify the resource type to be **topic** \n\t* And the resource ID to matches `bn-lob1-*`\n\n\t![T1](./images/iam-es-top-1.png)\n\n\t* Then add a second rule to enforce read access at the cluster level:\n\n\t![T2](./images/iam-es-top-2.png)\n\n\t* Assign the two rules:\n\t\n\t![T3](./images/iam-es-top-3.png)\n\n\t* The group has the two access policies:\n\n\t![T4](./images/iam-es-top-4.png)\n\n\n## API Keys\n\nTo let an application to remotely authenticate itself, Event Streams uses API keys. \nThe goal of this section, is to create API keys so applications, tools, scripts can connect to the newly created IBM Event Streams instance. You will create three keys for the different roles: creation of topics, read access only and read/write access.\n\n1. In your IBM Event Streams instance service page, click on _Service credentials_ on the left hand side menu:\n\n\t![8](images/8.png)\n\n1. Observe, there is no service credentials yet and click on the _New credential_ button on the top right corner:\n\n\t![9](images/9.png)\n\n1. Enter a name for your service, choose _Manager_ role for now and click on _Add_:\n\n\t![10](images/10.png)\n\n1. You should now see your new service credential and be able to inspect its details if you click on its dropdown arrow on it left:\n\n\t![11](images/11.png)\n\nUsing the same process you can add a credential for Writer Role. For the Reader role you will use the CLI in the next section. \n\n### Adding Keys with CLI\n\nYou could create the service credentials using the CLI, so you will add _Reader_ role API Keys:\n\n1. First you can explore the service credentials created previously, using the CLI with `$ ibmcloud resource service-key <service_credentials_name>`:\n\n\t```shell\n\t$ ibmcloud resource service-key demo-serv-cred\n\tRetrieving service key demo-serv-cred in all resource groups under account bill's Account as A......\n\n\tName:          demo-serv-cred\n\tID:            crn:v1:bluemix:public:messagehub:eu-de:a/b636d1d8.....8cfa:b05be932-2....02e687a:resource-key:4ba348d2-...-360e983d99c5\n\tCreated At:    Tue May 12 10:53:02 UTC 2020\n\tState:         active\n\tCredentials:\n\t\t\t\tapi_key:                  *****\n\t\t\t\tapikey:                   *****\n\t\t\t\tiam_apikey_description:   Auto-generated for key 4ba348d2-5fcf-4c13-a265-360e983d99c5\n\t\t\t\tiam_apikey_name:          demo-serv-cred\n\t\t\t\tiam_role_crn:             crn:v1:bluemix:public:iam::::serviceRole:Manager\n\t\t\t\tiam_serviceid_crn:        crn:v1:bluemix:public:iam-identity::a/b636d1d83e34d7ae7e904591ac248cfa::serviceid:ServiceId-380e866c-5914-4e01-85c4-d80bd1b8a899\n\t\t\t\tinstance_id:              b05be932-2a60-4315-951d-a6dd902e687a\n\t\t\t\tkafka_admin_url:          https://mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud\n\t\t\t\tkafka_brokers_sasl:       [kafka-2.mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud:9093 kafka-0.mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud:9093 kafka-1.mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud:9093]\n\t\t\t\tkafka_http_url:           https://mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud\n\t\t\t\tpassword:                 *****\n\t\t\t\tuser:                     token\n\t```\n1. Add a `Reader` role API key:\n\n\t```shell\n\t# Get the name of the event streams service:\n\tibmcloud resource service-instances\n\tibmcloud resource service-key-create bn-lob1-app-reader Reader --instance-name \"Event Streams-wn\"\n\n\tOK\n\tService key crn:v1:bluemix:public:messagehub:eu-de:a/b6...248cfa:b05...e687a:resource-key:7ee00.....15a2 was created.\n\t\t\t\t\t\n\tName:          bn-lob1-reader   \n\tID:            crn:v1:bluemix:public:messagehub:eu-de:a/b636d..fa:b05b..7a:resource-key:7ee0042.....b15a2   \n\tCreated At:    Wed May 13 00:33:49 UTC 2020   \n\tState:         active   \n\tCredentials:                                   \n\t\t\t\tapi_key:                  xrvMI4PQYmdOcUwPRUJXy6Xlo9UCY9xywNUPiU3jjpKH      \n\t\t\t\tapikey:                   xrvMI4PQYmdOcUwPRUJXy6Xlo9UCY9xywNUPiU3jjpKH      \n\t\t\t\tiam_apikey_description:   Auto-generated for key 7ee0042f-572b-46f6-b9cc-912cc63b15a2      \n\t\t\t\tiam_apikey_name:          bn-lob1-reader      \n\t\t\t\tiam_role_crn:             crn:v1:bluemix:public:iam::::serviceRole:Reader      \n\t\t\t\tiam_serviceid_crn:        crn:v1:bluemix:public:iam-identity::a/b636d1....48cfa::serviceid:ServiceId-b4d3....18af1      \n\t\t\t\tinstance_id:              b05....687a      \n\t\t\t\tkafka_admin_url:          https://mh-tcqsppdpzlrkdmkbgmgl-4c201a...1c6f175-0000.eu-de.containers.appdomain.cloud      \n\t\t\t\tkafka_brokers_sasl:       [kafka-0.mh-tcqsppdpzlrkdmkbgmgl-4c2...175-0000.eu-de.containers.appdomain.cloud:9093....]      \n\t\t\t\tkafka_http_url:           https://mh-tcqsppdpzlrkdmkbgmgl-4c20...-0000.eu-de.containers.appdomain.cloud      \n\t\t\t\tpassword:                 xr......KH      \n\t\t\t\tuser:                     token      \n\t```\n\n## Control applications access\n\nThe last step of this lab is to add a specific IAM group for applications so you can link any future applications to a group so that producer and consumer codes using the Writer role API key as defined previously\ncan read and write to specific topic as defined by a access policy.\n\nWe want to give this Writer role API key to the `bn-lob1-app` gruop, so applications within this group can create topics and R/W on those topics with the name `bn-lob1-*`. \nTo do so, we have to add to the Access Group `bn-lob1-app`, the service ID that maps the Key created above:\n\n1. In IAM Access groups select the service IDs tab and click on add service id button:\n\n\t![SI1](./images/iam-ag-serv-1.png)\n\n1. Search for the key name: `bn-lob1-writer` and  \n\n\t![SI2](./images/iam-ag-serv-2.png)\n\n1. You should get this result:\n\n\t![SI3](./images/iam-ag-serv-3.png)\n\n## Kafka Streams specifics\n\nA lot of Kafka implementations use Kafka Streams API, in this case the applications need to have `Manager` role on topic resource,\nand Reader role for cluster and group with a Manager API Key. \n\n## Connecting application using API Key\n\nTo connect to Event Streams on cloud, we need to define consumer and producer common configuration as presented in the [product documentation](https://cloud.ibm.com/docs/EventStreams?topic=EventStreams-kafka_using#kafka_api_client)\n\nHere is an exemple of using reactive messaging in microprofile with the liberty kafka connector:\n\n```\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=\"org.apache.kafka.common.security.plain.PlainLoginModule required username=token password=longapikeycomingfromservicecredential;\"\n```\n\nThis could in fact being part of the secret ","type":"Mdx","contentDigest":"5fecac844033eaff577e4e23cb879473","counter":353,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Event Streams on Cloud Security Control Lab","description":"Hands on lab to understand Event Streams on Cloud security features"},"exports":{},"rawBody":"---\ntitle: Event Streams on Cloud Security Control Lab\ndescription: Hands on lab to understand Event Streams on Cloud security features\n---\n\nThis documentation aims to be a introductory hands-on lab for the security feature of IBM Event Streams.\n\n<AnchorLinks>\n  <AnchorLink>IAM Concept Summary</AnchorLink>\n  <AnchorLink>Event Streams access management concepts</AnchorLink>\n  <AnchorLink>Pre-requisites</AnchorLink>\n  <AnchorLink>Add access group to the account using IAM</AnchorLink>\n  <AnchorLink>Limiting topic access to group of users</AnchorLink>\n</AnchorLinks>\n\n## IAM Concept Summary\n\nTo undertand the Identity and access management you can read [this article](https://cloud.ibm.com/docs/iam?topic=iam-iamoverview). \n\nTo summarize:\n\n* Account represents the billable entity, and can have multiple users.\n* Users are given access to resource groups.\n* _ Identity_ concept consists of user identities, service and app identities, API keys, and resources.\n* Applications and IBM Cloud Services are identified with a service ID.\n* To restrict permissions for using specific services, you can assign specific access policies to the service ID and user ID\n* Resource groups are here to organize any type of resources (services, clusters, VMs...) that are managed by  Identity and Access Management (IAM).\n* Resource groups are not scoped by location.\n* API keys can be use to authenticate user or a service / application.\n* To control access three components are used: access groups, resources and access policies.\n\t* Access group are used to organize a set of users and service IDs into a single entity and easily assign permissions via _access policies_\n\t* _Policies_ give permission to access account resources. Policies include a subject (user, service, access group), target (resource), and role. \n\t* Policy can be set to all resources in a resource group\n\t* There are two types of access _roles_: platform management and service access.\n\nHere is the main page for the IAM service on IBM Cloud where an account owner can manage the different components of the security control:\n\n![1](./images/iam-main-page.png)\n\n## Event Streams access management concepts\n\nThis section is a quick overview of the [Managing access to your Event Streams resources](https://cloud.ibm.com/docs/services/EventStreams?topic=eventstreams-security) article.\n\n### Roles\n\nUsers can perform specific tasks when they are assigned to a role for which access policies are defined. The roles defined for Event Streams are [Reader, Writer and Manager](https://cloud.ibm.com/docs/EventStreams?topic=EventStreams-security#what_secure).\n\n* _Reader_: Users can view Event Streams resources, and applications can only consume records\n* _Writer_ : Users can edit resource, and applications can produce and consume records\n* _Manager_: Users can do privileged actions.\n\n### Assign access\n\nThe product documentation addresses how to assign access in [this section](https://cloud.ibm.com/docs/EventStreams?topic=EventStreams-security#assign_access).\n\nThe type of Kafka resources that may be secured are: *cluster, topic, group, or transaction id*. In this lab we will give topic access to users within a group and application by using service ID.\n\n## Pre-requisites\n\nThis lab requires the following components to work against:\n\n1. An IBM Cloud account. Get a IBM Cloud Account by using the register link in [https://cloud.ibm.com/login](https://cloud.ibm.com/login)\nCreate a new account is free of charge. \n1. IBM Cloud CLI (<https://cloud.ibm.com/docs/cli?topic=cloud-cli-getting-started>)\n1. IBM CLoud CLI Event Streams plugin (`ibmcloud plugin install event-streams`)\n\n## Add access group to the account using IAM\n\nThe goal of this step is to create an access group to access Event Streams services as administrator.\n\n1. From the IBM Cloud main page, go to the Manage > IAM menu on top right of IBM Cloud Dashboard page:\n\n\t![2](./images/iam-access-1.png)\n\n\tThis should lead you to the main IAM page as illustrated in figure below:\n\n\t![21](./images/iam-main-page.png)\n\n1. Under the Access Group, you can create a new group of users. This will be an administrator group:\n\n\t![3](./images/iam-new-ag.png)\n\n1. Then add users to this newly created group, by selecting users from the list, (those users were invited to join the account at some time) and Click on `Add to group` link.\n\n\t![4](./images/iam-ag-add-user.png)\n\n1. Finally, you want now to add _Access Policies_ to control access to Event Streams clusters. For that click _Assign access_ button:\n\n\t![5](./images/iam-es-ap-1.png)\n\n1. Then select the type of resource (Event Streams), you want to define the access policy on:\n\n\t![6](./images/iam-es-ap-2.png)\n\n1. Then specify that the group can manage all instances of Event Streams service. The condition applies to the service instance with a _Manager_ role:\n\n\t![7](./images/iam-es-ap-3.png)\n\n1. Add the policy and assign it to the group. You could stay in the same panel to add more target to the policy.\n\n\t![8](./images/iam-es-ap-4.png)\n\n1. The newly created, _access policies for administer / manager_ to any Event Streams services is now listed in the access group:\n\n\t![9](./images/iam-es-ap-5.png)\n\nAny user who has a manager role for either 'All' services or 'All' Event Streams services in the same account will also have full access.\n\n## Limiting topic access to group of users\n\nThe product document illustrates some access control common scenarios in [this section](https://cloud.ibm.com/docs/services/EventStreams?topic=eventstreams-security#security_scenarios). We recommend reading those settings.\n\nIn this step we are implementing one of the classical scenario: suppose we have a line of business that will create topics by applying a naming convention where topic name starts with a prefix like: `bn-lob1-*`.  We want users and service ID to  get read / write access to only those topics matching those prefix.\n\nTo do so you need to:\n\n1. Add an access group to include member of the line of business: `bn-lob1-group`\n1. Define an access policy with the following criterias:\n\t* Event streams as resource type\n\t* All regions\n\t* Specifying one of the Event Streams resource instance (the one you provisioned [in this lab](../es-cloud/))\n\t* Select the service instance that hosts the target cluster\n\t* Specify the resource type to be **topic** \n\t* And the resource ID to matches `bn-lob1-*`\n\n\t![T1](./images/iam-es-top-1.png)\n\n\t* Then add a second rule to enforce read access at the cluster level:\n\n\t![T2](./images/iam-es-top-2.png)\n\n\t* Assign the two rules:\n\t\n\t![T3](./images/iam-es-top-3.png)\n\n\t* The group has the two access policies:\n\n\t![T4](./images/iam-es-top-4.png)\n\n\n## API Keys\n\nTo let an application to remotely authenticate itself, Event Streams uses API keys. \nThe goal of this section, is to create API keys so applications, tools, scripts can connect to the newly created IBM Event Streams instance. You will create three keys for the different roles: creation of topics, read access only and read/write access.\n\n1. In your IBM Event Streams instance service page, click on _Service credentials_ on the left hand side menu:\n\n\t![8](images/8.png)\n\n1. Observe, there is no service credentials yet and click on the _New credential_ button on the top right corner:\n\n\t![9](images/9.png)\n\n1. Enter a name for your service, choose _Manager_ role for now and click on _Add_:\n\n\t![10](images/10.png)\n\n1. You should now see your new service credential and be able to inspect its details if you click on its dropdown arrow on it left:\n\n\t![11](images/11.png)\n\nUsing the same process you can add a credential for Writer Role. For the Reader role you will use the CLI in the next section. \n\n### Adding Keys with CLI\n\nYou could create the service credentials using the CLI, so you will add _Reader_ role API Keys:\n\n1. First you can explore the service credentials created previously, using the CLI with `$ ibmcloud resource service-key <service_credentials_name>`:\n\n\t```shell\n\t$ ibmcloud resource service-key demo-serv-cred\n\tRetrieving service key demo-serv-cred in all resource groups under account bill's Account as A......\n\n\tName:          demo-serv-cred\n\tID:            crn:v1:bluemix:public:messagehub:eu-de:a/b636d1d8.....8cfa:b05be932-2....02e687a:resource-key:4ba348d2-...-360e983d99c5\n\tCreated At:    Tue May 12 10:53:02 UTC 2020\n\tState:         active\n\tCredentials:\n\t\t\t\tapi_key:                  *****\n\t\t\t\tapikey:                   *****\n\t\t\t\tiam_apikey_description:   Auto-generated for key 4ba348d2-5fcf-4c13-a265-360e983d99c5\n\t\t\t\tiam_apikey_name:          demo-serv-cred\n\t\t\t\tiam_role_crn:             crn:v1:bluemix:public:iam::::serviceRole:Manager\n\t\t\t\tiam_serviceid_crn:        crn:v1:bluemix:public:iam-identity::a/b636d1d83e34d7ae7e904591ac248cfa::serviceid:ServiceId-380e866c-5914-4e01-85c4-d80bd1b8a899\n\t\t\t\tinstance_id:              b05be932-2a60-4315-951d-a6dd902e687a\n\t\t\t\tkafka_admin_url:          https://mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud\n\t\t\t\tkafka_brokers_sasl:       [kafka-2.mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud:9093 kafka-0.mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud:9093 kafka-1.mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud:9093]\n\t\t\t\tkafka_http_url:           https://mh-tcqsppdpzlrkdmkbgmgl-4c201a12d7add7c99d2b22e361c6f175-0000.eu-de.containers.appdomain.cloud\n\t\t\t\tpassword:                 *****\n\t\t\t\tuser:                     token\n\t```\n1. Add a `Reader` role API key:\n\n\t```shell\n\t# Get the name of the event streams service:\n\tibmcloud resource service-instances\n\tibmcloud resource service-key-create bn-lob1-app-reader Reader --instance-name \"Event Streams-wn\"\n\n\tOK\n\tService key crn:v1:bluemix:public:messagehub:eu-de:a/b6...248cfa:b05...e687a:resource-key:7ee00.....15a2 was created.\n\t\t\t\t\t\n\tName:          bn-lob1-reader   \n\tID:            crn:v1:bluemix:public:messagehub:eu-de:a/b636d..fa:b05b..7a:resource-key:7ee0042.....b15a2   \n\tCreated At:    Wed May 13 00:33:49 UTC 2020   \n\tState:         active   \n\tCredentials:                                   \n\t\t\t\tapi_key:                  xrvMI4PQYmdOcUwPRUJXy6Xlo9UCY9xywNUPiU3jjpKH      \n\t\t\t\tapikey:                   xrvMI4PQYmdOcUwPRUJXy6Xlo9UCY9xywNUPiU3jjpKH      \n\t\t\t\tiam_apikey_description:   Auto-generated for key 7ee0042f-572b-46f6-b9cc-912cc63b15a2      \n\t\t\t\tiam_apikey_name:          bn-lob1-reader      \n\t\t\t\tiam_role_crn:             crn:v1:bluemix:public:iam::::serviceRole:Reader      \n\t\t\t\tiam_serviceid_crn:        crn:v1:bluemix:public:iam-identity::a/b636d1....48cfa::serviceid:ServiceId-b4d3....18af1      \n\t\t\t\tinstance_id:              b05....687a      \n\t\t\t\tkafka_admin_url:          https://mh-tcqsppdpzlrkdmkbgmgl-4c201a...1c6f175-0000.eu-de.containers.appdomain.cloud      \n\t\t\t\tkafka_brokers_sasl:       [kafka-0.mh-tcqsppdpzlrkdmkbgmgl-4c2...175-0000.eu-de.containers.appdomain.cloud:9093....]      \n\t\t\t\tkafka_http_url:           https://mh-tcqsppdpzlrkdmkbgmgl-4c20...-0000.eu-de.containers.appdomain.cloud      \n\t\t\t\tpassword:                 xr......KH      \n\t\t\t\tuser:                     token      \n\t```\n\n## Control applications access\n\nThe last step of this lab is to add a specific IAM group for applications so you can link any future applications to a group so that producer and consumer codes using the Writer role API key as defined previously\ncan read and write to specific topic as defined by a access policy.\n\nWe want to give this Writer role API key to the `bn-lob1-app` gruop, so applications within this group can create topics and R/W on those topics with the name `bn-lob1-*`. \nTo do so, we have to add to the Access Group `bn-lob1-app`, the service ID that maps the Key created above:\n\n1. In IAM Access groups select the service IDs tab and click on add service id button:\n\n\t![SI1](./images/iam-ag-serv-1.png)\n\n1. Search for the key name: `bn-lob1-writer` and  \n\n\t![SI2](./images/iam-ag-serv-2.png)\n\n1. You should get this result:\n\n\t![SI3](./images/iam-ag-serv-3.png)\n\n## Kafka Streams specifics\n\nA lot of Kafka implementations use Kafka Streams API, in this case the applications need to have `Manager` role on topic resource,\nand Reader role for cluster and group with a Manager API Key. \n\n## Connecting application using API Key\n\nTo connect to Event Streams on cloud, we need to define consumer and producer common configuration as presented in the [product documentation](https://cloud.ibm.com/docs/EventStreams?topic=EventStreams-kafka_using#kafka_api_client)\n\nHere is an exemple of using reactive messaging in microprofile with the liberty kafka connector:\n\n```\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=\"org.apache.kafka.common.security.plain.PlainLoginModule required username=token password=longapikeycomingfromservicecredential;\"\n```\n\nThis could in fact being part of the secret ","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/technology/event-streams/security.mdx"}}}}