{"componentChunkName":"component---src-pages-technology-event-streams-consumergrp-mdx","path":"/technology/event-streams/consumergrp/","result":{"pageContext":{"frontmatter":{"title":"Consumer Groups in Event Streams","description":"Consumer Groups in Event Streams"},"relativePagePath":"/technology/event-streams/consumergrp.mdx","titleType":"append","MdxNode":{"id":"ea430831-23ca-5004-b773-25cbf407fa2b","children":[],"parent":"a3d96ab9-cb5b-5207-b2c9-0b8cb9ea4f82","internal":{"content":"---\ntitle: Consumer Groups in Event Streams\ndescription: Consumer Groups in Event Streams\n---\n\n## Consumer groups\n\nYou can review the major concepts for Kafka Consumer in [this note](../../kafka-producers-consumers/#kafka-consumers) and the [product documentation](https://cloud.ibm.com/docs/EventStreams?topic=EventStreams-consuming_messages#consumer-groups).\nThe following figure summarizes the concepts involved in this lab: Consumers belong to **consumer groups** and partitions are dynamically allocated to consumer(s) within the group.\n\n![](../images/consumer-groups.png)\n\n## Considerations\n\nKafka automatically detects failed consumers so that it can reassign partitions to working consumers. \n\nThe consumer can take time to process records, so to avoid the consumer group controler removing consumer taking too long, it is possible to set the [max.poll.interval.ms](https://kafka.apache.org/documentation/#max.poll.interval.ms) consumer property. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. \nThe second mechanism is the heartbeat consumers send to the group cordinator to show they are alive. The [session.timeout.ms](https://kafka.apache.org/documentation/#session.timeout.ms) specifies the max value to consider before removing a non responding consumer. \n\n## Offset\n\nConsumers do a read commit for the last processed record: \n\n![of-1](./images/offsets.png)\n\nWhen a consumer starts and is assigned a partition to consume, it will start at its group's committed offset or latest or ealiest as [auto.offset.reset](https://kafka.apache.org/documentation/#auto.offset.reset) (When there is a committed offset, the auto.offset.reset property is not used).\n\nIf a consumer fails after processing a message but before committing its offset, the committed offset information will not reflect the processing of the message. \n\n![of-2](./images/offsets-2.png)\n\nThis means that the message will be processed again by the next consumer in that group to be assigned the partition.\n\nIn the case where consumers are set to auto commit, it means the offset if committed at the poll() level and if the service crashed while processing of this record as: \n\n![of-3](./images/offsets-3.png)\n\nthen the record (partition 0 - offset 4) will never be processed.\n\n## Consumer lag\n\nThe consumer lag for a partition is the difference between the offset of the most recently published message and the consumer's committed offset.\n\nIf the lag starts to grow, it means the consumer is not able to keep up with the producer's pace.\n\nThe risk, is that slow consumer may fall behind, and when partition management may remove old log segments, leading the consumer to jump forward to continnue on the next log segment. Consumer may have lost messages.\n\n![](./images/offsets-4.png)\n\nYou can use the kafka-consumer-groups tool to see the consumer lag, or use the Event Streams User Interface:\n\n![](./images/es-cg-1.png)\n\nThe group can be extended to see how each consumer, within the group, performs on a multi partitions topic:\n\n![](./images/es-cg-2.png)\n\n\n## Consumer group APIs\n\n### List the consumer groups using CLI\n\n```shell\nibmcloud es groups\n```\n\nResults:\n\n```shell\nGroup ID   \nContainerAnomalyRetrySpringConsumers   \nContainerSpringConsumers   \nOrderSpringConsumers   \nordercmd-command-consumer-grp   \nordercmd-event-consumer-grp   \norderquery-container-consumer   \norderquery-orders-consumer   \nreefer-telemetry-reactive   \nvoyage-consumer-group   \n\n```\n\n### Get the details of a consumer group\n\n```shell\nibmcloud es group ordercmd-command-consumer-grp \n```\n\nand the results:\n\n```shell\nDetails for consumer group ordercmd-command-consumer-grp\nGroup ID                        State   \nordercmd-command-consumer-grp   Stable   \n\nTopic                            Partition   Current offset   End offset   Offset lag   Client                      Consumer                                                         Host   \neda-integration-order-commands   0           11               11           0            ordercmd-command-consumer   ordercmd-command-consumer-337bb052-371b-431a-b386-3a0e99fafb18   /169.254.0.3   \n```\n\n### Reset a group\n\nSometime it is needed to reprocess the messages. The easiest way is to change the groupid of the consumers to get an implicit offsets reset, but it is also possible to reset for some topic to the earliest offset:\n\n\n```shell\n ibmcloud es group-reset --group ordercmd-command-consumer-grp --all-topics --mode earliest --execute\n```\n\nThe previous command is the same as using the kafka tool:\n\n```shell\nkafka-consumer-groups \\\n                    --bootstrap-server kafkahost:9092 \\\n                    --group ordercmd-command-consumer-grp \\\n                    --reset-offsets \\\n                    --all-topics \\\n                    --to-earliest \\\n                    --execute\n```\n\nTo get the processing for a specific topic:\n\n```\n ibmcloud es group-reset --group ordercmd-command-consumer-grp --topic orders\n```\n\n### Delete a group\n\nThis works only for empty group\n\n```\nibmcloud es group-delete reefer-telemetry\n```","type":"Mdx","contentDigest":"935efaed639784dce8f11fc9f72a1358","counter":461,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Consumer Groups in Event Streams\ndescription: Consumer Groups in Event Streams\n---\n\n## Consumer groups\n\nYou can review the major concepts for Kafka Consumer in [this note](../../kafka-producers-consumers/#kafka-consumers) and the [product documentation](https://cloud.ibm.com/docs/EventStreams?topic=EventStreams-consuming_messages#consumer-groups).\nThe following figure summarizes the concepts involved in this lab: Consumers belong to **consumer groups** and partitions are dynamically allocated to consumer(s) within the group.\n\n![](../images/consumer-groups.png)\n\n## Considerations\n\nKafka automatically detects failed consumers so that it can reassign partitions to working consumers. \n\nThe consumer can take time to process records, so to avoid the consumer group controler removing consumer taking too long, it is possible to set the [max.poll.interval.ms](https://kafka.apache.org/documentation/#max.poll.interval.ms) consumer property. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. \nThe second mechanism is the heartbeat consumers send to the group cordinator to show they are alive. The [session.timeout.ms](https://kafka.apache.org/documentation/#session.timeout.ms) specifies the max value to consider before removing a non responding consumer. \n\n## Offset\n\nConsumers do a read commit for the last processed record: \n\n![of-1](./images/offsets.png)\n\nWhen a consumer starts and is assigned a partition to consume, it will start at its group's committed offset or latest or ealiest as [auto.offset.reset](https://kafka.apache.org/documentation/#auto.offset.reset) (When there is a committed offset, the auto.offset.reset property is not used).\n\nIf a consumer fails after processing a message but before committing its offset, the committed offset information will not reflect the processing of the message. \n\n![of-2](./images/offsets-2.png)\n\nThis means that the message will be processed again by the next consumer in that group to be assigned the partition.\n\nIn the case where consumers are set to auto commit, it means the offset if committed at the poll() level and if the service crashed while processing of this record as: \n\n![of-3](./images/offsets-3.png)\n\nthen the record (partition 0 - offset 4) will never be processed.\n\n## Consumer lag\n\nThe consumer lag for a partition is the difference between the offset of the most recently published message and the consumer's committed offset.\n\nIf the lag starts to grow, it means the consumer is not able to keep up with the producer's pace.\n\nThe risk, is that slow consumer may fall behind, and when partition management may remove old log segments, leading the consumer to jump forward to continnue on the next log segment. Consumer may have lost messages.\n\n![](./images/offsets-4.png)\n\nYou can use the kafka-consumer-groups tool to see the consumer lag, or use the Event Streams User Interface:\n\n![](./images/es-cg-1.png)\n\nThe group can be extended to see how each consumer, within the group, performs on a multi partitions topic:\n\n![](./images/es-cg-2.png)\n\n\n## Consumer group APIs\n\n### List the consumer groups using CLI\n\n```shell\nibmcloud es groups\n```\n\nResults:\n\n```shell\nGroup ID   \nContainerAnomalyRetrySpringConsumers   \nContainerSpringConsumers   \nOrderSpringConsumers   \nordercmd-command-consumer-grp   \nordercmd-event-consumer-grp   \norderquery-container-consumer   \norderquery-orders-consumer   \nreefer-telemetry-reactive   \nvoyage-consumer-group   \n\n```\n\n### Get the details of a consumer group\n\n```shell\nibmcloud es group ordercmd-command-consumer-grp \n```\n\nand the results:\n\n```shell\nDetails for consumer group ordercmd-command-consumer-grp\nGroup ID                        State   \nordercmd-command-consumer-grp   Stable   \n\nTopic                            Partition   Current offset   End offset   Offset lag   Client                      Consumer                                                         Host   \neda-integration-order-commands   0           11               11           0            ordercmd-command-consumer   ordercmd-command-consumer-337bb052-371b-431a-b386-3a0e99fafb18   /169.254.0.3   \n```\n\n### Reset a group\n\nSometime it is needed to reprocess the messages. The easiest way is to change the groupid of the consumers to get an implicit offsets reset, but it is also possible to reset for some topic to the earliest offset:\n\n\n```shell\n ibmcloud es group-reset --group ordercmd-command-consumer-grp --all-topics --mode earliest --execute\n```\n\nThe previous command is the same as using the kafka tool:\n\n```shell\nkafka-consumer-groups \\\n                    --bootstrap-server kafkahost:9092 \\\n                    --group ordercmd-command-consumer-grp \\\n                    --reset-offsets \\\n                    --all-topics \\\n                    --to-earliest \\\n                    --execute\n```\n\nTo get the processing for a specific topic:\n\n```\n ibmcloud es group-reset --group ordercmd-command-consumer-grp --topic orders\n```\n\n### Delete a group\n\nThis works only for empty group\n\n```\nibmcloud es group-delete reefer-telemetry\n```","frontmatter":{"title":"Consumer Groups in Event Streams","description":"Consumer Groups in Event Streams"},"fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/technology/event-streams/consumergrp.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}