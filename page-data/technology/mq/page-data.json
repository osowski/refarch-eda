{"componentChunkName":"component---src-pages-technology-mq-index-mdx","path":"/technology/mq/","result":{"pageContext":{"frontmatter":{"title":"IBM MQ in the context of EDA"},"relativePagePath":"/technology/mq/index.mdx","titleType":"append","MdxNode":{"id":"b990325b-4188-54e7-b95f-fa9a04a1b3a8","children":[],"parent":"8f821612-ab46-5609-afd7-e630a331f1b7","internal":{"content":"---\ntitle: IBM MQ in the context of EDA\n---\n\n\n<InlineNotification kind=\"warning\">\n<strong>TODO</strong> - Work in progress\n</InlineNotification>\n\n\n[IBM MQ](https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.2.0/com.ibm.mq.pro.doc/q001020_.htm) is the enterprise solution to exchange message over queues. \nAs it supports loosely coupling communication between applications, via asynchronous protocol, it is part of the event driven architecture product portfolio and makes senses to continue to include it as part of modern cloud native solutions. \n\nThis note is to summarize for architect the technology fits into EDA and gives pointers to important documentations, articles, and code repositories for using MQ.\n\nWe already addressed the [difference between event and messaging](../../concepts/events-versus-messages) systems, and we can affirm that real production plaform needs to include both. This site includes a lot on Kafka as the backbone to support EDA, but MQ delivers a very important missing element is the transactional support to write message to queue to ensure message delivery. \n\nMQ queue managers are the main component to define queue and where applications connect to. They can be organized in network to deliver messages between applications and locations. Managers can be organized in cluster to increase high availability and scaling.\n\n ![1](./images/Picture1.png)\n\nWe encourage to read the [article from Richard Coppen's: 'IBM MQ fundamentals'](https://developer.ibm.com/components/ibm-mq/articles/mq-fundamentals).\n\n## Major benefits in EDA\n\n* **MQ provides assured delivery of data**: No data loss and no duplication, strong support of exactly once.\n* **MQ is horizontally scalable**: As the workload for a single queue manager increases, it is easy to add more queue managers to share tasks and distribute the messages across them. \n* **Highly available**\n* Integrate well with Mainframe to propagate transaction to eventual consistenty world of cloud native distributed applications. Writing to database and MQ queue is part of the same transaction, which simplifies the injection into event backbone like Kafka, via MQ connector.\n* Containerized to run on modern kubernetes platform.\n\n## Installation with Cloud Pak for Integration\n\nStarting with release 2020.2, MQ can be installed via Kubernetes Operator on Openshift platform. From the operator catalog search for MQ. See the [product documentation installation guide](https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.2.0/com.ibm.mq.ctr.doc/ctr_installing_ui.htm) for up to date details.\n\nYou can verify your installation with the following CLI, and get the IBM catalogs accessible:\n\n```shell\noc project openshift-marketplace\noc get CatalogSource\nNAME                   DISPLAY                TYPE      PUBLISHER     AGE\ncertified-operators    Certified Operators    grpc      Red Hat       42d\ncommunity-operators    Community Operators    grpc      Red Hat       42d\nibm-operator-catalog   ibm-operator-catalog   grpc      IBM Content   39d\nopencloud-operators    IBMCS Operators        grpc      IBM           39d\nredhat-marketplace     Red Hat Marketplace    grpc      Red Hat       42d\nredhat-operators       Red Hat Operators      grpc      Red Hat       42d\n```\n\nOnce everything is set up, create an operator. The IBM MQ operator can be installed scoped to a single namespace or all namespaces.  \n \n <img src=\"./images/mq-operator.png\" width=\"200px\"></img>\n\nVerify your environment fits the deployment. [Prepare your Red Hat OpenShift Container Platform for MQ](https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.2.0/com.ibm.mq.ctr.doc/ctr_prepare_project_ui.htm)\nThen once the operator is installed (it could take up to a minute), go to the operator page and create a MQ Manager instance. For example be sure to have defined an ibm-entitlement-key in the project you are planning to use to deploy MQ manager\n\n <img src=\"./images/mq-mgr-via-operator.png\" width=\"200px\"></img>\n\nThen update the Yaml file for name, license and persistence.\n\n <img src=\"./images/mq-yaml.png\" width=\"200px\"></img>\n\nAs an alternate define a QueueManager manifest / yaml file.\n\n ```yaml\napiVersion: mq.ibm.com/v1beta1\nkind: QueueManager\nmetadata:\n  name: eda-mq-lab\nspec:\n  version: 9.2.0.0-r1\n  license:\n    accept: true\n    license: L-RJON-BN7PN3\n    use: NonProduction\n  web:\n    enabled: true\n  queueManager:\n    name: \"EDAQMGR1\"\n    storage:\n      queueManager:\n        type: ephemeral\n  template:\n    pod:\n      containers:\n       - name: qmgr\n         env:\n         - name: MQSNOAUT\n           value: \"yes\"\n ```\n\n Then create the QueueManager resource: \n\n ```shell\n oc apply -f mq-manager.yaml \n # Get the UI route \n oc describe queuemanager eda-mq-lab\n ```\n\n You should get the console from this URL: https://eda-mq-lab-ibm-mq-web-....containers.appdomain.cloud/ibmmq/console/#/\n \n ![4](./images/mq-console.png)\n\nTo access to the `mqsc` CLI and run configuration remote connect via `oc exec -it <podname> bash`.\n\n## Running MQ in docker\n\nThe [following recent article](https://developer.ibm.com/tutorials/mq-connect-app-queue-manager-containers/) from Richard J. Coppen presents such deployment, and can be summarized as:\n\n```shell\n# Use Docker to create a volume:\ndocker volume create qm1data\n# Start queue manager: QM1\ndocker run --env LICENSE=accept --env MQ_QMGR_NAME=QM1 --volume qm1data:/mnt/mqm --publish 1414:1414 --publish 9443:9443 --detach --env MQ_APP_PASSWORD=passw0rd ibmcom/mq:latest\n# The queue managerâ€™s listener listens on port 1414 for incoming connections and port 9443 is used by MQ console\n```\n\nOne queue is created DEV.QUEUE.1 and a channel: DEV.APP.SRVCONN. \n\nThen `docker exec` on the docker container and use the `mqsc` CLI.\n\n## Getting access to the MQ manager\n\nThe MQ Console is a web browser based interface for interacting with MQ objects. It comes pre-configured inside the developer version of MQ in a container. On localhost deployment the URL is [ https://localhost:9443/ibmmq/console/]( https://localhost:9443/ibmmq/console/) while on OpenShift it depends of the Route created.\n\n## Important readings\n\n* [MQ family page](https://www.ibm.com/support/knowledgecenter/en/SSFKSJ/com.ibm.mq.helphome.doc/product_welcome_wmq.htm)\n* [Cloud Pack for Integration product documentation](https://www.ibm.com/support/knowledgecenter/en/SSGT7J_20.2/overview.html)\n* [MQ 9.2 product documentation](https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.2.0/com.ibm.mq.helphome.v92.doc/WelcomePagev9r1.htm)\n* [Article for developer from Richard Coppen's: 'IBM MQ fundamentals'](https://developer.ibm.com/components/ibm-mq/articles/mq-fundamentals)\n* [MQ on Container](https://developer.ibm.com/tutorials/mq-connect-app-queue-manager-containers/)\n\n## Code repositories\n\n* []()","type":"Mdx","contentDigest":"659bb94e2d8a683bc9635facc09688fe","counter":629,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: IBM MQ in the context of EDA\n---\n\n\n<InlineNotification kind=\"warning\">\n<strong>TODO</strong> - Work in progress\n</InlineNotification>\n\n\n[IBM MQ](https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.2.0/com.ibm.mq.pro.doc/q001020_.htm) is the enterprise solution to exchange message over queues. \nAs it supports loosely coupling communication between applications, via asynchronous protocol, it is part of the event driven architecture product portfolio and makes senses to continue to include it as part of modern cloud native solutions. \n\nThis note is to summarize for architect the technology fits into EDA and gives pointers to important documentations, articles, and code repositories for using MQ.\n\nWe already addressed the [difference between event and messaging](../../concepts/events-versus-messages) systems, and we can affirm that real production plaform needs to include both. This site includes a lot on Kafka as the backbone to support EDA, but MQ delivers a very important missing element is the transactional support to write message to queue to ensure message delivery. \n\nMQ queue managers are the main component to define queue and where applications connect to. They can be organized in network to deliver messages between applications and locations. Managers can be organized in cluster to increase high availability and scaling.\n\n ![1](./images/Picture1.png)\n\nWe encourage to read the [article from Richard Coppen's: 'IBM MQ fundamentals'](https://developer.ibm.com/components/ibm-mq/articles/mq-fundamentals).\n\n## Major benefits in EDA\n\n* **MQ provides assured delivery of data**: No data loss and no duplication, strong support of exactly once.\n* **MQ is horizontally scalable**: As the workload for a single queue manager increases, it is easy to add more queue managers to share tasks and distribute the messages across them. \n* **Highly available**\n* Integrate well with Mainframe to propagate transaction to eventual consistenty world of cloud native distributed applications. Writing to database and MQ queue is part of the same transaction, which simplifies the injection into event backbone like Kafka, via MQ connector.\n* Containerized to run on modern kubernetes platform.\n\n## Installation with Cloud Pak for Integration\n\nStarting with release 2020.2, MQ can be installed via Kubernetes Operator on Openshift platform. From the operator catalog search for MQ. See the [product documentation installation guide](https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.2.0/com.ibm.mq.ctr.doc/ctr_installing_ui.htm) for up to date details.\n\nYou can verify your installation with the following CLI, and get the IBM catalogs accessible:\n\n```shell\noc project openshift-marketplace\noc get CatalogSource\nNAME                   DISPLAY                TYPE      PUBLISHER     AGE\ncertified-operators    Certified Operators    grpc      Red Hat       42d\ncommunity-operators    Community Operators    grpc      Red Hat       42d\nibm-operator-catalog   ibm-operator-catalog   grpc      IBM Content   39d\nopencloud-operators    IBMCS Operators        grpc      IBM           39d\nredhat-marketplace     Red Hat Marketplace    grpc      Red Hat       42d\nredhat-operators       Red Hat Operators      grpc      Red Hat       42d\n```\n\nOnce everything is set up, create an operator. The IBM MQ operator can be installed scoped to a single namespace or all namespaces.  \n \n <img src=\"./images/mq-operator.png\" width=\"200px\"></img>\n\nVerify your environment fits the deployment. [Prepare your Red Hat OpenShift Container Platform for MQ](https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.2.0/com.ibm.mq.ctr.doc/ctr_prepare_project_ui.htm)\nThen once the operator is installed (it could take up to a minute), go to the operator page and create a MQ Manager instance. For example be sure to have defined an ibm-entitlement-key in the project you are planning to use to deploy MQ manager\n\n <img src=\"./images/mq-mgr-via-operator.png\" width=\"200px\"></img>\n\nThen update the Yaml file for name, license and persistence.\n\n <img src=\"./images/mq-yaml.png\" width=\"200px\"></img>\n\nAs an alternate define a QueueManager manifest / yaml file.\n\n ```yaml\napiVersion: mq.ibm.com/v1beta1\nkind: QueueManager\nmetadata:\n  name: eda-mq-lab\nspec:\n  version: 9.2.0.0-r1\n  license:\n    accept: true\n    license: L-RJON-BN7PN3\n    use: NonProduction\n  web:\n    enabled: true\n  queueManager:\n    name: \"EDAQMGR1\"\n    storage:\n      queueManager:\n        type: ephemeral\n  template:\n    pod:\n      containers:\n       - name: qmgr\n         env:\n         - name: MQSNOAUT\n           value: \"yes\"\n ```\n\n Then create the QueueManager resource: \n\n ```shell\n oc apply -f mq-manager.yaml \n # Get the UI route \n oc describe queuemanager eda-mq-lab\n ```\n\n You should get the console from this URL: https://eda-mq-lab-ibm-mq-web-....containers.appdomain.cloud/ibmmq/console/#/\n \n ![4](./images/mq-console.png)\n\nTo access to the `mqsc` CLI and run configuration remote connect via `oc exec -it <podname> bash`.\n\n## Running MQ in docker\n\nThe [following recent article](https://developer.ibm.com/tutorials/mq-connect-app-queue-manager-containers/) from Richard J. Coppen presents such deployment, and can be summarized as:\n\n```shell\n# Use Docker to create a volume:\ndocker volume create qm1data\n# Start queue manager: QM1\ndocker run --env LICENSE=accept --env MQ_QMGR_NAME=QM1 --volume qm1data:/mnt/mqm --publish 1414:1414 --publish 9443:9443 --detach --env MQ_APP_PASSWORD=passw0rd ibmcom/mq:latest\n# The queue managerâ€™s listener listens on port 1414 for incoming connections and port 9443 is used by MQ console\n```\n\nOne queue is created DEV.QUEUE.1 and a channel: DEV.APP.SRVCONN. \n\nThen `docker exec` on the docker container and use the `mqsc` CLI.\n\n## Getting access to the MQ manager\n\nThe MQ Console is a web browser based interface for interacting with MQ objects. It comes pre-configured inside the developer version of MQ in a container. On localhost deployment the URL is [ https://localhost:9443/ibmmq/console/]( https://localhost:9443/ibmmq/console/) while on OpenShift it depends of the Route created.\n\n## Important readings\n\n* [MQ family page](https://www.ibm.com/support/knowledgecenter/en/SSFKSJ/com.ibm.mq.helphome.doc/product_welcome_wmq.htm)\n* [Cloud Pack for Integration product documentation](https://www.ibm.com/support/knowledgecenter/en/SSGT7J_20.2/overview.html)\n* [MQ 9.2 product documentation](https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.2.0/com.ibm.mq.helphome.v92.doc/WelcomePagev9r1.htm)\n* [Article for developer from Richard Coppen's: 'IBM MQ fundamentals'](https://developer.ibm.com/components/ibm-mq/articles/mq-fundamentals)\n* [MQ on Container](https://developer.ibm.com/tutorials/mq-connect-app-queue-manager-containers/)\n\n## Code repositories\n\n* []()","frontmatter":{"title":"IBM MQ in the context of EDA"},"fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/technology/mq/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}