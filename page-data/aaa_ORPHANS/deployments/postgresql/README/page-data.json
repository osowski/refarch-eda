{"componentChunkName":"component---src-pages-aaa-orphans-deployments-postgresql-readme-mdx","path":"/aaa_ORPHANS/deployments/postgresql/README/","result":{"pageContext":{"frontmatter":{"title":"Deploying Postgresql to ICP","description":"Deploying Postgresql to ICP"},"relativePagePath":"/aaa_ORPHANS/deployments/postgresql/README.mdx","titleType":"append","MdxNode":{"id":"5a79e14d-f4da-503a-920c-e5952865c3ec","children":[],"parent":"0706927c-895a-5c0b-ac56-cfc1e5bf58be","internal":{"content":"---\ntitle: Deploying Postgresql to ICP\ndescription: Deploying Postgresql to ICP\n---\n\nUpdate 05/10/2019 - ICP 3.2.1\n\n## Pre-requisites\n\n* Access to an ICP cluster with an up to date catalog \n* Once logged to the admin consoler (something like: https://172.16.254.80:8443) go to the Command Line Tools menu and download the IBM Cloud Private CLI. Rename the downloaded file to cloudctl and move it to a folder in your $PATH (e.g. /usr/local/bin/cloudctl)\n* Download the kubeclt CLI that match ICP version. Rename and move the tool to /usr/local/bin/\n* Download the kubeclt CLI that match ICP version. Rename and move the tool to /usr/local/bin/\n* Get psql to access the postgresql.  \n\n## Steps\n\n* Login to the cluster: \n\n```\ncloudctl login -a https://172.16.254.80:8443 -u admin -p <passwordyoushouldknow>  --skip-ssl-validation\n```\n\nWhen selecting the postgresql tile in the database category of the catalog (https://172.16.254.80:8443/catalog/) the Overview gives some steps to follow, but those are from the product documentation and they may need some update. Below are the specifics we did:\n\n* For the namespace we use `greencompute`, so the secret was something like:\n\n```\n$ kubectl create secret generic postgresql-pwd-secret --from-literal='postgresql-password=<>' --namespace greencompute\nsecret \"postgresql-pwd-secret\" created\n```\n\n* Create a persistence volume. You can use HostPath for development purpose, or if you have a NFS or ceph cluster available adapt the CRD file\n\n```yaml\napiVersion: v1,\nkind: PersistentVolume,\nmetadata:\n    name: posgresql-pv,\nspec:\n    capacity:\n      storage: 10Gi\n    hostPath:\n      path: /bitnami/postgresql,\n      type: \"\"\n    accessModes:\n      ReadWriteOnce\n    persistentVolumeReclaimPolicy: Retain\n```\n\nFor NFS use the following changes:\n```\n spec:\n    nfs:\n      server:\n      path: /bitnami/postgresql\n```\n\n* As we deploy postgres in a namespace scope, we need to specify an image policy to authorize access to docker.io repository:\n\n```yaml\napiVersion: securityenforcement.admission.cloud.ibm.com/v1beta1\nkind: ImagePolicy\nnamespace: greencompute\nmetadata:\n  name: postgresql-image-policy\nspec:\n  repositories:\n    - name: docker.io/*\n      policy:\n        va:\n          enabled: false\n```\n\nsave the file as `securitypolicies.yml` and then run:\n\n```\n$ kubectl apply -f securitypolicies.yml -n greencompute\n$ kubectl describe ImagePolicy postgresql-image-policy -n greencompute\n\n```\n\n* Use helm to install the release. Here is an example\n\n```\n$ export PSWD=$(k get secret postgresql-pwd-secret -n greencompute -o jsonpath=\"{.data.postgresql-password}\"  | base64 --decode; echo)\n$ helm install stable/postgresql --name postgresql --namespace greencompute --set postgresqlPassword=$PSWD,postgresqlDatabase=postgres --tls\n```\n\n* Access to the database with psql running locally on your computer\n\nIn one terminal start a port forwarding using: `kubectl port-forward  postgresql-postgresql-0 5432:5432 &>> /dev/null &`. Now we can connect our local `psql` CLI to the remote server via a command like:\n\n```\n$ psql \"dbname=postgres host=127.0.0.1 user=postgres port=5432 password=$PSWD\"\n\npostgres=# \\d containers\n id           | character varying(255)      |           | not null | \n brand        | character varying(255)      |           |          | \n capacity     | integer                     |           | not null | \n created_at   | timestamp without time zone |           | not null | \n current_city | character varying(255)      |           |          | \n latitude     | double precision            |           | not null | \n longitude    | double precision            |           | not null | \n status       | integer                     |           |          | \n type         | character varying(255)      |           |          | \n updated_at   | timestamp without time zone |           | not null | \n```\n\nFor more information about the `psql` tool see [this note.](http://postgresguide.com/utilities/psql.html)\n\n## Troubleshooting\n\n>  admission webhook \"trust.hooks.securityenforcement.admission.cloud.ibm.com\" denied the request: Deny \"docker.io/bitnami/postgresql:10.7.0\", no matching repositories in ClusterImagePolicy and no ImagePolicies in the \"greencompute\" namespace\n\n Be sure to use a ImagePolicy and not a cluster policy when using namespace deployment.\n\n> Error: release postgresql failed: Internal error occurred: admission webhook \"trust.hooks.securityenforcement.admission.cloud.ibm.com\" denied the request: Deny \"docker.io/bitnami/postgresql:10.7.0\", no matching repositories in the ImagePolicies\n\nBe sure to authorize docker.io/* in the ImagePolicy.\n\n\n## More Readings\n\n* [ICP 2.1 Postgresql install recipe:](https://developer.ibm.com/recipes/tutorials/deploy-postgresql-into-ibm-cloud-private/) older recipeusing the configuration user interface in the ICP console.\n* [postgresql helm chart explanation and configuration](https://github.com/helm/charts/tree/master/stable/postgresql): a must read.\n* [Installing postgresql via Helm](https://medium.com/@nicdoye/installing-postgresql-via-helm-237e026453b1)\n* [Reefer container management microservice using Springboot, kafka and postgresql](https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/tree/master/SpringContainerMS)","type":"Mdx","contentDigest":"d870e0880eaeb14e81ab2af0ce209314","counter":363,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Deploying Postgresql to ICP","description":"Deploying Postgresql to ICP"},"exports":{},"rawBody":"---\ntitle: Deploying Postgresql to ICP\ndescription: Deploying Postgresql to ICP\n---\n\nUpdate 05/10/2019 - ICP 3.2.1\n\n## Pre-requisites\n\n* Access to an ICP cluster with an up to date catalog \n* Once logged to the admin consoler (something like: https://172.16.254.80:8443) go to the Command Line Tools menu and download the IBM Cloud Private CLI. Rename the downloaded file to cloudctl and move it to a folder in your $PATH (e.g. /usr/local/bin/cloudctl)\n* Download the kubeclt CLI that match ICP version. Rename and move the tool to /usr/local/bin/\n* Download the kubeclt CLI that match ICP version. Rename and move the tool to /usr/local/bin/\n* Get psql to access the postgresql.  \n\n## Steps\n\n* Login to the cluster: \n\n```\ncloudctl login -a https://172.16.254.80:8443 -u admin -p <passwordyoushouldknow>  --skip-ssl-validation\n```\n\nWhen selecting the postgresql tile in the database category of the catalog (https://172.16.254.80:8443/catalog/) the Overview gives some steps to follow, but those are from the product documentation and they may need some update. Below are the specifics we did:\n\n* For the namespace we use `greencompute`, so the secret was something like:\n\n```\n$ kubectl create secret generic postgresql-pwd-secret --from-literal='postgresql-password=<>' --namespace greencompute\nsecret \"postgresql-pwd-secret\" created\n```\n\n* Create a persistence volume. You can use HostPath for development purpose, or if you have a NFS or ceph cluster available adapt the CRD file\n\n```yaml\napiVersion: v1,\nkind: PersistentVolume,\nmetadata:\n    name: posgresql-pv,\nspec:\n    capacity:\n      storage: 10Gi\n    hostPath:\n      path: /bitnami/postgresql,\n      type: \"\"\n    accessModes:\n      ReadWriteOnce\n    persistentVolumeReclaimPolicy: Retain\n```\n\nFor NFS use the following changes:\n```\n spec:\n    nfs:\n      server:\n      path: /bitnami/postgresql\n```\n\n* As we deploy postgres in a namespace scope, we need to specify an image policy to authorize access to docker.io repository:\n\n```yaml\napiVersion: securityenforcement.admission.cloud.ibm.com/v1beta1\nkind: ImagePolicy\nnamespace: greencompute\nmetadata:\n  name: postgresql-image-policy\nspec:\n  repositories:\n    - name: docker.io/*\n      policy:\n        va:\n          enabled: false\n```\n\nsave the file as `securitypolicies.yml` and then run:\n\n```\n$ kubectl apply -f securitypolicies.yml -n greencompute\n$ kubectl describe ImagePolicy postgresql-image-policy -n greencompute\n\n```\n\n* Use helm to install the release. Here is an example\n\n```\n$ export PSWD=$(k get secret postgresql-pwd-secret -n greencompute -o jsonpath=\"{.data.postgresql-password}\"  | base64 --decode; echo)\n$ helm install stable/postgresql --name postgresql --namespace greencompute --set postgresqlPassword=$PSWD,postgresqlDatabase=postgres --tls\n```\n\n* Access to the database with psql running locally on your computer\n\nIn one terminal start a port forwarding using: `kubectl port-forward  postgresql-postgresql-0 5432:5432 &>> /dev/null &`. Now we can connect our local `psql` CLI to the remote server via a command like:\n\n```\n$ psql \"dbname=postgres host=127.0.0.1 user=postgres port=5432 password=$PSWD\"\n\npostgres=# \\d containers\n id           | character varying(255)      |           | not null | \n brand        | character varying(255)      |           |          | \n capacity     | integer                     |           | not null | \n created_at   | timestamp without time zone |           | not null | \n current_city | character varying(255)      |           |          | \n latitude     | double precision            |           | not null | \n longitude    | double precision            |           | not null | \n status       | integer                     |           |          | \n type         | character varying(255)      |           |          | \n updated_at   | timestamp without time zone |           | not null | \n```\n\nFor more information about the `psql` tool see [this note.](http://postgresguide.com/utilities/psql.html)\n\n## Troubleshooting\n\n>  admission webhook \"trust.hooks.securityenforcement.admission.cloud.ibm.com\" denied the request: Deny \"docker.io/bitnami/postgresql:10.7.0\", no matching repositories in ClusterImagePolicy and no ImagePolicies in the \"greencompute\" namespace\n\n Be sure to use a ImagePolicy and not a cluster policy when using namespace deployment.\n\n> Error: release postgresql failed: Internal error occurred: admission webhook \"trust.hooks.securityenforcement.admission.cloud.ibm.com\" denied the request: Deny \"docker.io/bitnami/postgresql:10.7.0\", no matching repositories in the ImagePolicies\n\nBe sure to authorize docker.io/* in the ImagePolicy.\n\n\n## More Readings\n\n* [ICP 2.1 Postgresql install recipe:](https://developer.ibm.com/recipes/tutorials/deploy-postgresql-into-ibm-cloud-private/) older recipeusing the configuration user interface in the ICP console.\n* [postgresql helm chart explanation and configuration](https://github.com/helm/charts/tree/master/stable/postgresql): a must read.\n* [Installing postgresql via Helm](https://medium.com/@nicdoye/installing-postgresql-via-helm-237e026453b1)\n* [Reefer container management microservice using Springboot, kafka and postgresql](https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/tree/master/SpringContainerMS)","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/aaa_ORPHANS/deployments/postgresql/README.mdx"}}}}