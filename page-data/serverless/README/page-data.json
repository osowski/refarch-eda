{"componentChunkName":"component---src-pages-serverless-readme-mdx","path":"/serverless/README/","result":{"pageContext":{"frontmatter":{"title":"Function as a Service","description":"Function as a Service"},"relativePagePath":"/serverless/README.mdx","titleType":"append","MdxNode":{"id":"e6ba31b0-d31d-5e83-8e80-7b85550e1567","children":[],"parent":"a4b62a63-27f2-5b69-9031-3de2b288719c","internal":{"content":"---\ntitle: Function as a Service\ndescription: Function as a Service\n---\n\n## Kubeless\nTo install kubeless on ICP we first connect to the cluster and then use the command below:\n\n```\n$ kubectl create namespace kubeless\n$ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.8/kubeless-v1.0.0-alpha.8.yaml -n kubeless\n```\nThe image is using RBAC:\n\nThe deployment creates one pod with 3 containers inside:\n<img src=\"kubeless-deploy.png\" alt=\"drawing\" width=\"400\"/>\n\nWe need to have the `kubeless` CLI install:\n```\n$ export OS=$(uname -s| tr '[:upper:]' '[:lower:]')\n$ curl -OL https://github.com/kubeless/kubeless/releases/download/$RELEASE/kubeless_$OS-amd64.zip && \\\n  unzip kubeless_$OS-amd64.zip && \\\n  sudo mv bundles/kubeless_$OS-amd64/kubeless /usr/local/bin/\n```\n\n### To deploy a simple hello\nThe code for this function is under [this repository](https://github.com/ibm-cloud-architecture/refarch-cognitive-analytics/tree/master/src/functions)\nbut it is a simple python function implementing the serverless 'interface':\n```python3\ndef hello(event, context):\n  print(event)\n  return event['data']\n```\nTo deploy we can use the command:\n```\n$ kubeless function deploy hellojb --runtime python3.6  --trigger-http --from-file functionHello.py --handler functionHello.hello\nINFO[0000] Deploying function...                        \nINFO[0001] Function hellojb submitted for deployment    \nINFO[0001] Check the deployment status executing 'kubeless function ls hellojb'\n```\n\nTo see the functions deployed\n```\n$ kubectl get functions\n```\nor\n```\n$ kubeless function ls\nNAME   \tNAMESPACE   \tHANDLER   \tRUNTIME  \tDEPENDENCIES\tSTATUS       \nhellojb\tgreencompute\ttest.hello\tpython3.6\t            \t1/1 READY\n```\n\nThe deployment of a function creates automatically a pod:\n```\n$ kubectl describe pod hellojb\n...\nContainers:\n  hellojb:\n    Container ID:   docker://53ca1131747e5b18bfeb67609b4e7bb2400cf45202ade2c03274b9df1eff9bc2\n    Image:          kubeless/python@sha256:0c9f8f727d42625a4e25230cfe612df7488b65f283e7972f84108d87e7443d72\n    Image ID:       docker-pullable://kubeless/python@sha256:0c9f8f727d42625a4e25230cfe612df7488b65f283e7972f84108d87e7443d72\n    Port:           8080/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Thu, 06 Sep 2018 17:12:52 -0700\n    Ready:          True\n    Restart Count:  0\n    Liveness:       http-get http://:8080/healthz delay=3s timeout=1s period=30s #success=1 #failure=3\n    Environment:\n      FUNC_HANDLER:       hello\n      MOD_NAME:           test\n      FUNC_TIMEOUT:       180\n      FUNC_RUNTIME:       python3.6\n      FUNC_MEMORY_LIMIT:  0\n      FUNC_PORT:          8080\n      PYTHONPATH:         /kubeless/lib/python3.6/site-packages:/kubeless\n    Mounts:\n      /kubeless from hellojb (rw)\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-9nw2z (ro)\n```\nand kubeless create service for each function:\n```\n$ kubectl describe svc hellojb\nName:              hellojb\nNamespace:         greencompute\nLabels:            created-by=kubeless\n                   function=hellojb\nAnnotations:       <none>\nSelector:          created-by=kubeless,function=hellojb\nType:              ClusterIP\nIP:                10.10.10.41\nPort:              http-function-port  8080/TCP\nTargetPort:        8080/TCP\nEndpoints:         192.168.130.101:8080\nSession Affinity:  None\nEvents:            <none>\n```\n\n* Remove the function\n```\nkubeless delete\n```\n### Calling the function\nThe quickest way is to proxy the server and then call the local URL:\n```\n$ kubectl proxy -p 8080 &\n$ kubeless function call hellojb --data 'Hello Bill!'\n```\n\nA second way is to test using HTTP client.\n\n## Developing a predictive scoring function\nIn [this project](https://github.com/ibm-cloud-architecture/refarch-asset-analytics/tree/master/asset-predictive-scoring) we are addressing how to develop a scoring service using Python, sklearn and serveless to deploy the model as function.\n\n## Compendium\n* [Excellent article from Martin Fowler](https://martinfowler.com/articles/serverless.html)\n* [Serverless framework](https://serverless.com/): The Framework uses new event-driven compute services, like AWS Lambda, Google Cloud Functions, and more. It's a command-line tool, providing scaffolding, workflow automation and best practices for developing and deploying your serverless architecture.\n* [Apache OpenWhisk](https://openwhisk.apache.org/)\n* [Claudia to deploy nodejs on AWS lambda](https://github.com/claudiajs/claudia)\n* [Zappa](https://github.com/Miserlou/Zappa): Zappa makes it super easy to build and deploy server-less, event-driven Python applications on AWS Lambda + API Gateway.\n* [Serverless conf: operational best practices](https://charity.wtf/2016/05/31/operational-best-practices-serverless/)\n* [Evaluating cost for FaaS](http://www.doc.ic.ac.uk/~rbc/papers/fse-serverless-17.pdf)\n","type":"Mdx","contentDigest":"f96c07099b7aa02a929019c73618ca3a","counter":262,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Function as a Service","description":"Function as a Service"},"exports":{},"rawBody":"---\ntitle: Function as a Service\ndescription: Function as a Service\n---\n\n## Kubeless\nTo install kubeless on ICP we first connect to the cluster and then use the command below:\n\n```\n$ kubectl create namespace kubeless\n$ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.8/kubeless-v1.0.0-alpha.8.yaml -n kubeless\n```\nThe image is using RBAC:\n\nThe deployment creates one pod with 3 containers inside:\n<img src=\"kubeless-deploy.png\" alt=\"drawing\" width=\"400\"/>\n\nWe need to have the `kubeless` CLI install:\n```\n$ export OS=$(uname -s| tr '[:upper:]' '[:lower:]')\n$ curl -OL https://github.com/kubeless/kubeless/releases/download/$RELEASE/kubeless_$OS-amd64.zip && \\\n  unzip kubeless_$OS-amd64.zip && \\\n  sudo mv bundles/kubeless_$OS-amd64/kubeless /usr/local/bin/\n```\n\n### To deploy a simple hello\nThe code for this function is under [this repository](https://github.com/ibm-cloud-architecture/refarch-cognitive-analytics/tree/master/src/functions)\nbut it is a simple python function implementing the serverless 'interface':\n```python3\ndef hello(event, context):\n  print(event)\n  return event['data']\n```\nTo deploy we can use the command:\n```\n$ kubeless function deploy hellojb --runtime python3.6  --trigger-http --from-file functionHello.py --handler functionHello.hello\nINFO[0000] Deploying function...                        \nINFO[0001] Function hellojb submitted for deployment    \nINFO[0001] Check the deployment status executing 'kubeless function ls hellojb'\n```\n\nTo see the functions deployed\n```\n$ kubectl get functions\n```\nor\n```\n$ kubeless function ls\nNAME   \tNAMESPACE   \tHANDLER   \tRUNTIME  \tDEPENDENCIES\tSTATUS       \nhellojb\tgreencompute\ttest.hello\tpython3.6\t            \t1/1 READY\n```\n\nThe deployment of a function creates automatically a pod:\n```\n$ kubectl describe pod hellojb\n...\nContainers:\n  hellojb:\n    Container ID:   docker://53ca1131747e5b18bfeb67609b4e7bb2400cf45202ade2c03274b9df1eff9bc2\n    Image:          kubeless/python@sha256:0c9f8f727d42625a4e25230cfe612df7488b65f283e7972f84108d87e7443d72\n    Image ID:       docker-pullable://kubeless/python@sha256:0c9f8f727d42625a4e25230cfe612df7488b65f283e7972f84108d87e7443d72\n    Port:           8080/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Thu, 06 Sep 2018 17:12:52 -0700\n    Ready:          True\n    Restart Count:  0\n    Liveness:       http-get http://:8080/healthz delay=3s timeout=1s period=30s #success=1 #failure=3\n    Environment:\n      FUNC_HANDLER:       hello\n      MOD_NAME:           test\n      FUNC_TIMEOUT:       180\n      FUNC_RUNTIME:       python3.6\n      FUNC_MEMORY_LIMIT:  0\n      FUNC_PORT:          8080\n      PYTHONPATH:         /kubeless/lib/python3.6/site-packages:/kubeless\n    Mounts:\n      /kubeless from hellojb (rw)\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-9nw2z (ro)\n```\nand kubeless create service for each function:\n```\n$ kubectl describe svc hellojb\nName:              hellojb\nNamespace:         greencompute\nLabels:            created-by=kubeless\n                   function=hellojb\nAnnotations:       <none>\nSelector:          created-by=kubeless,function=hellojb\nType:              ClusterIP\nIP:                10.10.10.41\nPort:              http-function-port  8080/TCP\nTargetPort:        8080/TCP\nEndpoints:         192.168.130.101:8080\nSession Affinity:  None\nEvents:            <none>\n```\n\n* Remove the function\n```\nkubeless delete\n```\n### Calling the function\nThe quickest way is to proxy the server and then call the local URL:\n```\n$ kubectl proxy -p 8080 &\n$ kubeless function call hellojb --data 'Hello Bill!'\n```\n\nA second way is to test using HTTP client.\n\n## Developing a predictive scoring function\nIn [this project](https://github.com/ibm-cloud-architecture/refarch-asset-analytics/tree/master/asset-predictive-scoring) we are addressing how to develop a scoring service using Python, sklearn and serveless to deploy the model as function.\n\n## Compendium\n* [Excellent article from Martin Fowler](https://martinfowler.com/articles/serverless.html)\n* [Serverless framework](https://serverless.com/): The Framework uses new event-driven compute services, like AWS Lambda, Google Cloud Functions, and more. It's a command-line tool, providing scaffolding, workflow automation and best practices for developing and deploying your serverless architecture.\n* [Apache OpenWhisk](https://openwhisk.apache.org/)\n* [Claudia to deploy nodejs on AWS lambda](https://github.com/claudiajs/claudia)\n* [Zappa](https://github.com/Miserlou/Zappa): Zappa makes it super easy to build and deploy server-less, event-driven Python applications on AWS Lambda + API Gateway.\n* [Serverless conf: operational best practices](https://charity.wtf/2016/05/31/operational-best-practices-serverless/)\n* [Evaluating cost for FaaS](http://www.doc.ic.ac.uk/~rbc/papers/fse-serverless-17.pdf)\n","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs-gatsby/src/pages/serverless/README.mdx"}}}}