{"version":3,"sources":["webpack:///./src/pages/evt-state/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,0bACA,sBACE,kBAAIC,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,mGACA,kBAAIA,WAAW,MAAf,0HAEF,wCACA,0JAAyI,mBAAGA,WAAW,KAAQ,CAC3J,KAAQ,yCAD6H,WAAzI,KAGA,yEACA,0KACA,sDAAqC,mBAAGA,WAAW,KAAQ,CACvD,KAAQ,+BADyB,WAArC,KAGA,0CAAyB,mBAAGA,WAAW,KAAQ,CAC3C,KAAQ,kEADa,4BAAzB,yFAGA,gEACA,6oCAGA,2CACA,qDAAoC,mBAAGA,WAAW,KAAQ,CACtD,KAAQ,qDADwB,oDAApC,YAE0E,mBAAGA,WAAW,KAAQ,CAC5F,KAAQ,kEAD8D,6BAG1E,6CACA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+DADQ,mCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4CADQ,oCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iDADQ,0BAQ1BJ,EAAWK,gBAAiB","file":"component---src-pages-evt-state-readme-mdx-dfea30166f1dc467d0e7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs-gatsby/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`While the prime focus for an event-driven architecture is processing events, in certain cases you need to persist events for post processing and queries by other applications. The event backbone has a built-in event log that can be used to store and reply to events that are published to the backbone. However, considering the full scope of event-driven solutions, other use cases and types of store can be supported:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Event stores optimized for analytics.`}</li>\n      <li parentName=\"ul\">{`Event sourcing as a pattern for recording state changes and updates across distributed systems.`}</li>\n      <li parentName=\"ul\">{`Command Query Response Separation (CQRS) as an optimization that separates updates and reads across different stores.`}</li>\n    </ul>\n    <h2>{`Event sourcing`}</h2>\n    <p>{`When the state of a system changes, an application issues a notification event of the state change. We are detailing this pattern `}<a parentName=\"p\" {...{\n        \"href\": \"../design-patterns/event-sourcing.md\"\n      }}>{`here >>`}</a>{` `}</p>\n    <h2>{`Command Query Responsibility Segregation (CQRS)`}</h2>\n    <p>{`The event log leads to more work to support business query as it requires converting the events into the application state suitable to the query.`}</p>\n    <p>{`We are detailing this pattern `}<a parentName=\"p\" {...{\n        \"href\": \"../design-patterns/cqrs.md\"\n      }}>{`here >>`}</a>{` `}</p>\n    <p>{`See the following `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-order-ms\"\n      }}>{`order management project`}</a>{` for a detail explanation and implementation of the CQRS and event sourcing patterns.`}</p>\n    <h2>{`Event sourcing, CQRS and microservices`}</h2>\n    <p>{`With the adoption of microservices you have explicitly separated state, so that a microservice is bounded with its own state. Further, with the use of event sourcing, you create a history log that is not easy to query. The challenge now comes when you need to implement a query that requires a joining of data from multiple services.\nThere are multiple choices to address service orchestration: API composition or the CQRS pattern. For API composition the query is supported by an operation which integrate with all other microservices and may do some data transformation to combine the results. With this pattern you need to assess for aggregation requirements as they may dramatically impact performance. You may need to assess where to put this API composition component. It can be an API gateway or part of a BFF or even its own microservices.\nThe other answer is to implement a CQRS pattern where state changes are published as events by multiple related business objects. Each change is persisted in the event log or event store, and a higher level operation subscribes to each event and persists the data in a queryable data store.`}</p>\n    <h2>{`Fearther readings`}</h2>\n    <p>{`Read more on this pattern at `}<a parentName=\"p\" {...{\n        \"href\": \"https://microservices.io/patterns/data/cqrs.html\"\n      }}>{`https://microservices.io/patterns/data/cqrs.html`}</a>{` and our `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-order-ms\"\n      }}>{`reference implementation`}</a></p>\n    <h2>{`Supporting Products`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://console.bluemix.net/catalog/services/event-streams\"\n        }}>{`IBM Event Streams Public Cloud`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.ibm.com/cloud/event-streams\"\n        }}>{`IBM Event Streams Private Cloud`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.ibm.com/products/db2-event-store\"\n        }}>{`IBM Db2 Event store`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}