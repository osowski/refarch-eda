(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{DoNq:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n("wx14"),o=n("zLVn"),l=(n("q1tI"),n("7ljp")),r=n("013z"),c=(n("qKvR"),{}),s={_frontmatter:c},i=r.a;function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(l.b)(i,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Update 05/10/2019 - ICP 3.2.1"),Object(l.b)("h2",null,"Pre-requisites"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Access to an ICP cluster with an up to date catalog "),Object(l.b)("li",{parentName:"ul"},"Once logged to the admin consoler (something like: ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://172.16.254.80:8443"}),"https://172.16.254.80:8443"),") go to the Command Line Tools menu and download the IBM Cloud Private CLI. Rename the downloaded file to cloudctl and move it to a folder in your $PATH (e.g. /usr/local/bin/cloudctl)"),Object(l.b)("li",{parentName:"ul"},"Download the kubeclt CLI that match ICP version. Rename and move the tool to /usr/local/bin/"),Object(l.b)("li",{parentName:"ul"},"Download the kubeclt CLI that match ICP version. Rename and move the tool to /usr/local/bin/"),Object(l.b)("li",{parentName:"ul"},"Get psql to access the postgresql.  ")),Object(l.b)("h2",null,"Steps"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Login to the cluster: ")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"cloudctl login -a https://172.16.254.80:8443 -u admin -p <passwordyoushouldknow>  --skip-ssl-validation\n")),Object(l.b)("p",null,"When selecting the postgresql tile in the database category of the catalog (",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://172.16.254.80:8443/catalog/"}),"https://172.16.254.80:8443/catalog/"),") the Overview gives some steps to follow, but those are from the product documentation and they may need some update. Below are the specifics we did:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"For the namespace we use ",Object(l.b)("inlineCode",{parentName:"li"},"greencompute"),", so the secret was something like:")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ kubectl create secret generic postgresql-pwd-secret --from-literal='postgresql-password=<>' --namespace greencompute\nsecret \"postgresql-pwd-secret\" created\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Create a persistence volume. You can use HostPath for development purpose, or if you have a NFS or ceph cluster available adapt the CRD file")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: v1,\nkind: PersistentVolume,\nmetadata:\n    name: posgresql-pv,\nspec:\n    capacity:\n      storage: 10Gi\n    hostPath:\n      path: /bitnami/postgresql,\n      type: ""\n    accessModes:\n      ReadWriteOnce\n    persistentVolumeReclaimPolicy: Retain\n')),Object(l.b)("p",null,"For NFS use the following changes:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{})," spec:\n    nfs:\n      server:\n      path: /bitnami/postgresql\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"As we deploy postgres in a namespace scope, we need to specify an image policy to authorize access to docker.io repository:")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"apiVersion: securityenforcement.admission.cloud.ibm.com/v1beta1\nkind: ImagePolicy\nnamespace: greencompute\nmetadata:\n  name: postgresql-image-policy\nspec:\n  repositories:\n    - name: docker.io/*\n      policy:\n        va:\n          enabled: false\n")),Object(l.b)("p",null,"save the file as ",Object(l.b)("inlineCode",{parentName:"p"},"securitypolicies.yml")," and then run:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ kubectl apply -f securitypolicies.yml -n greencompute\n$ kubectl describe ImagePolicy postgresql-image-policy -n greencompute\n\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use helm to install the release. Here is an example")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),'$ export PSWD=$(k get secret postgresql-pwd-secret -n greencompute -o jsonpath="{.data.postgresql-password}"  | base64 --decode; echo)\n$ helm install stable/postgresql --name postgresql --namespace greencompute --set postgresqlPassword=$PSWD,postgresqlDatabase=postgres --tls\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Access to the database with psql running locally on your computer")),Object(l.b)("p",null,"In one terminal start a port forwarding using: ",Object(l.b)("inlineCode",{parentName:"p"},"kubectl port-forward  postgresql-postgresql-0 5432:5432 &>> /dev/null &"),". Now we can connect our local ",Object(l.b)("inlineCode",{parentName:"p"},"psql")," CLI to the remote server via a command like:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),'$ psql "dbname=postgres host=127.0.0.1 user=postgres port=5432 password=$PSWD"\n\npostgres=# \\d containers\n id           | character varying(255)      |           | not null | \n brand        | character varying(255)      |           |          | \n capacity     | integer                     |           | not null | \n created_at   | timestamp without time zone |           | not null | \n current_city | character varying(255)      |           |          | \n latitude     | double precision            |           | not null | \n longitude    | double precision            |           | not null | \n status       | integer                     |           |          | \n type         | character varying(255)      |           |          | \n updated_at   | timestamp without time zone |           | not null | \n')),Object(l.b)("p",null,"For more information about the ",Object(l.b)("inlineCode",{parentName:"p"},"psql")," tool see ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"http://postgresguide.com/utilities/psql.html"}),"this note.")),Object(l.b)("h2",null,"Troubleshooting"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"}," admission webhook “trust.hooks.securityenforcement.admission.cloud.ibm.com” denied the request: Deny “docker.io/bitnami/postgresql:10.7.0”, no matching repositories in ClusterImagePolicy and no ImagePolicies in the “greencompute” namespace")),Object(l.b)("p",null," Be sure to use a ImagePolicy and not a cluster policy when using namespace deployment."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Error: release postgresql failed: Internal error occurred: admission webhook “trust.hooks.securityenforcement.admission.cloud.ibm.com” denied the request: Deny “docker.io/bitnami/postgresql:10.7.0”, no matching repositories in the ImagePolicies")),Object(l.b)("p",null,"Be sure to authorize docker.io/* in the ImagePolicy."),Object(l.b)("h2",null,"More Readings"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://developer.ibm.com/recipes/tutorials/deploy-postgresql-into-ibm-cloud-private/"}),"ICP 2.1 Postgresql install recipe:")," older recipeusing the configuration user interface in the ICP console."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/helm/charts/tree/master/stable/postgresql"}),"postgresql helm chart explanation and configuration"),": a must read."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://medium.com/@nicdoye/installing-postgresql-via-helm-237e026453b1"}),"Installing postgresql via Helm")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/tree/master/SpringContainerMS"}),"Reefer container management microservice using Springboot, kafka and postgresql"))))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-aaa-orphans-deployments-postgresql-readme-mdx-c10cc487b2d29316e6c4.js.map