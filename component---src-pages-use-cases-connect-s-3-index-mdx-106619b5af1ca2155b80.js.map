{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./src/pages/use-cases/connect-s3/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss"],"names":["PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","aria-label","list","React","Component","LastModifiedDate","date","lastModified","Date","toLocaleDateString","day","year","month","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","_frontmatter","makeShortcode","name","console","warn","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","module","exports"],"mappings":"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","file":"component---src-pages-use-cases-connect-s-3-index-mdx-106619b5af1ca2155b80.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Overview</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Scenario prereqs</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Kafka Connect Cluster</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Kafka to S3 Sink Connector</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">S3 to Kafka Source Connector</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Event Streams v10 Addendum</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Troubleshooting</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Next steps</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">References</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Overview`}</h2>\n    <p>{`This scenario walkthrough will cover the usage of `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm.github.io/event-streams/about/overview/\"\n      }}>{`IBM Event Streams`}</a>{` as a Kafka provider and `}<a parentName=\"p\" {...{\n        \"href\": \"https://aws.amazon.com/s3/\"\n      }}>{`Amazon S3`}</a>{` as an object storage service as systems to integrate with the `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm-cloud-architecture.github.io/refarch-eda/kafka/connect/\"\n      }}>{`Kafka Connect framework`}</a>{`. Through the use of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://camel.apache.org/\"\n      }}>{`Apache Camel opensource project`}</a>{`, we are able to use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://camel.apache.org/camel-kafka-connector/latest/index.html\"\n      }}>{`Apache Camel Kafka Connector`}</a>{` in both a source and a sink capacity to provide bidirectional communication between `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm.github.io/event-streams/about/overview/\"\n      }}>{`IBM Event Streams`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://aws.amazon.com/s3/\"\n      }}>{`AWS S3`}</a>{`.`}</p>\n    <img {...{\n      \"src\": \"https://github.com/ibm-cloud-architecture/refarch-eda/raw/master/docs-archive/kafka/images/eventstreams-to-s3-connector-flow.png\",\n      \"alt\": \"IBM Event Streams to S3 integration via Kafka Connect\"\n    }}></img>\n    <p>{`As different use cases will require different configuration details to accommodate different situational requirements, the Kafka to S3 Source and Sink capabilities described here can be used to move data between S3 buckets with a Kafka topic being the middle-man or move data between Kafka topics with an S3 Bucket being the middle-man. However, take care to ensure that you do not create an infinite processing loop by writing to the same Kafka topics and the same S3 buckets with both a Source and Sink connector deployed at the same time.`}</p>\n    <h2>{`Scenario prereqs`}</h2>\n    <p><strong parentName=\"p\">{`OpenShift Container Platform`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`This deployment scenario was developed for use on the OpenShift Container Platform, with a minimum version of `}<inlineCode parentName=\"li\">{`4.2`}</inlineCode>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Strimzi`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`This deployment scenario will make use of the `}<a parentName=\"li\" {...{\n          \"href\": \"https://strimzi.io/docs/0.17.0/\"\n        }}>{`Strimzi Operator`}</a>{` for Kafka deployments and the custom resources it manages.`}</li>\n      <li parentName=\"ul\">{`A minimum version of `}<inlineCode parentName=\"li\">{`0.17.0`}</inlineCode>{` is required for this scenario. This scenario has been explicitly validated with version `}<inlineCode parentName=\"li\">{`0.17.0`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The simplest scenario is to deploy the Strimzi Operator to `}<a parentName=\"li\" {...{\n          \"href\": \"https://strimzi.io/docs/0.17.0/#deploying-cluster-operator-to-watch-whole-cluster-deploying-co\"\n        }}>{`watch all namespaces`}</a>{` for relevant custom resource creation and management.`}</li>\n      <li parentName=\"ul\">{`This can be done in the OpenShift console via the `}<strong parentName=\"li\">{`Operators > Operator Hub`}</strong>{` page.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Amazon Web Services account`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`As this scenario will make use of `}<a parentName=\"p\" {...{\n            \"href\": \"https://aws.amazon.com/s3/\"\n          }}>{`AWS S3`}</a>{`, an active Amazon Web Services account is required.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Using the configuration described in this walkthrough, an additional IAM user can be created for further separation of permission, roles, and responsibilities.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`This new IAM user should contain:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n              \"href\": \"https://console.aws.amazon.com/iam/home?region=us-east-1#/policies/arn:aws:iam::aws:policy/AmazonS3FullAccess$serviceLevelSummary\"\n            }}><inlineCode parentName=\"a\">{`AmazonS3FullAccess`}</inlineCode>{` policy`}</a>{` attached to it `}<em parentName=\"li\">{`(as it will need both read and write access to S3)`}</em>{`,`}</li>\n          <li parentName=\"ul\">{`An `}<a parentName=\"li\" {...{\n              \"href\": \"https://docs.aws.amazon.com/AmazonS3/latest/dev/walkthrough1.html\"\n            }}>{`S3 Bucket Policy`}</a>{` set on the Bucket to allow the IAM user to perform CRUD actions on the bucket and its objects.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create a file named `}<inlineCode parentName=\"p\">{`aws-credentials.properties`}</inlineCode>{` with the following format:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`aws_access_key_id=AKIA123456EXAMPLE\naws_secret_access_key=strWrz/bb8%c3po/r2d2EXAMPLEKEY\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create a Kubernetes Secret from this file to inject into the Kafka Connect cluster at runtime:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`kubectl create secret generic aws-credentials --from-file=aws-credentials.properties\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><em parentName=\"p\">{`Additional work is underway to enable configuration of the components to make use of IAM Roles instead.`}</em></p>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`IBM Event Streams API Key`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`This scenario is written with `}<a parentName=\"p\" {...{\n            \"href\": \"https://ibm.github.io/event-streams/about/overview/\"\n          }}>{`IBM Event Streams`}</a>{` as the provider of the Kafka endpoints.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`API Keys are required for connectivity to the Kafka brokers and interaction with Kafka topics.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`An API key should be created with (at minimum) read and write access to the source and target Kafka topics the connectors will interact with.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A Kubernetes Secret must be created with the Event Streams API to inject into the Kafka Connect cluster at runtime:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`kubectl create secret generic eventstreams-apikey --from-literal=password=<eventstreams_api_key>\n`}</code></pre>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`IBM Event Streams Certificates on IBM Cloud Pak for Integration`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you are using an IBM Event Streams instance deployed via the IBM Cloud Pak for Integration, you must also download the generated truststore file to provide TLS communication between the connectors and the Kafka brokers.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`This file, along with its password, can be found on the `}<strong parentName=\"p\">{`Connect to this cluster`}</strong>{` dialog in the Event Streams UI.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Once downloaded, it must be configured to work with the Kafka Connect certificate deployment pattern:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`keytool -importkeystore -srckeystore es-cert.jks -destkeystore es-cert.p12 -deststoretype PKCS12\nopenssl pkcs12 -in es-cert.p12 -nokeys -out es-cert.crt\nkubectl create secret generic eventstreams-truststore-cert --from-file=es-cert.crt\n`}</code></pre>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`IBM Event Streams Certificates on IBM Cloud`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you are using an IBM Event Streams instance deployed on IBM Cloud, you need to provide the root CA certificate to connect correctly from the Kafka Connect instance.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`This file can be downloaded as `}<inlineCode parentName=\"p\">{`eventstreams.cloud.ibm.com.cer`}</inlineCode>{` from the endpoint defined in your service credentials via the `}<inlineCode parentName=\"p\">{`kafka_http_url`}</inlineCode>{` property.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Once downloaded, it must be configured to work with the Kafka Connect certificate deployment pattern:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`openssl x509 -inform DER -in eventstreams.cloud.ibm.com.cer -out es-cert.crt\nkubectl create secret generic eventstreams-truststore-cert --from-file=es-cert.crt\n`}</code></pre>\n      </li>\n    </ul>\n    <h2>{`Kafka Connect Cluster`}</h2>\n    <p>{`We will take advantage of some of the developer experience improvements that OpenShift and the Strimi Operator brings to the Kafka Connect framework. The Strimzi Operator provides a `}<inlineCode parentName=\"p\">{`KafkaConnect`}</inlineCode>{` custom resource which will manage a Kafka Connect cluster for us with minimal system interaction. The only work we need to do is to update the container image that the Kafka Connect deployment will use with the necessary Camel Kafka Connector binaries, which OpenShift can help us with through the use of its Build capabilities.`}</p>\n    <h4>{`(Optional) Create ConfigMap for log4j configuration`}</h4>\n    <p>{`Due to the robust nature of Apache Camel, the default logging settings for the Apache Kafka Connect classes will send potentially sensitive information to the logs during Apache Camel context configuration. To avoid this, we can provide an updated logging configuration to the `}<inlineCode parentName=\"p\">{`log4j`}</inlineCode>{` configuration that is used by our deployments.`}</p>\n    <p>{`Save the properties file below and name it `}<inlineCode parentName=\"p\">{`log4j.properties`}</inlineCode>{`. Then create a ConfigMap via `}<inlineCode parentName=\"p\">{`kubectl create configmap custom-connect-log4j --from-file=log4j.properties`}</inlineCode>{`. This ConfigMap will then be used in our KafkaConnect cluster creation to filter out any logging output containing `}<inlineCode parentName=\"p\">{`accesskey`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`secretkey`}</inlineCode>{` permutations.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`# Do not change this generated file. Logging can be configured in the corresponding kubernetes/openshift resource.\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} %p %m (%c) [%t]%n\nconnect.root.logger.level=INFO\nlog4j.rootLogger=\\${connect.root.logger.level}, CONSOLE\nlog4j.logger.org.apache.zookeeper=ERROR\nlog4j.logger.org.I0Itec.zkclient=ERROR\nlog4j.logger.org.reflections=ERROR\n\n# Due to back-leveled version of log4j that is included in Kafka Connect,\n# we can use multiple StringMatchFilters to remove all the permutations\n# of the AWS accessKey and secretKey values that may get dumped to stdout\n# and thus into any connected logging system.\nlog4j.appender.CONSOLE.filter.a=org.apache.log4j.varia.StringMatchFilter\nlog4j.appender.CONSOLE.filter.a.StringToMatch=accesskey\nlog4j.appender.CONSOLE.filter.a.AcceptOnMatch=false\nlog4j.appender.CONSOLE.filter.b=org.apache.log4j.varia.StringMatchFilter\nlog4j.appender.CONSOLE.filter.b.StringToMatch=accessKey\nlog4j.appender.CONSOLE.filter.b.AcceptOnMatch=false\nlog4j.appender.CONSOLE.filter.c=org.apache.log4j.varia.StringMatchFilter\nlog4j.appender.CONSOLE.filter.c.StringToMatch=AccessKey\nlog4j.appender.CONSOLE.filter.c.AcceptOnMatch=false\nlog4j.appender.CONSOLE.filter.d=org.apache.log4j.varia.StringMatchFilter\nlog4j.appender.CONSOLE.filter.d.StringToMatch=ACCESSKEY\nlog4j.appender.CONSOLE.filter.d.AcceptOnMatch=false\n\nlog4j.appender.CONSOLE.filter.e=org.apache.log4j.varia.StringMatchFilter\nlog4j.appender.CONSOLE.filter.e.StringToMatch=secretkey\nlog4j.appender.CONSOLE.filter.e.AcceptOnMatch=false\nlog4j.appender.CONSOLE.filter.f=org.apache.log4j.varia.StringMatchFilter\nlog4j.appender.CONSOLE.filter.f.StringToMatch=secretKey\nlog4j.appender.CONSOLE.filter.f.AcceptOnMatch=false\nlog4j.appender.CONSOLE.filter.g=org.apache.log4j.varia.StringMatchFilter\nlog4j.appender.CONSOLE.filter.g.StringToMatch=SecretKey\nlog4j.appender.CONSOLE.filter.g.AcceptOnMatch=false\nlog4j.appender.CONSOLE.filter.h=org.apache.log4j.varia.StringMatchFilter\nlog4j.appender.CONSOLE.filter.h.StringToMatch=SECRETKEY\nlog4j.appender.CONSOLE.filter.h.AcceptOnMatch=false\n`}</code></pre>\n    <h4>{`Deploy the baseline Kafka Connect Cluster`}</h4>\n    <p>{`Review the YAML description for our `}<inlineCode parentName=\"p\">{`KafkaConnectS2I`}</inlineCode>{` custom resource below, named `}<inlineCode parentName=\"p\">{`connect-cluster-101`}</inlineCode>{`. Pay close attention to `}<em parentName=\"p\">{`(using YAML notation)`}</em>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.logging.name`}</inlineCode>{` should point to the name of the ConfigMap created in the previous step to configure custom `}<inlineCode parentName=\"li\">{`log4j`}</inlineCode>{` logging filters `}<em parentName=\"li\">{`(optional)`}</em></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.bootstrapServers`}</inlineCode>{` should be updated with your local Event Streams endpoints`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.tls.trustedCertificates[0].secretName`}</inlineCode>{` should match the Kubernetes Secret containing the IBM Event Streams certificate`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.authentication.passwordSecret.secretName`}</inlineCode>{` should match the Kubernetes Secret containing the IBM Event Streams API key`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.externalConfiguration.volumes[0].secret.secretName`}</inlineCode>{` should match the Kubernetes Secret containing your AWS credentials`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.config['group.id']`}</inlineCode>{` should be a unique name for this Kafka Connect cluster across all Kafka Connect instances that will be communicating with the same set of Kafka brokers.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.config['*.storage.topic']`}</inlineCode>{` should be updated to provide unique topics for this Kafka Connect cluster inside your Kafka deployment. Distinct Kafka Connect clusters should not share metadata topics.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: kafka.strimzi.io/v1alpha1\nkind: KafkaConnectS2I\nmetadata:\n  name: connect-cluster-101\n  annotations:\n    strimzi.io/use-connector-resources: \"true\"\nspec:\n  #logging:\n  #  type: external\n  #  name: custom-connect-log4j\n  replicas: 1\n  bootstrapServers: es-1-ibm-es-proxy-route-bootstrap-eventstreams.apps.cluster.local:443\n  tls:\n    trustedCertificates:\n      - certificate: es-cert.crt\n        secretName: eventstreams-truststore-cert\n  authentication:\n    passwordSecret:\n      secretName: eventstreams-apikey\n      password: password\n    username: token\n    type: plain\n  externalConfiguration:\n    volumes:\n      - name: aws-credentials\n        secret:\n          secretName: aws-credentials\n  config:\n    group.id: connect-cluster-101\n    config.providers: file\n    config.providers.file.class: org.apache.kafka.common.config.provider.FileConfigProvider\n    key.converter: org.apache.kafka.connect.json.JsonConverter\n    value.converter: org.apache.kafka.connect.json.JsonConverter\n    key.converter.schemas.enable: false\n    value.converter.schemas.enable: false\n    offset.storage.topic: connect-cluster-101-offsets\n    config.storage.topic: connect-cluster-101-configs\n    status.storage.topic: connect-cluster-101-status\n`}</code></pre>\n    <p>{`Save the YAML above into a file named `}<inlineCode parentName=\"p\">{`kafka-connect.yaml`}</inlineCode>{`. If you created the ConfigMap in the previous step to filter out `}<inlineCode parentName=\"p\">{`accesskey`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`secretkey`}</inlineCode>{` values from the logs, uncomment the `}<inlineCode parentName=\"p\">{`spec.logging`}</inlineCode>{` lines to allow for the custom logging filters to be enabled during Kafka Connect cluster creation. Then this resource can be created via `}<inlineCode parentName=\"p\">{`kubectl apply -f kafka-connect.yaml`}</inlineCode>{`. You can then tail the output of the `}<inlineCode parentName=\"p\">{`connect-cluster-101`}</inlineCode>{` pods for updates on the connector status.`}</p>\n    <h4>{`Build the Camel Kafka Connector`}</h4>\n    <p>{`The next step is to build the Camel Kafka Connector binaries so that they can be loaded into the just-deployed Kafka Connect cluster’s container images.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Clone the repository `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/osowski/camel-kafka-connector\"\n        }}>{`https://github.com/osowski/camel-kafka-connector`}</a>{` to your local machine:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`git clone https://github.com/osowski/camel-kafka-connector.git`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Check out the `}<inlineCode parentName=\"li\">{`camel-kafka-connector-0.1.0-branch`}</inlineCode>{`:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`git checkout camel-kafka-connector-0.1.0-branch`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`From the root directory of the repository, build the project components:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mvn clean package`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Go get a coffee and take a walk… as this build will take around 30 minutes on a normal developer workstation.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`To reduce the overall build scope of the project, you can comment out the undesired modules from the `}<inlineCode parentName=\"li\">{`<modules>`}</inlineCode>{` element of the `}<inlineCode parentName=\"li\">{`connectors/pom.xml`}</inlineCode>{` using `}<inlineCode parentName=\"li\">{`<!-- -->`}</inlineCode>{` notation.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Copy the generated S3 artifacts to the core package build artifacts:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cp connectors/camel-aws-s3-kafka-connector/target/camel-aws-s3-kafka-connector-0.1.0.jar core/target/camel-kafka-connector-0.1.0-package/share/java/camel-kafka-connector/`}</inlineCode></li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`Some items to note:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The repository used here (`}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/osowski/camel-kafka-connector\"\n        }}>{`https://github.com/osowski/camel-kafka-connector`}</a>{`) is a fork of the official repository (`}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/apache/camel-kafka-connector\"\n        }}>{`https://github.com/apache/camel-kafka-connector`}</a>{`) with a minor update applied to allow for dynamic endpoints to be specified via configuration, which is critical for our `}<a parentName=\"li\" {...{\n          \"href\": \"#kafka-to-s3-sink-connector\"\n        }}>{`Kafka to S3 Sink Connector`}</a>{` scenario.`}</li>\n      <li parentName=\"ul\">{`This step (and the next step) will eventually be eliminated by providing an existing container image with the necessary Camel Kafka Connector binaries as part of a build system.`}</li>\n    </ul>\n    <h4>{`Deploy the Camel Kafka Connector binaries`}</h4>\n    <p>{`Now that the Camel Kafka Connector binaries have been built, we need to include them on the classpath inside of the container image which our Kafka Connect clusters are using.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`From the root directory of the repository, start a new OpenShift Build, using the generated build artifacts:`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`oc start-build connect-cluster-101-connect --from-dir=./core/target/camel-kafka-connector-0.1.0-package/share/java --follow\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">{`Watch the Kubernetes pods as they are updated with the new build and rollout of the Kafka Connect Cluster using the updated container image `}<em parentName=\"li\">{`(which now includes the Camel Kafka Connector binaries)`}</em>{`:`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`kubectl get pods -w\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">{`Once the `}<inlineCode parentName=\"li\">{`connect-cluster-101-connect-2-[random-suffix]`}</inlineCode>{` pod is in a `}<inlineCode parentName=\"li\">{`Running`}</inlineCode>{` state, you can proceed.`}</li>\n    </ol>\n    <h2>{`Kafka to S3 Sink Connector`}</h2>\n    <p>{`Now that you have a Kafka Connect cluster up and running, you will need to configure a connector to actually begin the transmission of data from one system to the other. This will be done by taking advantage of Strimzi and using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://strimzi.io/docs/0.17.0/#kafkaconnector_resources\"\n      }}><inlineCode parentName=\"a\">{`KafkaConnector`}</inlineCode>{` custom resource`}</a>{` the Strimzi Operator manages for us.`}</p>\n    <p>{`Review the YAML description for our `}<inlineCode parentName=\"p\">{`KafkaConnector`}</inlineCode>{` custom resource below, named `}<inlineCode parentName=\"p\">{`s3-sink-connector`}</inlineCode>{`. Pay close attention to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`strimzi.io/cluster`}</inlineCode>{` label must match the deployed Kafka Connect cluster you previously deployed `}<em parentName=\"li\">{`(or else Strimzi will not connect the `}<inlineCode parentName=\"em\">{`KafkaConnector`}</inlineCode>{` to your `}<inlineCode parentName=\"em\">{`KafkaConnect`}</inlineCode>{` cluster)`}</em></li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`topics`}</inlineCode>{` parameter `}<em parentName=\"li\">{`(named `}<inlineCode parentName=\"em\">{`my-source-topic`}</inlineCode>{` here)`}</em></li>\n      <li parentName=\"ul\">{`The S3 Bucket parameter of the `}<inlineCode parentName=\"li\">{`camel.sink.url`}</inlineCode>{` configuration option `}<em parentName=\"li\">{`(named `}<inlineCode parentName=\"em\">{`my-s3-bucket`}</inlineCode>{` here)`}</em></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: kafka.strimzi.io/v1alpha1\nkind: KafkaConnector\nmetadata:\n  name: s3-sink-connector\n  labels:\n    strimzi.io/cluster: connect-cluster-101\nspec:\n  class: org.apache.camel.kafkaconnector.CamelSinkConnector\n  tasksMax: 1\n  config:\n    key.converter: org.apache.kafka.connect.storage.StringConverter\n    value.converter: org.apache.kafka.connect.storage.StringConverter\n    topics: my-source-topic\n    camel.sink.url: aws-s3://my-s3-bucket?keyName=\\${date:now:yyyyMMdd-HHmmssSSS}-\\${exchangeId}\n    camel.sink.maxPollDuration: 10000\n    camel.component.aws-s3.configuration.autocloseBody: false\n    camel.component.aws-s3.accessKey: \\${file:/opt/kafka/external-configuration/aws-credentials/aws-credentials.properties:aws_access_key_id}\n    camel.component.aws-s3.secretKey: \\${file:/opt/kafka/external-configuration/aws-credentials/aws-credentials.properties:aws_secret_access_key}\n    camel.component.aws-s3.region: US_EAST_1\n`}</code></pre>\n    <p>{`Once you have updated the YAML and saved it in a file named `}<inlineCode parentName=\"p\">{`kafka-sink-connector.yaml`}</inlineCode>{`, this resource can be created via `}<inlineCode parentName=\"p\">{`kubectl apply -f kafka-sink-connector.yaml`}</inlineCode>{`. You can then tail the output of the `}<inlineCode parentName=\"p\">{`connect-cluster-101`}</inlineCode>{` pods for updates on the connector status.`}</p>\n    <p><strong parentName=\"p\">{`NOTE:`}</strong>{` If you require objects in S3 to reside in a sub-folder of the bucket root, you can place a folder name prefix in the `}<inlineCode parentName=\"p\">{`keyName`}</inlineCode>{` query parameter of the `}<inlineCode parentName=\"p\">{`camel.sink.url`}</inlineCode>{` configuration option above. For example, `}<inlineCode parentName=\"p\">{`camel.sink.url: aws-s3://my-s3-bucket?keyName=myfoldername/\\${date:now:yyyyMMdd-HHmmssSSS}-\\${exchangeId}`}</inlineCode>{`.`}</p>\n    <h2>{`S3 to Kafka Source Connector`}</h2>\n    <p>{`Similar to the `}<a parentName=\"p\" {...{\n        \"href\": \"#kafka-to-s3-sink-connector\"\n      }}>{`Kafka to S3 Sink Connector`}</a>{` scenario, this scenario will make use of the Strimzi `}<a parentName=\"p\" {...{\n        \"href\": \"https://strimzi.io/docs/0.17.0/#kafkaconnector_resources\"\n      }}><inlineCode parentName=\"a\">{`KafkaConnector`}</inlineCode>{` custom resource`}</a>{` to configure the specific connector instance.`}</p>\n    <p>{`Review the YAML description for our `}<inlineCode parentName=\"p\">{`KafkaConnector`}</inlineCode>{` custom resource below, named `}<inlineCode parentName=\"p\">{`s3-source-connector`}</inlineCode>{`. Pay close attention to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`strimzi.io/cluster`}</inlineCode>{` label must match the deployed Kafka Connect cluster you previously deployed `}<em parentName=\"li\">{`(or else Strimzi will not connect the `}<inlineCode parentName=\"em\">{`KafkaConnector`}</inlineCode>{` to your `}<inlineCode parentName=\"em\">{`KafkaConnect`}</inlineCode>{` cluster)`}</em></li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`topics`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`camel.source.kafka.topic`}</inlineCode>{` parameters `}<em parentName=\"li\">{`(named `}<inlineCode parentName=\"em\">{`my-target-topic`}</inlineCode>{` here)`}</em></li>\n      <li parentName=\"ul\">{`The S3 Bucket parameter of the `}<inlineCode parentName=\"li\">{`camel.sink.url`}</inlineCode>{` configuration option `}<em parentName=\"li\">{`(named `}<inlineCode parentName=\"em\">{`my-s3-bucket`}</inlineCode>{` here)`}</em></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Please note`}</strong>{` that it is an explicit intention that the topics used in the `}<a parentName=\"p\" {...{\n        \"href\": \"#kafka-to-s3-sink-connector\"\n      }}>{`Kafka to S3 Sink Connector`}</a>{` configuration and the `}<a parentName=\"p\" {...{\n        \"href\": \"#s3-to-kafka-source-connector\"\n      }}>{`S3 to Kafka Source Connector`}</a>{` configuration are different. If these configurations were to use the `}<strong parentName=\"p\">{`same Kafka topic`}</strong>{` and the `}<strong parentName=\"p\">{`same S3 Bucket`}</strong>{`, we would create an infinite processing loop of the same information being endlessly recycled through the system. In our example deployments here, we are deploying to different topics but the same S3 Bucket.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: kafka.strimzi.io/v1alpha1\nkind: KafkaConnector\nmetadata:\n  name: s3-source-connector\n  labels:\n    strimzi.io/cluster: connect-cluster-101\nspec:\n  class: org.apache.camel.kafkaconnector.CamelSourceConnector\n  tasksMax: 1\n  config:\n    key.converter: org.apache.kafka.connect.storage.StringConverter\n    value.converter: org.apache.camel.kafkaconnector.awss3.converters.S3ObjectConverter\n    topics: my-target-topic\n    camel.source.kafka.topic: my-target-topic\n    camel.source.url: aws-s3://my-s3-bucket?autocloseBody=false\n    camel.source.maxPollDuration: 10000\n    camel.component.aws-s3.accessKey: \\${file:/opt/kafka/external-configuration/aws-credentials/aws-credentials.properties:aws_access_key_id}\n    camel.component.aws-s3.secretKey: \\${file:/opt/kafka/external-configuration/aws-credentials/aws-credentials.properties:aws_secret_access_key}\n    camel.component.aws-s3.region: US_EAST_1\n`}</code></pre>\n    <p>{`Once you have updated the YAML and saved it in a file named `}<inlineCode parentName=\"p\">{`kafka-source-connector.yaml`}</inlineCode>{`, this resource can be created via `}<inlineCode parentName=\"p\">{`kubectl apply -f kafka-source-connector.yaml`}</inlineCode>{`. You can then tail the output of the `}<inlineCode parentName=\"p\">{`connect-cluster-101`}</inlineCode>{` pods for updates on the connector status.`}</p>\n    <p><strong parentName=\"p\">{`NOTE:`}</strong>{` If you require the connector to only read objects from a subdirecotry of the S3 bucket root, you can set the `}<inlineCode parentName=\"p\">{`camel.component.aws-s3.configuration.prefix`}</inlineCode>{` configuration option with the value of the subdirectory name. For example, `}<inlineCode parentName=\"p\">{`camel.component.aws-s3.configuration.prefix: myfoldername`}</inlineCode>{` .`}</p>\n    <h2>{`Event Streams v10 Addendum`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The steps up to now assumed usage of an OpenShift Container Platform v4.3.x cluster, IBM Cloud Pak for Integration v2020.1.1 and IBM Event Streams v2019.4.2`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`With the release of Event Streams v10 (which is built on top of the Strimzi Kafka Operator) and the new CP4I there are some things need that need to be adjusted in the yamls to reflect that.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`You can edit the previous `}<inlineCode parentName=\"p\">{`kafka-connect.yaml`}</inlineCode>{` or create a new file.\n`}<strong parentName=\"p\">{`kafka-connect-esv10.yaml`}</strong></p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: eventstreams.ibm.com/v1beta1\nkind: KafkaConnectS2I\nmetadata:\n  name: connect-cluster-101\n  annotations:\n    eventstreams.ibm.com/use-connector-resources: \"true\"\nspec:\n  #logging:\n  #  type: external\n  #  name: custom-connect-log4j\n  version: 2.5.0\n  replicas: 1\n  bootstrapServers: {internal-bootstrap-server-address}\n  template:\n    pod:\n      imagePullSecrets: []\n      metadata:\n        annotations:\n          eventstreams.production.type: CloudPakForIntegrationNonProduction\n          productID: {product-id}\n          productName: IBM Event Streams for Non Production\n          productVersion: 10.0.0\n          productMetric: VIRTUAL_PROCESSOR_CORE\n          productChargedContainers: {connect-cluster-101}-connect\n          cloudpakId: {cloudpak-id}\n          cloudpakName: IBM Cloud Pak for Integration\n          cloudpakVersion: 2020.2.1\n          productCloudpakRatio: \"2:1\"\n  tls:\n      trustedCertificates:\n        - secretName: {your-es-instance-name}-cluster-ca-cert\n          certificate: ca.crt\n  authentication:\n    type: tls\n    certificateAndKey:\n      certificate: user.crt\n      key: user.key\n      secretName: {generated-secret-from-ui}\n  externalConfiguration:\n    volumes:\n      - name: aws-credentials\n        secret:\n          secretName: aws-credentials\n  config:\n    group.id: connect-cluster-101\n    config.providers: file\n    config.providers.file.class: org.apache.kafka.common.config.provider.FileConfigProvider\n    key.converter: org.apache.kafka.connect.json.JsonConverter\n    value.converter: org.apache.kafka.connect.json.JsonConverter\n    key.converter.schemas.enable: false\n    value.converter.schemas.enable: false\n    offset.storage.topic: connect-cluster-101-offsets\n    config.storage.topic: connect-cluster-101-configs\n    status.storage.topic: connect-cluster-101-status\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`There are a couple changes of note here.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`apiVersion: eventstreams.ibm.com/v1beta1`}</inlineCode>{` instead of the previous Strimzi one.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`metadata.annotations.eventstreams.ibm.com/use-connector-resources: \"true\"`}</inlineCode>{` instead of the previous Strimzi one as well.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.bootstrapservers:`}</inlineCode>{` Previously in Event Streams v2019.4.2 and prior there was only a single external facing route for this bootstrap server address. In Event Streams v10 there is an `}<inlineCode parentName=\"li\">{`External`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Internal`}</inlineCode>{` one now. Replace `}<inlineCode parentName=\"li\">{`{internal-bootstrap-server-address}`}</inlineCode>{` with the `}<inlineCode parentName=\"li\">{`Internal`}</inlineCode>{` bootstrap server address from the Event Streams v10 UI.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.template.pod.metadata.annotations.*`}</inlineCode>{` This entire section is new and represents new metadata that the Event Streams instance needs.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.template.pod.metadata.annotations.productID`}</inlineCode>{` You can find this value when trying to deploy an Event Streams Custom Resource from the Installed Event Streams Operator YAML deployment or when applying this YAML through the command-line, OCP will provide you the proper values if they’re wrong.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.template.pod.metadata.annotations.cloudpakId`}</inlineCode>{` Same as productID.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.tls.trustedCertificates`}</inlineCode>{` This is different from the previous one in that this certificate was automatically generated on creation of your Event Streams Kafka Cluster. If your Event Streams instance is named `}<inlineCode parentName=\"li\">{`eventstreams-dev`}</inlineCode>{` then this value should be `}<inlineCode parentName=\"li\">{`eventstreams-dev-cluster-ca-cert`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`spec.authentication.*`}</inlineCode>{` This section is mostly different from the previous section. Prior we used a generated API Key, but on Event Streams v10 we will need to generate TLS credentials. In the `}<inlineCode parentName=\"li\">{`Internal`}</inlineCode>{` connection details there will be a `}<inlineCode parentName=\"li\">{`Generate TLS Credentials`}</inlineCode>{` button. Here you can name your secret and provide the proper access to it. `}<strong parentName=\"li\">{`Note 1`}</strong>{` - This is automatically created by the Event Streams Operator into the same namespace as both a `}<inlineCode parentName=\"li\">{`KafkaUser`}</inlineCode>{` Custom Resource as well as a secret. If your secret is named `}<inlineCode parentName=\"li\">{`internal-secret`}</inlineCode>{` then there will be an automatically generated Kubernetes/OpenShift secret named that as well as a `}<inlineCode parentName=\"li\">{`KafkaUser`}</inlineCode>{`. `}<inlineCode parentName=\"li\">{`user.crt`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`user.key`}</inlineCode>{` are certificates automatically generated within said secret. `}<strong parentName=\"li\">{`Note 2`}</strong>{` - Deletion of that secret will replicate itself. You will need to delete the associated and created `}<inlineCode parentName=\"li\">{`KafkaUser`}</inlineCode>{`.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`kafka-sink-connector.yaml-esv10.yaml`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: eventstreams.ibm.com/v1alpha1\nkind: KafkaConnector\nmetadata:\n  name: s3-sink-connector\n  labels:\n    eventstreams.ibm.com/cluster: connect-cluster-101\nspec:\n  class: org.apache.camel.kafkaconnector.CamelSinkConnector\n  tasksMax: 1\n  config:\n    key.converter: org.apache.kafka.connect.storage.StringConverter\n    value.converter: org.apache.kafka.connect.storage.StringConverter\n    topics: my-topic\n    camel.sink.url: aws-s3://my-s3-bucket?keyName=\\${date:now:yyyyMMdd-HHmmssSSS}-\\${exchangeId}\n    camel.sink.maxPollDuration: 10000\n    camel.component.aws-s3.configuration.autocloseBody: false\n    camel.component.aws-s3.accessKey: \\${file:/opt/kafka/external-configuration/aws-credentials/aws-credentials.properties:aws_access_key_id}\n    camel.component.aws-s3.secretKey: \\${file:/opt/kafka/external-configuration/aws-credentials/aws-credentials.properties:aws_secret_access_key}\n    camel.component.aws-s3.region: my-s3-bucket-region\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`For the most part identical besides two minor changes.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`apiVersion: eventstreams.ibm.com/v1alpha1`}</inlineCode>{` instead of Strimzi.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`metadata.labels.eventstreams.ibm.com/cluster: connect-cluster-101`}</inlineCode>{` again instead of Strimzi.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`kafka-source-connector.yaml-esv10.yaml`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: eventstreams.ibm.com/v1alpha1\nkind: KafkaConnector\nmetadata:\n  name: s3-source-connector\n  labels:\n    eventstreams.ibm.com/cluster: connect-cluster-101\nspec:\n  class: org.apache.camel.kafkaconnector.CamelSourceConnector\n  tasksMax: 1\n  config:\n    key.converter: org.apache.kafka.connect.storage.StringConverter\n    value.converter: org.apache.camel.kafkaconnector.awss3.converters.S3ObjectConverter\n    topics: my-topic\n    camel.source.kafka.topic: my-topic\n    camel.source.url: aws-s3://my-s3-bucket?autocloseBody=false\n    camel.source.maxPollDuration: 10000\n    camel.component.aws-s3.accessKey: \\${file:/opt/kafka/external-configuration/aws-credentials/aws-credentials.properties:aws_access_key_id}\n    camel.component.aws-s3.secretKey: \\${file:/opt/kafka/external-configuration/aws-credentials/aws-credentials.properties:aws_secret_access_key}\n    camel.component.aws-s3.region: my-s3-bucket-region\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Similar to the S3 sink connector yaml.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`apiVersion: eventstreams.ibm.com/v1alpha1`}</inlineCode>{` instead of Strimzi.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`metadata.labels.eventstreams.ibm.com/cluster: connect-cluster-101`}</inlineCode>{` again instead of Strimzi.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Troubleshooting`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The log output from the Kafka Connector instances will be available in the KafkaConnectS2I pods, named in the pattern of `}<inlineCode parentName=\"li\">{`{connect-cluster-name}-connect-{latest-build-id}-{random-suffix}`}</inlineCode>{`. This pattern will be referred to as `}<inlineCode parentName=\"li\">{`{connect-pod}`}</inlineCode>{` throughout the rest of the `}<strong parentName=\"li\">{`Troubleshooting`}</strong>{` section.`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`To increase the logging output of the deployed connector instances:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Follow the steps for `}<strong parentName=\"li\">{`“Create ConfigMap for log4j configuration”`}</strong>{` in `}<a parentName=\"li\" {...{\n              \"href\": \"#kafka-connect-cluster\"\n            }}>{`Kafka Connect Cluster`}</a>{` above`}</li>\n          <li parentName=\"ul\">{`Update the `}<inlineCode parentName=\"li\">{`log4j.properties`}</inlineCode>{` ConfigMap to include the line `}<inlineCode parentName=\"li\">{`log4j.logger.org.apache.camel.kafkaconnector=DEBUG`}</inlineCode></li>\n          <li parentName=\"ul\">{`Reapply the YAML configuration of the KafkaConnectS2I cluster`}</li>\n        </ul>\n      </li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`To check the deployment status of applied Kafka Connect configuration via Kafka Connect’s REST API, run the following commands:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`oc exec {connect-pod} bash -- -c \"curl --silent http://localhost:8083/connectors/\"`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`oc exec {connect-pod} bash -- -c \"curl --silent http://localhost:8083/connectors/{deployed-connector-name}/status\"`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Next steps`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Enable use  of IAM Credentials in the Connector configuration `}<em parentName=\"li\">{`(as the default Java code currently outputs `}<inlineCode parentName=\"em\">{`aws_access_key_id`}</inlineCode>{` and `}<inlineCode parentName=\"em\">{`aws_secret_access_key`}</inlineCode>{` to container runtime logs due to their existence as configuration properties)`}</em></li>\n      <li parentName=\"ul\">{`Optionally configure individual connector instances to startup with offset value of -1 `}<em parentName=\"li\">{`(to enable to run from beginning of available messages)`}</em></li>\n      <li parentName=\"ul\">{`Implement a build system to produce container images with the Camel Kafka Connector binaries already present`}</li>\n    </ul>\n    <h2>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://camel.apache.org/camel-kafka-connector/latest/try-it-out-on-openshift-with-strimzi.html\"\n        }}>{`Apache Camel Kafka Connector - Try it out on OpenShift with Strimzi`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://camel.apache.org/components/latest/languages/simple-language.html\"\n        }}>{`Apache Camel - Available pattern elements`}</a>{` for use in the `}<inlineCode parentName=\"li\">{`keyName`}</inlineCode>{` parameter of the `}<inlineCode parentName=\"li\">{`camel.sink.url`}</inlineCode>{` property.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://camel.apache.org/components/latest/eips/toD-eip.html\"\n        }}>{`Apache Camel - Dynamic Endpoint reference`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developers.redhat.com/blog/2020/02/14/using-secrets-in-apache-kafka-connect-configuration/\"\n        }}>{`Red Hat Developer Blog - Using secrets in Kafka Connect configuration`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://kafka.apache.org/documentation/#connect\"\n        }}>{`Apache Kafka - Connect Overview`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"last-modified-date-module--bx--text-truncate--end--123zi\",\"bxTextTruncateFront\":\"last-modified-date-module--bx--text-truncate--front--3xeKz\",\"text\":\"last-modified-date-module--text--24m-4\",\"row\":\"last-modified-date-module--row--2BquN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};"],"sourceRoot":""}