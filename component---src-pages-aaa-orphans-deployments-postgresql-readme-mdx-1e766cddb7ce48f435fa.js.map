{"version":3,"sources":["webpack:///./src/pages/aaa_ORPHANS/deployments/postgresql/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sDACA,wCACA,sBACE,kBAAIC,WAAW,MAAf,wDACA,kBAAIA,WAAW,MAAf,sDAA2E,mBAAGA,WAAW,MAAS,CAC9F,KAAQ,+BAD+D,8BAA3E,2LAGA,kBAAIA,WAAW,MAAf,gGACA,kBAAIA,WAAW,MAAf,gGACA,kBAAIA,WAAW,MAAf,yCAEF,+BACA,sBACE,kBAAIA,WAAW,MAAf,2BAEF,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,8GAEL,oGAAmF,mBAAGA,WAAW,KAAQ,CACrG,KAAQ,wCADuE,uCAAnF,0JAGA,sBACE,kBAAIA,WAAW,MAAf,4BAAiD,0BAAYA,WAAW,MAAvB,gBAAjD,wCAEF,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,uKAGL,sBACE,kBAAIA,WAAW,MAAf,iJAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iRAgBL,2DACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,uEAKL,sBACE,kBAAIA,WAAW,MAAf,gIAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qQAcL,yCAAwB,0BAAYA,WAAW,KAAvB,wBAAxB,kBACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,wIAIL,sBACE,kBAAIA,WAAW,MAAf,wDAEF,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,2RAGL,sBACE,kBAAIA,WAAW,MAAf,sEAEF,uEAAsD,0BAAYA,WAAW,KAAvB,2EAAtD,kCAA4M,0BAAYA,WAAW,KAAvB,QAA5M,iDACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,wzBAcL,uDAAsC,0BAAYA,WAAW,KAAvB,QAAtC,aAAoG,mBAAGA,WAAW,KAAQ,CACtH,KAAQ,iDADwF,eAGpG,yCACA,8BACE,iBAAGA,WAAW,cAAd,qPAEF,gHACA,8BACE,iBAAGA,WAAW,cAAd,yPAEF,6EACA,uCACA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0FADQ,sCAApB,2EAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iEADQ,uDAApB,kBAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4EADQ,mCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oGADQ,sFAQ1BJ,EAAWK,gBAAiB","file":"component---src-pages-aaa-orphans-deployments-postgresql-readme-mdx-1e766cddb7ce48f435fa.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Update 05/10/2019 - ICP 3.2.1`}</p>\n    <h2>{`Pre-requisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Access to an ICP cluster with an up to date catalog `}</li>\n      <li parentName=\"ul\">{`Once logged to the admin consoler (something like: `}<a parentName=\"li\" {...{\n          \"href\": \"https://172.16.254.80:8443\"\n        }}>{`https://172.16.254.80:8443`}</a>{`) go to the Command Line Tools menu and download the IBM Cloud Private CLI. Rename the downloaded file to cloudctl and move it to a folder in your $PATH (e.g. /usr/local/bin/cloudctl)`}</li>\n      <li parentName=\"ul\">{`Download the kubeclt CLI that match ICP version. Rename and move the tool to /usr/local/bin/`}</li>\n      <li parentName=\"ul\">{`Download the kubeclt CLI that match ICP version. Rename and move the tool to /usr/local/bin/`}</li>\n      <li parentName=\"ul\">{`Get psql to access the postgresql.  `}</li>\n    </ul>\n    <h2>{`Steps`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Login to the cluster: `}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`cloudctl login -a https://172.16.254.80:8443 -u admin -p <passwordyoushouldknow>  --skip-ssl-validation\n`}</code></pre>\n    <p>{`When selecting the postgresql tile in the database category of the catalog (`}<a parentName=\"p\" {...{\n        \"href\": \"https://172.16.254.80:8443/catalog/\"\n      }}>{`https://172.16.254.80:8443/catalog/`}</a>{`) the Overview gives some steps to follow, but those are from the product documentation and they may need some update. Below are the specifics we did:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`For the namespace we use `}<inlineCode parentName=\"li\">{`greencompute`}</inlineCode>{`, so the secret was something like:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`$ kubectl create secret generic postgresql-pwd-secret --from-literal='postgresql-password=<>' --namespace greencompute\nsecret \"postgresql-pwd-secret\" created\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Create a persistence volume. You can use HostPath for development purpose, or if you have a NFS or ceph cluster available adapt the CRD file`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1,\nkind: PersistentVolume,\nmetadata:\n    name: posgresql-pv,\nspec:\n    capacity:\n      storage: 10Gi\n    hostPath:\n      path: /bitnami/postgresql,\n      type: \"\"\n    accessModes:\n      ReadWriteOnce\n    persistentVolumeReclaimPolicy: Retain\n`}</code></pre>\n    <p>{`For NFS use the following changes:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` spec:\n    nfs:\n      server:\n      path: /bitnami/postgresql\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`As we deploy postgres in a namespace scope, we need to specify an image policy to authorize access to docker.io repository:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: securityenforcement.admission.cloud.ibm.com/v1beta1\nkind: ImagePolicy\nnamespace: greencompute\nmetadata:\n  name: postgresql-image-policy\nspec:\n  repositories:\n    - name: docker.io/*\n      policy:\n        va:\n          enabled: false\n`}</code></pre>\n    <p>{`save the file as `}<inlineCode parentName=\"p\">{`securitypolicies.yml`}</inlineCode>{` and then run:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ kubectl apply -f securitypolicies.yml -n greencompute\n$ kubectl describe ImagePolicy postgresql-image-policy -n greencompute\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Use helm to install the release. Here is an example`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`$ export PSWD=$(k get secret postgresql-pwd-secret -n greencompute -o jsonpath=\"{.data.postgresql-password}\"  | base64 --decode; echo)\n$ helm install stable/postgresql --name postgresql --namespace greencompute --set postgresqlPassword=$PSWD,postgresqlDatabase=postgres --tls\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Access to the database with psql running locally on your computer`}</li>\n    </ul>\n    <p>{`In one terminal start a port forwarding using: `}<inlineCode parentName=\"p\">{`kubectl port-forward  postgresql-postgresql-0 5432:5432 &>> /dev/null &`}</inlineCode>{`. Now we can connect our local `}<inlineCode parentName=\"p\">{`psql`}</inlineCode>{` CLI to the remote server via a command like:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ psql \"dbname=postgres host=127.0.0.1 user=postgres port=5432 password=$PSWD\"\n\npostgres=# \\\\d containers\n id           | character varying(255)      |           | not null | \n brand        | character varying(255)      |           |          | \n capacity     | integer                     |           | not null | \n created_at   | timestamp without time zone |           | not null | \n current_city | character varying(255)      |           |          | \n latitude     | double precision            |           | not null | \n longitude    | double precision            |           | not null | \n status       | integer                     |           |          | \n type         | character varying(255)      |           |          | \n updated_at   | timestamp without time zone |           | not null | \n`}</code></pre>\n    <p>{`For more information about the `}<inlineCode parentName=\"p\">{`psql`}</inlineCode>{` tool see `}<a parentName=\"p\" {...{\n        \"href\": \"http://postgresguide.com/utilities/psql.html\"\n      }}>{`this note.`}</a></p>\n    <h2>{`Troubleshooting`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{` admission webhook “trust.hooks.securityenforcement.admission.cloud.ibm.com” denied the request: Deny “docker.io/bitnami/postgresql:10.7.0”, no matching repositories in ClusterImagePolicy and no ImagePolicies in the “greencompute” namespace`}</p>\n    </blockquote>\n    <p>{` Be sure to use a ImagePolicy and not a cluster policy when using namespace deployment.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Error: release postgresql failed: Internal error occurred: admission webhook “trust.hooks.securityenforcement.admission.cloud.ibm.com” denied the request: Deny “docker.io/bitnami/postgresql:10.7.0”, no matching repositories in the ImagePolicies`}</p>\n    </blockquote>\n    <p>{`Be sure to authorize docker.io/* in the ImagePolicy.`}</p>\n    <h2>{`More Readings`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.ibm.com/recipes/tutorials/deploy-postgresql-into-ibm-cloud-private/\"\n        }}>{`ICP 2.1 Postgresql install recipe:`}</a>{` older recipeusing the configuration user interface in the ICP console.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/helm/charts/tree/master/stable/postgresql\"\n        }}>{`postgresql helm chart explanation and configuration`}</a>{`: a must read.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/@nicdoye/installing-postgresql-via-helm-237e026453b1\"\n        }}>{`Installing postgresql via Helm`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/tree/master/SpringContainerMS\"\n        }}>{`Reefer container management microservice using Springboot, kafka and postgresql`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}