{"version":3,"sources":["webpack:///./src/pages/technology/event-streams/kconnect.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","kind","isMDXComponent"],"mappings":"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","file":"component---src-pages-technology-event-streams-kconnect-mdx-1b48a06d157a2d860f70.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Overview</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Solution anatomy</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">General pre-requisites</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Scenario setup</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Scenario 1: Event Streams on Cloud to MQ on premise via MQ connector sink</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Scenario 2: Deploying Kafka Connector MQ Sink to OpenShift</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Scenario 3: Rabbitmq on premise to Event Streams on Cloud via RabbitMQ connector source</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Scenario 4: Event Streams on Cloud to DB2 on premise via JDBC Sink connector</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Scenario 5: Run the solution components end to end on Kubernetes</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Overview`}</h2>\n    <p>{`This lab will address multiple scenarios that aim to build an end to end data pipeline, as depicted by the following figure, using Event Streams on Cloud. At the high level Kafka connect is used to integrate external systems into the Kafka ecosystem. For example external system can inject message to queue manager, from which a first Kafka source connector will get the message to a Kafka topic, which then will be processed by a series of event driven microservices down to a final topic, that will be use by Sink connectors.`}</p>\n    <img {...{\n      \"src\": \"./images/kconnect-overview.png\",\n      \"alt\": \"1\"\n    }}></img>\n    <p>{`To support this lab we are reusing a classical business use case where stores are sending their transactions to a central messaging platform, based on queues, and with the adoption of loosely coupled microservice, real time analytics and complex event processing, Kafka is added to the legacy environment. Adopting Kafka connect lets integrate with existing applications without any changes.`}</p>\n    <h2>{`Solution anatomy`}</h2>\n    <p>{`The lab is divided into scenarios that can be combined to support the real time inventory data pipeline as illustrated in the figure below:`}</p>\n    <img {...{\n      \"src\": \"./images/kconnect-scenario-components.png\",\n      \"alt\": \"2\"\n    }}></img>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The store application, is a Quarkus based app, generating item sales to RabbitMQ `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` queue. The code of this application is under the `}<inlineCode parentName=\"p\">{`store-sale-producer`}</inlineCode>{` folder, in the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/jbcodeforce/eda-kconnect-lab/\"\n          }}>{`lab repository`}</a>{`. We will address how to get this code in the pre-requisite section.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`RabbitMQ runs in docker image started locally via docker compose. The messages are in the `}<inlineCode parentName=\"li\">{`items`}</inlineCode>{` queue.`}</li>\n          <li parentName=\"ul\">{`The lab, focusing on the injection to Kafka, is documented in the `}<a parentName=\"li\" {...{\n              \"href\": \"#scenario-2:-rabbitmq-on-premise-to-event-streams-on-cloud-via-rabbitmq-connector-source\"\n            }}>{`scenario 2`}</a>{`.`}</li>\n          <li parentName=\"ul\">{`[A]`}{` The Sink connector description is in the `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/jbcodeforce/eda-kconnect-lab/tree/master/kconnect\"\n            }}>{`kconnect`}</a>{` folder.`}</li>\n          <li parentName=\"ul\">{`Kafka backbone is Event Streams on Cloud.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The inventory MS is a Kafka Stream application, done with Reactive Messaging and Kafka Stream API. The folder is\nFor example the scenario illustrate JDBC Sink connector to save to existing data base.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The mock up Inventory mainframe application is not implemented and we will use the MQ tools to view the message in the `}<inlineCode parentName=\"p\">{`inventory`}</inlineCode>{` queue`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The MQ Sink connector `}{`[B]`}{` configuration is defined in the `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/jbcodeforce/eda-kconnect-lab/tree/master/kconnect\"\n            }}>{`kconnect`}</a>{` folder.`}</li>\n          <li parentName=\"ul\">{`MQ broker runs in docker container started with docker-compose`}</li>\n          <li parentName=\"ul\">{`The lab scenario is `}<a parentName=\"li\" {...{\n              \"href\": \"#scenario-1:-event-streams-on-cloud-to-mq-on-premise-via-mq-connector-sink\"\n            }}>{`the number 1`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The Inventory Application, using DB2 as datasource is a quarkus app using hibernate with panache, defined in the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/jbcodeforce/eda-kconnect-lab/tree/master/inventory-app\"\n          }}>{`nventory-app`}</a>{` folder`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The JDBC Sink connector `}{`[C]`}{` configuration is defined in the `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/jbcodeforce/eda-kconnect-lab/tree/master/kconnect\"\n            }}>{`kconnect`}</a>{` folder.`}</li>\n          <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n              \"href\": \"#scenario-3:-event-streams-on-cloud-to-db2-on-premise-via-jdbc-sink-connector\"\n            }}>{`scenario 3`}</a>{` lab goes over how the Kafka Connect JDBC sink works.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The `}<a parentName=\"p\" {...{\n            \"href\": \"#scenario-4:-run-the-solution-components-end-to-end-on-kubernetes\"\n          }}>{`scenario 4`}</a>{` addresses the end to end solution, which is basically an end to end demonstration of a simple data pipeline for a real time view of an inventory solution.`}</p>\n      </li>\n    </ol>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">You need to decide what your 'on-premise' environment is for this lab. You can run with docker compose, or deploy on a premise cluster. We propose to run the components with docker compose for the scenario 1,2,3 and scenario 4 is for a deployment of the components on a kubernetes cluster that could run on premise or on any cloud provider using Openshift. If you do not want to build all the components, we have each of them available in docker hub and the docker compose file should run them automatically.\n    </InlineNotification>\n    <h2>{`General pre-requisites`}</h2>\n    <p>{`We need the following IBM Cloud services created and tools to run the lab. We try to use docker images as much as possible to do not impact your local laptop.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.docker.com/\"\n        }}>{`Docker`}</a>{` and docker compose to run the solution locally.`}</li>\n      <li parentName=\"ul\">{`Event Streams instance, may be reuse the one created in `}<a parentName=\"li\" {...{\n          \"href\": \"/refarch-eda/technology/event-streams/es-cloud/\"\n        }}>{`this lab`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cloud.ibm.com/docs/cli?topic=cli-getting-started\"\n        }}>{`IBM Cloud CLI`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`If you want to run locally you need to get `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.docker.com/compose/\"\n        }}>{`docker compose`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://git-scm.com/downloads\"\n        }}>{`git CLI`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://maven.apache.org/install.html\"\n        }}>{`Maven`}</a>{`.`}</li>\n    </ul>\n    <p>{`For the on-premise environment, we will not use VMs, but simply run some of the components on IBM premise Service platform or Openshift. The point is that the workload is packaged as container images and can run anywhere.`}</p>\n    <h2>{`Scenario setup`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Login to the cloud via CLI: `}<inlineCode parentName=\"p\">{`ibmcloud login`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Initialize the Event Streams CLI and select the target Event Streams cluster: `}<inlineCode parentName=\"p\">{`ibmcloud es init`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Define connect topics: When running in distributed mode, the connectors need three topics as presented in the `}<inlineCode parentName=\"p\">{`create topics`}</inlineCode>{` table `}<a parentName=\"p\" {...{\n            \"href\": \"https://ibm.github.io/event-streams/connecting/setting-up-connectors/\"\n          }}>{`here`}</a>{`.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`connect-configs`}</strong>{`: This topic will store the connector and task configurations.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`connect-offsets`}</strong>{`: This topic is used to store offsets for Kafka Connect.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`connect-status`}</strong>{`: This topic will store status updates of connectors and tasks.`}</li>\n        </ul>\n        <p parentName=\"li\">{`Using IBM Event Streams CLI, the topics are created via the commands like:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`# log to the kubernetes cluster:\nibmcloud login -a https://icp-console.apps.green.ocp.csplab.local\n# initialize the event streams CLI plugin\nibmcloud es init\n# Create the Kafka topics for Kafka connect\nibmcloud es topic-create -n connect-configs -p 1 -r 3 -c cleanup.policy=compact\nibmcloud es topic-create -n connect-offsets -p 25 -r 3 -c cleanup.policy=compact\nibmcloud es topic-create -n connect-status -p 5 -r 3 -c cleanup.policy=compact\n# Create the topic for the scenarios\nibmcloud es topic-create inventory\nibmcloud es topic-create items\nibmcloud es topics\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create API KEY with a manager-level access.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Clone the lab repository: `}<inlineCode parentName=\"p\">{`git clone https://github.com/jbcodeforce/eda-kconnect-lab && cd eda-kconnect-lab`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Prepare the script to set the environment variables used by all the components of the solution, like the Kafka broker URLs and APIKEy.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`First rename the `}<inlineCode parentName=\"li\">{`scripts/setenv-TMP.sh`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`scripts/setenv.sh`}</inlineCode></li>\n          <li parentName=\"ul\">{`Then modify the KAFKA_BROKERS and KAFKA_APIKEY with the respecting values as defined in the Event Streams credentials.`}</li>\n        </ul>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{`{\n  \"api_key\": \"bA ... Qp\",\n  \"apikey\": \"bA ... Qp\",\n  \"iam_apikey_description\": \"Auto-generated for key 4d ... c6\",\n  \"iam_apikey_name\": \"es-mgr-creds\",\n  \"iam_role_crn\": \"crn:v1:bluemix:public:iam::::serviceRole:Manager\",\n  \"iam_serviceid_crn\": \"crn:v1:bluemix:public:iam-identity::a/db ... f2::serviceid:ServiceId-7a ... 6d\",\n  \"instance_id\": \"29 ... 15\",\n  \"kafka_admin_url\": \"https://70 ... 1g.svc01.us-east.eventstreams.cloud.ibm.com\",\n  \"kafka_brokers_sasl\": [\n    \"broker-1- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\",\n    \"broker-0- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\",\n    \"broker-4- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\",\n    \"broker-2- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\",\n    \"broker-5- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\",\n    \"broker-3- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\"\n  ],\n  \"kafka_http_url\": \"https://70 ... 1g.svc01.us-east.eventstreams.cloud.ibm.com\",\n  \"password\": \"bA ... Qp\",\n  \"user\": \"token\"\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Prepare the Kafka Connect environment, as we need to use three connectors. Therefore we need to clone the source, build and get the jars file in the connectors. In fact we have developed scripts to automate those tedious steps:`}</p>\n      </li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`Under the `}<inlineCode parentName=\"li\">{`kconnect`}</inlineCode>{` folder run `}<inlineCode parentName=\"li\">{`./setupConnectors.sh`}</inlineCode>{` script and get the three connectors downloaded and built.`}</li>\n      <li parentName=\"ul\">{`Build a docker image for the connector: this is also done by running a second script: `}<inlineCode parentName=\"li\">{`./createOrStartKconnect.sh build`}</inlineCode>{`.`}</li>\n    </ul>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">You need to decide what 'on-premise' environment is for this lab. You can run with docker compose, or deploy on a premise cluster. We propose to run the components with docker compose for the scenario 1,2,3 and do a deployment of the components on premise as a service on scenario 4.\n    </InlineNotification>\n    <h2>{`Scenario 1: Event Streams on Cloud to MQ on premise via MQ connector sink`}</h2>\n    <p>{`This scenario uses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-messaging/kafka-connect-mq-sink\"\n      }}>{`IBM Kafka Connect sink connector for IBM MQ`}</a>{` to pull streaming data into a local MQ queue.  In this example we are using IBM Event Streams on IBM Cloud as the Kafka data source and a dockerized instance of MQ as the destination. We could have used MQ broker as part of Cloud Pak for integration or `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/docs/mqcloud/index.html\"\n      }}>{`as a service in IBM Cloud`}</a>{`.`}</p>\n    <h3>{`Pre-requisites`}</h3>\n    <p>{`We assume that you have an instance of Event Streams already running on IBM Cloud with at least on manager-level credentials created.  The credentials will come in the form of a JSON document as seen in the previous section.\nYou will need the `}<inlineCode parentName=\"p\">{`kafka_brokers_sasl`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`password`}</inlineCode>{` atribute to configure the sink connector.`}</p>\n    <p>{`This scenario uses the `}<inlineCode parentName=\"p\">{`inventory`}</inlineCode>{` topic created in the Scenario Setup in previous section.`}</p>\n    <h3>{`Create Local IBM MQ Instance`}</h3>\n    <p>{`Here we will use Docker to create a local MQ instance.  First create a data directory to mount in the container.`}</p>\n    <p><inlineCode parentName=\"p\">{`mkdir qm1data`}</inlineCode></p>\n    <p>{`Then create the container.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker run                     \\\\\n  --name mq                    \\\\\n  --detach                     \\\\\n  --publish 1414:1414          \\\\\n  --publish 9443:9443          \\\\\n  --publish 9157:9157          \\\\\n  --volume qm1data:/mnt/mqm    \\\\\n  --env LICENSE=accept         \\\\\n  --env MQ_QMGR_NAME=QM1       \\\\\n  --env MQ_APP_PASSWORD=admin  \\\\\n  --env MQ_ENABLE_METRICS=true \\\\\n  ibmcom/mq\n`}</code></pre>\n    <p>{`You should be able to log into the MQ server on port 9443 with default user `}<inlineCode parentName=\"p\">{`admin`}</inlineCode>{` and password `}<inlineCode parentName=\"p\">{`passw0rd`}</inlineCode>{`.`}</p>\n    <p>{`Connect to the running MQ instance to create a Channel and Queue as described on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-messaging/kafka-connect-mq-sink/blob/master/UsingMQwithKafkaConnect.md\"\n      }}>{`Using IBM MQ with Kafka Connect`}</a>{` page.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker exec -ti mq bash\nstrmqm QM1\nrunmqsc QM1\nDEFINE CHANNEL(KAFKA.CHANNEL) CHLTYPE(SVRCONN)\nSET CHLAUTH(KAFKA.CHANNEL) TYPE(BLOCKUSER) USERLIST('nobody')\nSET CHLAUTH('*') TYPE(ADDRESSMAP) ADDRESS('*') USERSRC(NOACCESS)\nSET CHLAUTH(KAFKA.CHANNEL) TYPE(ADDRESSMAP) ADDRESS('*') USERSRC(CHANNEL) CHCKCLNT(REQUIRED)\nALTER AUTHINFO(SYSTEM.DEFAULT.AUTHINFO.IDPWOS) AUTHTYPE(IDPWOS) ADOPTCTX(YES)\nREFRESH SECURITY TYPE(CONNAUTH)\nDEFINE QLOCAL(INVENTORY)\nSET AUTHREC OBJTYPE(QMGR) PRINCIPAL('admin') AUTHADD(CONNECT,INQ)\nSET AUTHREC PROFILE(INVENTORY) OBJTYPE(QUEUE) PRINCIPAL('admin') AUTHADD(ALLMQI)\nEND\n`}</code></pre>\n    <p>{`Exit the session and continue on to create the MQ Connector Sink.`}</p>\n    <h3>{`Create MQ Kafka Connector Sink`}</h3>\n    <p>{`The MQ Connector Sink can be downloaded from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-messaging/kafka-connect-mq-sink\"\n      }}>{`Github`}</a>{`.  The Github site includes exhaustive instructions and an abridged version follows.`}</p>\n    <p>{`Clone the repository with the following command:`}</p>\n    <p><inlineCode parentName=\"p\">{`git clone https://github.com/ibm-messaging/kafka-connect-mq-sink.git`}</inlineCode></p>\n    <p>{`Change directory into the kafka-connect-mq-sink directory:`}</p>\n    <p><inlineCode parentName=\"p\">{`cd kafka-connect-mq-sink`}</inlineCode></p>\n    <p>{`Build the connector using Maven:`}</p>\n    <p><inlineCode parentName=\"p\">{`mvn clean package`}</inlineCode></p>\n    <p>{`Next, create a directory to contain the Kafka Connector configuration.`}</p>\n    <p><inlineCode parentName=\"p\">{`mkdir config && cd config`}</inlineCode></p>\n    <p>{`Create a configuration file called `}<inlineCode parentName=\"p\">{`connect-distributed.properties`}</inlineCode>{` for Kafka Connect based on the template below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`# A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.\nbootstrap.servers=broker-1- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-0- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-3- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\nssl.enabled.protocols=TLSv1.2\nssl.protocol=TLS\nsecurity.protocol=SASL_SSL\nsasl.mechanism=PLAIN\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"bA ... Qp\";\n\n# Consumer side configuration\nconsumer.bootstrap.servers=broker-1- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-0- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-3- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\nconsumer.security.protocol=SASL_SSL\nconsumer.ssl.protocol=TLSv1.2\nconsumer.sasl.mechanism=PLAIN\nconsumer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"bA ... Qp\";\n\n# Producer Side\nproducer.security.protocol=SASL_SSL\nproducer.ssl.protocol=TLSv1.2\nproducer.sasl.mechanism=PLAIN\nproducer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"bA ... Qp\";\nproducer.bootstrap.servers=broker-1- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-0- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-3- ... kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\n\n\nplugin.path=/opt/kafka/libs\n\n# unique name for the cluster, used in forming the Connect cluster group. Note that this must not conflict with consumer group IDs\ngroup.id=mq-sink-cluster\n\n# The converters specify the format of data in Kafka and how to translate it into Connect data. Every Connect user will\n# need to configure these based on the format they want their data in when loaded from or stored into Kafka\nkey.converter=org.apache.kafka.connect.json.JsonConverter\nvalue.converter=org.apache.kafka.connect.json.JsonConverter\n# Converter-specific settings can be passed in by prefixing the Converter's setting with the converter we want to apply\n# it to\nkey.converter.schemas.enable=true\nvalue.converter.schemas.enable=true\n\n# Topic to use for storing offsets. T\noffset.storage.topic=connect-offsets\noffset.storage.replication.factor=3\n#offset.storage.partitions=25\n\n# Topic to use for storing connector and task configurations; note that this should be a single partition, highly replicated, and compacted topic.\nconfig.storage.topic=connect-configs\nconfig.storage.replication.factor=3\n\n# Topic to use for storing statuses. This topic can have multiple partitions and should be replicated and compacted.\nstatus.storage.topic=connect-status\nstatus.storage.replication.factor=3\nstatus.storage.partitions=5\n\n# Flush much faster than normal, which is useful for testing/debugging\noffset.flush.interval.ms=10000\n`}</code></pre>\n    <p>{`Save this file in the `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` directory.`}</p>\n    <p>{`Next, create a log4j configuration file named `}<inlineCode parentName=\"p\">{`connect-log4j.properties`}</inlineCode>{` based on the template below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`log4j.rootLogger=DEBUG, stdout\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c:%L)%n\n\nlog4j.logger.org.apache.kafka=INFO\n`}</code></pre>\n    <p>{`Save this file to the `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` directory as well.`}</p>\n    <p>{`Finally, create a JSON configuraiton file for the MQ sink.  This can be stored anywhere but it can be conveniently created in the `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` directory.  We name this file `}<inlineCode parentName=\"p\">{`mq-sink.json`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"name\": \"mq-sink\",\n    \"config\":\n    {\n        \"connector.class\": \"com.ibm.eventstreams.connect.mqsink.MQSinkConnector\",\n        \"tasks.max\": \"1\",\n        \"topics\": \"inventory\",\n\n        \"key.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n        \"value.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n\n        \"mq.queue.manager\": \"QM1\",\n        \"mq.connection.name.list\": \"mq(1414)\",\n        \"mq.user.name\": \"admin\",\n        \"mq.password\": \"passw0rd\",\n        \"mq.user.authentication.mqcsp\": true,\n        \"mq.channel.name\": \"KAFKA.CHANNEL\",\n        \"mq.queue\": \"INVENTORY\",\n        \"mq.message.builder\": \"com.ibm.eventstreams.connect.mqsink.builders.DefaultMessageBuilder\"\n    }\n}\n`}</code></pre>\n    <p>{`Back out one directory to the `}<inlineCode parentName=\"p\">{`kafka-connect-mq-sink`}</inlineCode>{` directory.`}</p>\n    <p><inlineCode parentName=\"p\">{`cd ..`}</inlineCode></p>\n    <p>{`Build docker image\n`}<inlineCode parentName=\"p\">{`docker build -t kafkaconnect-with-mq-sink:1.3.0 .`}</inlineCode></p>\n    <p>{`Finally, run the Kafka Connect MQ Sink container.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run                                 \\\\\n  --name mq-sink                           \\\\\n  --detach                                 \\\\\n  --volume $(pwd)/config:/opt/kafka/config \\\\\n  --publish 8083:8083                      \\\\\n  --link mq:mq                             \\\\\n  kafkaconnect-with-mq-sink:1.3.0\n`}</code></pre>\n    <p>{`You should now have a working MQ sink.`}</p>\n    <p>{`As an alternate approach, when you have a Kafka Connect isntance up and running, with the dependant jar files, it is possible to configure the connector with a POST operation like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Shell\"\n      }}>{`curl -X POST -H \"Content-Type: application/json\" http://localhost:8083/connectors   --data \"@./mq-sink.json\"\n\n# The response returns the metadata about the connector\n{\"name\":\"mq-sink\",\"config\":{\"connector.class\":\"com.ibm.eventstreams.connect.mqsink.MQSinkConnector\",\"tasks.max\":\"1\",\"topics\":\"inventory\",\"key.converter\":\"org.apache.kafka.connect.storage.StringConverter\",\"value.converter\":\"org.apache.kafka.connect.storage.StringConverter\",\"mq.queue.manager\":\"QM1\",\"mq.connection.name.list\":\"ibmmq(1414)\",\"mq.user.name\":\"admin\",\"mq.password\":\"passw0rd\",\"mq.user.authentication.mqcsp\":\"true\",\"mq.channel.name\":\"KAFKA.CHANNEL\",\"mq.queue\":\"INVENTORY\",\"mq.message.builder\":\"com.ibm.eventstreams.connect.mqsink.builders.DefaultMessageBuilder\",\"name\":\"mq-sink\"},\"tasks\":[{\"connector\":\"mq-sink\",\"task\":0}],\"type\":\"sink\"}\n`}</code></pre>\n    <p>{`Once the connector is up and running, we can use some tool to send inventory message. In the `}<inlineCode parentName=\"p\">{`integration-tests`}</inlineCode>{` folder we have some python code to produce message. If you have a python environment with kafka api you can use yours, or we have also provided a Dockerfile to prepare a local python environment, which will not impact yours.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# if you change the name of the image\ndocker build -t ibmcase/python37 .\n# ... then update the script ./startPython.sh\n./startPython.sh\n# Now in the new bash session you should see ProduceInventoryEvent.py,... start it by sending 2 events\npython ProduceInventoryEvent.py --size 2\n# Events are random but use stores and items known by the database downstream.\n sending -> {'storeName': 'NYC01', 'itemCode': 'IT06', 'quantity': 15, 'price': 163, 'id': 1, 'timestamp': '23-Jun-2020 04:32:38'}\n# the following trace demonstrates Kafka received the message\n[KafkaProducer] - Message delivered to inventory [0]\nsending -> {'storeName': 'SC01', 'itemCode': 'IT06', 'quantity': 15, 'price': 178, 'id': 2, 'timestamp': '23-Jun-2020 04:32:38'}\n[KafkaProducer] - Message delivered to inventory [0]\n`}</code></pre>\n    <p>{`In the Kafka Connect trace we can see:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kconnect_1  | [2020-06-23 04:23:16,270] INFO WorkerSinkTask{id=mq-sink-0} Committing offsets asynchronously using sequence number 26: {inventory-0=OffsetAndMetadata{offset=44, leaderEpoch=null, metadata=''}} (org.apache.kafka.connect.runtime.WorkerSinkTask:349)\nkconnect_1  | [2020-06-23 04:32:46,382] INFO WorkerSinkTask{id=mq-sink-0} Committing offsets asynchronously using sequence number 83: {inventory-0=OffsetAndMetadata{offset=48, leaderEpoch=null, metadata=''}} (org.apache.kafka.connect.runtime.WorkerSinkTask:349)\n`}</code></pre>\n    <p>{`And in the IBM MQ Console, under the Local Queue: Inventory we can see the messages:`}</p>\n    <img {...{\n      \"src\": \"./images/ibmq-q-inventory.png\",\n      \"alt\": null\n    }}></img>\n    <p>{`To remove the connector do the following command. Do this specially if you go to scenario 2 next.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X DELETE http://localhost:8083/connectors/mq-sink\n`}</code></pre>\n    <h2>{`Scenario 2: Deploying Kafka Connector MQ Sink to OpenShift`}</h2>\n    <h3>{`Prerequisites`}</h3>\n    <p>{`We are assuming you already have an instance of IBM EventStreams running on IBM Cloud from previous scenarios.  Also, we assume you have a running instance of OpenShift with a project created to run the MQ Sink.  Finally, we assume you’re familia with OpenShift and Kubernetes and will know how to work with the configuration files provided below.`}</p>\n    <h3>{`MQ on OpenShift`}</h3>\n    <p>{`Strictly speaking you don’t need to move the instance of MQ previously used onto OpenShift for the MQ Sink to work however the configuration to do so is provided.  Note that this is not a production configuration and is intended for POC purposes only.`}</p>\n    <p>{`Create a ConfigMap on OpenShift with the following definition:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: mq-config\n  namespace: mq-demo\ndata:\n    LICENSE: accept\n    MQ_QMGR_NAME: QM1\n    MQ_APP_PASSWORD: admin\n    MQ_ENABLE_METRICS: \"true\"\n`}</code></pre>\n    <p>{`This will make it easier to update the MQ configuration if needed without editing everything in the Pod definition.`}</p>\n    <p>{`Next, create the MQ Pod with the following definition:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: ibm-mq\n  labels:\n    app: mq-kafka-sink-demo-app\n  namespace: mq-demo\nspec:\n  containers:\n    - name: ibm-mq\n      image: ibmcom/mq\n      ports:\n        - containerPort: 1414\n          protocol: TCP\n        - containerPort: 9443\n          protocol: TCP\n        - containerPort: 9157\n          protocol: TCP\n      envFrom:\n        - configMapRef:\n            name: mq-config\n`}</code></pre>\n    <p>{`Next, define a Service to point to the MQ Pod.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Service\nmetadata:\n  name: mq-service\n  namespace: mq-demo\nspec:\n  selector:\n    app: mq-kafka-sink-demo-app\n  ports:\n    - name: mq-port\n      protocol: TCP\n      port: 1414\n      targetPort: 1414\n    - name: mq-portal\n      protocol: TCP\n      port: 9443\n      targetPort: 9443\n    - name: mq-dunno\n      protocol: TCP\n      port: 9157\n      targetPort: 9157\n`}</code></pre>\n    <p>{`Finally, define a Route to be able to access the admin UI.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`kind: Route\napiVersion: route.openshift.io/v1\nmetadata:\n  name: mq-route\n  namespace: mq-demo\nspec:\n  host: ibmmq.bnpp.apps.openshift.proxmox.lab\n  to:\n    kind: Service\n    name: mq-service\n    weight: 100\n  port:\n    targetPort: mq-portal\n  tls:\n    termination: passthrough\n    insecureEdgeTerminationPolicy: Redirect\n  wildcardPolicy: None\n`}</code></pre>\n    <p>{`You will want to connect to the container and run the setup commands as described in a previous scenario.  At this point, IBM MQ should be running and available on OpenShift.`}</p>\n    <p>{`To run the Kafka Connect MQ Sink on OpenShift or any container platform, you will need to build a container that has Kafka installed as well as the MQ Sink and proper configuration.  Typically we would use the Strimzi containerized Kafka solution to run on OpenShift, but in this case to illustrate all the components we are building a container from scratch.  The following is the Dockerfile:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Dockerfile\"\n      }}>{`FROM ubuntu:20.04\n\nADD https://mirrors.koehn.com/apache/kafka/2.5.0/kafka_2.12-2.5.0.tgz /tmp/\n\nRUN apt update                                                                                                     && \\\\\n    apt install -y curl git maven                                                                                  && \\\\\n    tar -C /opt -xvf /tmp/kafka_2.12-2.5.0.tgz                                                                     && \\\\\n    rm -f /tmp/kafka_2.12-2.5.0.tgz                                                                                && \\\\\n    ln -s /opt/kafka_2.12-2.5.0 /opt/kafka                                                                         && \\\\\n    mv -f /opt/kafka/config/connect-distributed.properties /opt/kafka/config/connect-distributed.properties.bak    && \\\\\n    cd /opt                                                                                                        && \\\\\n    git clone https://github.com/ibm-messaging/kafka-connect-mq-sink.git                                           && \\\\\n    cd /opt/kafka-connect-mq-sink                                                                                  && \\\\\n    mvn clean package                                                                                              && \\\\\n    ln -s /opt/kafka-connect-mq-sink/target/kafka-connect-mq-sink-1.3.0-jar-with-dependencies.jar /opt/kafka/libs/ && \\\\\n    mv -f /opt/kafka-connect-mq-sink/config/mq-sink.json /opt/kafka-connect-mq-sink/config/mq-sink.json.bak\n\nCOPY connect-distributed.properties /opt/kafka/config/connect-distributed.properties\nCOPY mq-sink-connector-config.json /opt/kafka-connect-mq-sink/config/mq-sink.json\nCOPY entrypoint.sh /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n`}</code></pre>\n    <p>{`We start with a vanilla Linux container, install the binary distribution of Kafka for Linux, clone the MQ Sink repository from Github, build the MQ Sink, and finally copy in some template files.  Finally the container runs a custom entrypoint script as shown below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`#!/bin/sh\n\nset -x\n\nsed -i \"s/KAFKA_BOOTSTRAP_SERVERS/\\${KAFKA_BOOTSTRAP_SERVERS}/g\" /opt/kafka/config/connect-distributed.properties\nsed -i \"s/KAFKA_API_KEY/\\${KAFKA_API_KEY}/g\"                     /opt/kafka/config/connect-distributed.properties\n\n\nsed -i \"s/KAFKA_TOPICS/\\${KAFKA_TOPICS}/g\"         /opt/kafka-connect-mq-sink/config/mq-sink.json\nsed -i \"s/MQ_QUEUE_MANAGER/\\${MQ_QUEUE_MANAGER}/g\" /opt/kafka-connect-mq-sink/config/mq-sink.json\nsed -i \"s/MQ_HOST/\\${MQ_HOST}/g\"                   /opt/kafka-connect-mq-sink/config/mq-sink.json\nsed -i \"s/MQ_PORT/\\${MQ_PORT}/g\"                   /opt/kafka-connect-mq-sink/config/mq-sink.json\nsed -i \"s/MQ_USER/\\${MQ_USER}/g\"                   /opt/kafka-connect-mq-sink/config/mq-sink.json\nsed -i \"s/MQ_PASSWORD/\\${MQ_PASSWORD}/g\"           /opt/kafka-connect-mq-sink/config/mq-sink.json\nsed -i \"s/MQ_CHANNEL/\\${MQ_CHANNEL}/g\"             /opt/kafka-connect-mq-sink/config/mq-sink.json\nsed -i \"s/MQ_QUEUE/\\${MQ_QUEUE}/g\"                 /opt/kafka-connect-mq-sink/config/mq-sink.json\n\n/opt/kafka/bin/connect-distributed.sh /opt/kafka/config/connect-distributed.properties &\n\nsleep 60\ncurl -X DELETE -H \"Content-Type: application/json\" http://localhost:8083/connectors/mq-sink-connector\ncurl -X POST -H \"Content-Type: application/json\" http://localhost:8083/connectors --data \"@/opt/kafka-connect-mq-sink/config/mq-sink.json\"\n\ntail -f /dev/null\n`}</code></pre>\n    <p>{`Again this is not a production-ready entrypoint container script; it’s intended for POC purposes.  The script updates the template files copied into the container with values from the environment (either `}<inlineCode parentName=\"p\">{`--env`}</inlineCode>{` using Docker, or from a `}<inlineCode parentName=\"p\">{`ConfigMap`}</inlineCode>{` in OpenShift) and then starts Kafka Connect in distributed mode.  It pauses the script for 1 minute to let Kafka Connect start, then finally activates the MQ Sink by POSTing the MQ Sink configuration using `}<inlineCode parentName=\"p\">{`cURL`}</inlineCode>{`.`}</p>\n    <p>{`The two template configuration files that are copied into the container are shown below.`}</p>\n    <h3>{`connect-distributed.properties:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.\nbootstrap.servers=KAFKA_BOOTSTRAP_SERVERS\nssl.enabled.protocols=TLSv1.2\nssl.protocol=TLS\nsecurity.protocol=SASL_SSL\nsasl.mechanism=PLAIN\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"KAFKA_API_KEY\";\n\n# Consumer side configuration\nconsumer.bootstrap.servers=KAFKA_BOOTSTRAP_SERVERS\nconsumer.security.protocol=SASL_SSL\nconsumer.ssl.protocol=TLSv1.2\nconsumer.sasl.mechanism=PLAIN\nconsumer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"KAFKA_API_KEY\";\n\n# Producer Side\nproducer.bootstrap.servers=KAFKA_BOOTSTRAP_SERVERS\nproducer.security.protocol=SASL_SSL\nproducer.ssl.protocol=TLSv1.2\nproducer.sasl.mechanism=PLAIN\nproducer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"KAFKA_API_KEY\";\n\nplugin.path=/opt/kafka/libs\n\n# unique name for the cluster, used in forming the Connect cluster group. Note that this must not conflict with consumer group IDs\ngroup.id=mq-sink-cluster\n\n# The converters specify the format of data in Kafka and how to translate it into Connect data. Every Connect user will\n# need to configure these based on the format they want their data in when loaded from or stored into Kafka\nkey.converter=org.apache.kafka.connect.json.JsonConverter\nvalue.converter=org.apache.kafka.connect.json.JsonConverter\n# Converter-specific settings can be passed in by prefixing the Converter's setting with the converter we want to apply\n# it to\nkey.converter.schemas.enable=true\nvalue.converter.schemas.enable=true\n\n# Topic to use for storing offsets. This topic should have many partitions and be replicated and compacted.\n# Kafka Connect will attempt to create the topic automatically when needed, but you can always manually create\n# the topic before starting Kafka Connect if a specific topic configuration is needed.\n# Most users will want to use the built-in default replication factor of 3 or in some cases even specify a larger value.\n# Since this means there must be at least as many brokers as the maximum replication factor used, we'd like to be able\n# to run this example on a single-broker cluster and so here we instead set the replication factor to 1.\noffset.storage.topic=connect-offsets\noffset.storage.replication.factor=3\n#offset.storage.partitions=25\n\n# Topic to use for storing connector and task configurations; note that this should be a single partition, highly replicated,\n# and compacted topic. Kafka Connect will attempt to create the topic automatically when needed, but you can always manually create\n# the topic before starting Kafka Connect if a specific topic configuration is needed.\n# Most users will want to use the built-in default replication factor of 3 or in some cases even specify a larger value.\n# Since this means there must be at least as many brokers as the maximum replication factor used, we'd like to be able\n# to run this example on a single-broker cluster and so here we instead set the replication factor to 1.\nconfig.storage.topic=connect-configs\nconfig.storage.replication.factor=3\n\n# Topic to use for storing statuses. This topic can have multiple partitions and should be replicated and compacted.\n# Kafka Connect will attempt to create the topic automatically when needed, but you can always manually create\n# the topic before starting Kafka Connect if a specific topic configuration is needed.\n# Most users will want to use the built-in default replication factor of 3 or in some cases even specify a larger value.\n# Since this means there must be at least as many brokers as the maximum replication factor used, we'd like to be able\n# to run this example on a single-broker cluster and so here we instead set the replication factor to 1.\nstatus.storage.topic=connect-status\nstatus.storage.replication.factor=3\n\n#status.storage.partitions=5\n\n# Flush much faster than normal, which is useful for testing/debugging\noffset.flush.interval.ms=10000\n`}</code></pre>\n    <h3>{`mq-sink-connector-config.json:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"name\": \"mq-sink-connector\",\n  \"config\":\n  {\n      \"connector.class\": \"com.ibm.eventstreams.connect.mqsink.MQSinkConnector\",\n      \"tasks.max\": \"1\",\n      \"topics\": \"KAFKA_TOPICS\",\n\n      \"key.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n      \"value.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n\n      \"mq.queue.manager\": \"MQ_QUEUE_MANAGER\",\n      \"mq.connection.name.list\": \"MQ_HOST(MQ_PORT)\",\n      \"mq.user.name\": \"MQ_USER\",\n      \"mq.password\": \"MQ_PASSWORD\",\n      \"mq.user.authentication.mqcsp\": true,\n      \"mq.channel.name\": \"MQ_CHANNEL\",\n      \"mq.queue\": \"MQ_QUEUE\",\n      \"mq.message.builder\": \"com.ibm.eventstreams.connect.mqsink.builders.DefaultMessageBuilder\"\n  }\n}\n`}</code></pre>\n    <p>{`Notice in these two files there are several capitalized variables which are replaced by the entrypoint.sh script at container startup.`}</p>\n    <p>{`To deploy the container on OpenShift, we create a `}<inlineCode parentName=\"p\">{`ConfigMap`}</inlineCode>{` with information about the IBM EventStreams on IBM Cloud instance as well as the local instance of MQ on OpenShift.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: mq-kafka-sink-demo-config\n  namespace: mq-demo\ndata:\n  KAFKA_API_KEY: bA ... Qp\n  KAFKA_BOOTSTRAP_SERVERS: >-\n    broker-1- ... eventstreams.cloud.ibm.com:9093,broker-0- ... eventstreams.cloud.ibm.com:9093,broker-4- ... eventstreams.cloud.ibm.com:9093,broker-2- ... eventstreams.cloud.ibm.com:9093,broker-5- ... eventstreams.cloud.ibm.com:9093,broker-3- ... eventstreams.cloud.ibm.com:9093\n  KAFKA_TOPICS: inventory\n  MQ_HOST: mq-service\n  MQ_PORT: \"1414\"\n  MQ_USER: admin\n  MQ_QUEUE_MANAGER: QM1\n  MQ_PASSWORD: passw0rd\n  MQ_CHANNEL: KAFKA.CHANNEL\n  MQ_QUEUE: INVENTORY\n`}</code></pre>\n    <p>{`Finally to deploy the MQ Sink container, we create a Pod definition on OpenShift:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: mq-kafka-sink-demo\n  labels:\n    app: mq-kafka-sink-demo-app\n  namespace: mq-demo\nspec:\n  containers:\n    - name: mq-kafka-sink-demo\n      image: registry/mq-kafka-sink-demo:0.0.1\n      envFrom:\n        - configMapRef:\n            name: mq-kafka-sink-demo-config\n`}</code></pre>\n    <p>{`With the correct credentials for IBM EventStreams and IBM MQ, Kafka Connect should connect to both services and pull data from the EventStreams topic configured to the MQ Queue configured.  You will see signs of success in the container output (via oc logs, or in the UI):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`+ curl -X POST -H Content-Type: application/json http://localhost:8083/connectors --data @/opt/kafka-connect-mq-sink/config/mq-sink.json\n...\n{\"name\":\"mq-sink-connector\",\"config\":{\"connector.class\":\"com.ibm.eventstreams.connect.mqsink.MQSinkConnector\",\"tasks.max\":\"1\",\"topics\":\"inventory\",\"key.converter\":\"org.apache.kafka.connect.storage.StringConverter\",\"value.converter\":\"org.apache.kafka.connect.storage.StringConverter\",\"mq.queue.manager\":\"QM1\",\"mq.connection.name.list\":\"mq-service(1414)\",\"mq.user.name\":\"admin\",\"mq.password\":\"passw0rd\",\"mq.user.authentication.mqcsp\":\"true\",\"mq.channel.name\":\"KAFKA.CHANNEL\",\"mq.queue\":\"INVENTORY\",\"mq.message.builder\":\"com.ibm.eventstreams.connect.mqsink.builders.DefaultMessageBuilder\",\"name\":\"mq-sink-connector\"},\"tasks\":[{\"connector\":\"mq-sink-connector\",\"task\":0}],\"type\":\"sink\"}\n...\n[2020-06-23 04:26:26,054] INFO Creating task mq-sink-connector-0 (org.apache.kafka.connect.runtime.Worker:419)\n...[2020-06-23 04:26:26,449] INFO Connection to MQ established (com.ibm.eventstreams.connect.mqsink.JMSWriter:229)\n[2020-06-23 04:26:26,449] INFO WorkerSinkTask{id=mq-sink-connector-0} Sink task finished initialization and start (org.apache.kafka.connect.runtime.WorkerSinkTask:306)\n`}</code></pre>\n    <p>{`You should now have the Kafka Connector MQ Sink running on OpenShift.`}</p>\n    <h2>{`Scenario 3: Rabbitmq on premise to Event Streams on Cloud via RabbitMQ connector source`}</h2>\n    <p>{`In this scenario we are using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-messaging/kafka-connect-rabbitmq-source\"\n      }}>{`IBM messaging github: source connector for RabbitMQ`}</a>{`. The configuration for this connector is also done using Json config file, with a POST to the Kafka connectors URL.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jbcodeforce/eda-kconnect-lab\"\n      }}>{`lab repository`}</a>{` includes a docker compose file (`}<inlineCode parentName=\"p\">{`RabbitMQ-Kconnect-compose.yaml`}</inlineCode>{`) under the `}<inlineCode parentName=\"p\">{`infrastructure`}</inlineCode>{` folder to run Rabbit MQ and Kconnect together on your local computer.`}</p>\n    <p>{`In scenario 1, we were using the official IBM MQ Connector docker image, but in this scenario we have to define a Kafka connect image that includes the RabbitMQ and JDBC connectors. Which means we needs to get the different connector jar files, and build a docker image. Those steps were described in `}<a parentName=\"p\" {...{\n        \"href\": \"#scenario-setup\"\n      }}>{`previous section`}</a>{`.`}</p>\n    <h3>{`Pre-requisites`}</h3>\n    <p>{`To send message to RabbitMQ, we have implemented a simple simulator, to send item sale messages for one of the stores. The code is under `}<inlineCode parentName=\"p\">{`store-sale-producer`}</inlineCode>{` folder and we have also uploaded the image into dockerhub. If you need to rebuild the image the following commands may be done:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./mvnw clean package -Dquarkus.container-image.build=true -Dquarkus.container-image.group=ibmcase -Dquarkus.container-image.tag=1.0.0\n`}</code></pre>\n    <h3>{`Start the backend environment`}</h3>\n    <p>{`In this section we start RabbitMQ, Kafka Connect and the Store Item Sale generator app. This app exposes a REST api to generate items sale operations that happen in a predefined set of stores.`}</p>\n    <p>{`Under the infrastructure folder use the command: `}<inlineCode parentName=\"p\">{`docker-compose -f RabbitMQ-Kconnect-compose.yaml up`}</inlineCode>{`.`}</p>\n    <p>{`The trace includes RabbitMQ, storeSaleGenerator_1 and Kafka connect logs. Here is a small extract of important messages:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`rabbitmq_1            | 2020-06-17 06:12:58.293 [info] <0.9.0> Server startup complete; 4 plugins started.\nrabbitmq_1            |  * rabbitmq_management\nrabbitmq_1            |  * rabbitmq_web_dispatch\nrabbitmq_1            |  * rabbitmq_management_agent\nrabbitmq_1            |  * rabbitmq_amqp1_0\nrabbitmq_1            |  completed with 4 plugins.\n....\nstoreSaleGenerator_1  | 2020-06-17 06:12:44,056 INFO  [io.quarkus] (main) Profile prod activated.\nstoreSaleGenerator_1  | 2020-06-17 06:12:44,057 INFO  [io.quarkus] (main) Installed features: [cdi, mutiny, resteasy, resteasy-jsonb, smallrye-openapi, smallrye-reactive-messaging, smallrye-reactive-messaging-amqp, vertx]\n`}</code></pre>\n    <h3>{`Verify the RabbitMQ settings`}</h3>\n    <p>{`In a Web Browser go to `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:1567/\"\n      }}>{`http://localhost:1567/`}</a>{` using the guest/guest login.`}</p>\n    <p>{`You should reach this console:`}</p>\n    <img {...{\n      \"src\": \"./images/rabbitmq-overview.png\",\n      \"alt\": \"7\"\n    }}></img>\n    <p>{`If in the Admin tab you do not see `}<strong parentName=\"p\">{`rabbit-user`}</strong>{` listed do the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Add a new admin user: `}<strong parentName=\"li\">{`rabbit-user/rabbit-pass`}</strong>{` using the Admin tab. Enable the virtual host to be ’/‘.`}</li>\n    </ul>\n    <img {...{\n      \"src\": \"./images/rabbitmq-user.png\",\n      \"alt\": null\n    }}></img>\n    <p>{`Go to the Queue tab and add `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` queue with default parameters:`}</p>\n    <img {...{\n      \"src\": \"./images/rabbitmq-item-queue.png\",\n      \"alt\": \"8\"\n    }}></img>\n    <p>{`With the following result`}</p>\n    <img {...{\n      \"src\": \"./images/rabbitmq-item-queue-2.png\",\n      \"alt\": \"9\"\n    }}></img>\n    <h3>{`Configure the kafka connector for Rabbitmq source`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`rabbitmq-source.json`}</inlineCode>{` define the connector and the RabbitMQ connection parameters:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"name\": \"RabbitMQSourceConnector\",\n    \"config\": {\n        \"connector.class\": \"com.ibm.eventstreams.connect.rabbitmqsource.RabbitMQSourceConnector\",\n        \"tasks.max\": \"1\",\n        \"kafka.topic\" : \"items\",\n        \"rabbitmq.host\": \"rabbitmq\",\n        \"rabbitmq.queue\" : \"items\",\n        \"rabbitmq.prefetch.count\" : \"500\",\n        \"rabbitmq.automatic.recovery.enabled\" : \"true\",\n        \"rabbitmq.network.recovery.interval.ms\" : \"10000\",\n        \"rabbitmq.topology.recovery.enabled\" : \"true\"\n    }\n}\n`}</code></pre>\n    <p>{`This file is uploaded to Kafka Connect via a PORT operation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST -H \"Content-Type: application/json\" http://localhost:8083/connectors   --data \"@./rabbitmq-source.json\"\n`}</code></pre>\n    <p>{`To verify use: `}<inlineCode parentName=\"p\">{`curl -X GET http://localhost:8083/connectors`}</inlineCode>{`.`}</p>\n    <p>{`In Kafka connect trace you should see:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[Worker clientId=connect-1, groupId=eda-kconnect] Connector RabbitMQSourceConnector config updated\n...\nStarting connector RabbitMQSourceConnector\n...\n Starting task RabbitMQSourceConnector-0\n\n`}</code></pre>\n    <p>{`And Rabbitmq that get the connection from Kafka Connect.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`rabbitmq_1  [info] <0.1766.0> accepting AMQP connection <0.1766.0> (172.19.0.3:33040 -> 172.19.0.2:5672)\nkconnect_1  INFO Creating Channel (com.ibm.eventstreams.connect.rabbitmqsource.RabbitMQSourceTask:61)\nrabbitmq_1  connection <0.1766.0> (172.19.0.3:33040 -> 172.19.0.2:5672): user 'rabbit-user' authenticated and granted access to vhost '/'\n`}</code></pre>\n    <h3>{`Generate sale messages`}</h3>\n    <p>{`The Store application has an OpenAPI `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/swagger-ui/\"\n      }}>{`http://localhost:8080/swagger-ui/`}</a>{` definition to send messages:  `}<inlineCode parentName=\"p\">{`/stores/start/2`}</inlineCode>{` api:`}</p>\n    <img {...{\n      \"src\": \"./images/store-app-1.png\",\n      \"alt\": \"5\"\n    }}></img>\n    <p>{`Or use `}<inlineCode parentName=\"p\">{`curl -X POST http://localhost:8080/stores/start/2`}</inlineCode></p>\n    <p>{`In the trace you should see something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`storeSaleGenerator_1  INFO  [ibm.gse.eda.sto.inf.ItemSaleGenerator] (executor-thread-1) {\"id\":0,\"storeName\":\"SF02\",\"itemCode\":\"IT07\",\"quantity\":7,\"price\":46.79320631709398}\nstoreSaleGenerator_1  INFO  [ibm.gse.eda.sto.inf.ItemSaleGenerator] (executor-thread-1) {\"id\":1,\"storeName\":\"NYC01\",\"itemCode\":\"IT00\",\"quantity\":7,\"price\":0.7764381649099172}\n`}</code></pre>\n    <h3>{`Verify messages arrived in Kafka items topic`}</h3>\n    <p>{`We can use the Kafdrop tool to go to the `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` topic as illustrated below. The tool can be started via the `}<inlineCode parentName=\"p\">{`./startKafdrop.sh`}</inlineCode>{` command under the `}<inlineCode parentName=\"p\">{`infrastructure`}</inlineCode>{` folder after setting a `}<inlineCode parentName=\"p\">{`kakfa.properties`}</inlineCode>{` file as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`security.protocol=SASL_SSL\nssl.protocol=TLSv1.2\nssl.enabled.protocols=TLSv1.2\nssl.endpoint.identification.algorithm=HTTPS\nsasl.mechanism=PLAIN\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"APIKEY\";\n`}</code></pre>\n    <img {...{\n      \"src\": \"./images/kafdrop.png\",\n      \"alt\": null\n    }}></img>\n    <h2>{`Scenario 4: Event Streams on Cloud to DB2 on premise via JDBC Sink connector`}</h2>\n    <p>{`This scenario is using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-messaging/kafka-connect-jdbc-sink\"\n      }}>{`IBM Kafka Connect sink connector for JDBC`}</a>{` to get data from the `}<inlineCode parentName=\"p\">{`inventory topic`}</inlineCode>{` and write records to the `}<inlineCode parentName=\"p\">{`inventory`}</inlineCode>{` table in DB2. This lab explain the definition of the connector and how to run an integration test that sends data to the inventory topic.`}</p>\n    <h3>{`Pre-requisites`}</h3>\n    <p>{`As a pre-requisite you need to have a `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/docs/Db2onCloud?topic=Db2onCloud-getting-started\"\n      }}>{`DB2 instance on cloud`}</a>{` up and running with defined credentials. From the credentials you need the username, password and the `}<inlineCode parentName=\"p\">{`ssljdbcurl`}</inlineCode>{` parameter. Something like “jdbc:db2://dashdb-tx…net:50001/BLUDB:sslConnection=true;“.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Build and deploy the `}<inlineCode parentName=\"p\">{`inventory-app`}</inlineCode>{`. This application is a simple Java microprofile 3.3 app exposing a set of end points for cRUD operations on stores, items and inventory. It is based on `}<a parentName=\"p\" {...{\n            \"href\": \"https:quarkus.io\"\n          }}>{`Quarkus`}</a>{`. The instructions to build, and deploy this app is in the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/jbcodeforce/eda-kconnect-lab/tree/master/inventory-app\"\n          }}>{`README`}</a>{` under the `}<inlineCode parentName=\"p\">{`inventory-app`}</inlineCode>{` folder of `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/jbcodeforce/eda-kconnect-lab\"\n          }}>{`this repository`}</a>{`. At the application starts stores and items records are uploaded to the database.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Verify the stores and items records are loaded`}</p>\n      </li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you deploy the `}<inlineCode parentName=\"p\">{`inventory-app`}</inlineCode>{` from previous step, then you will have the database created and populated with some stores and items automatically. If you want to drop the data use `}<a parentName=\"p\" {...{\n            \"href\": \"https://raw.githubusercontent.com/jbcodeforce/eda-kconnect-lab/master/inventory-app/src/main/resources/drop.sql\"\n          }}>{`the drop sql script`}</a>{` and then reload them the `}<a parentName=\"p\" {...{\n            \"href\": \"https://raw.githubusercontent.com/jbcodeforce/eda-kconnect-lab/master/inventory-app/src/main/resources/import.sql\"\n          }}>{`insert sql script`}</a>{` from `}<inlineCode parentName=\"p\">{`inventory-app/src/main/resources`}</inlineCode>{` folder. For that you can use the `}<inlineCode parentName=\"p\">{`Run sql`}</inlineCode>{` menu in the DB2 console:`}</p>\n        <img parentName=\"li\" {...{\n          \"src\": \"./images/db2-1.png\",\n          \"alt\": \"DB1\"\n        }}></img>\n        <p parentName=\"li\">{`Select the database schema matching the username used as credential, and then open the SQL editor:`}</p>\n        <img parentName=\"li\" {...{\n          \"src\": \"./images/db2-2.png\",\n          \"alt\": \"DB2\"\n        }}></img>\n        <p parentName=\"li\">{`Verify the items with `}<inlineCode parentName=\"p\">{`select * from items;`}</inlineCode></p>\n        <p parentName=\"li\">{` `}<img parentName=\"p\" {...{\n            \"src\": \"./images/db2-3.png\",\n            \"alt\": \"DB2\"\n          }}></img></p>\n        <p parentName=\"li\">{`Verify the stores with `}<inlineCode parentName=\"p\">{`select * from stores;`}</inlineCode></p>\n        <img parentName=\"li\" {...{\n          \"src\": \"./images/db2-4.png\",\n          \"alt\": \"DB2\"\n        }}></img>\n        <p parentName=\"li\">{`The inventory has one record to illustrate the relationship between store, item and inventory.`}</p>\n      </li>\n    </ul>\n    <h3>{`Run the Kafka Connector in distributed mode`}</h3>\n    <p>{`The docker image built in the `}<a parentName=\"p\" {...{\n        \"href\": \"#scenario-setup\"\n      }}>{`setup`}</a>{` has the configuration for kafka connect distributed cluster, we need in this scenario to start the connector and upload the DB2 Sink connector definition. To start it, run the script `}<inlineCode parentName=\"p\">{`./createOrStartKconnect.sh start`}</inlineCode>{` under `}<inlineCode parentName=\"p\">{`kconnect`}</inlineCode>{` folder.`}</p>\n    <h3>{`Upload the DB2 sink definition`}</h3>\n    <p>{`Rename the file `}<inlineCode parentName=\"p\">{`db2-sink-config-TMPL.json`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`db2-sink-config.json`}</inlineCode>{` and modify the DB2 server URL, DB2 username and password. The DB schema matches the user name, so update this setting for the `}<inlineCode parentName=\"p\">{`table.name.format`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`  \"name\": \"jdbc-sink-connector\",\n  \"config\": {\n    \"connector.class\": \"com.ibm.eventstreams.connect.jdbcsink.JDBCSinkConnector\",\n    \"tasks.max\": \"1\",\n    \"topics\": \"inventory\",\n    \"connection.url\": \"jdbc:db2://....services.dal.bluemix.net:50001/BLUDB:sslConnection=true;\",\n    \"connection.user\": \"<username>\",\n    \"connection.password\": \"<password>\",\n    \"connection.ds.pool.size\": \"1\",\n    \"insert.mode.databaselevel\": \"true\",\n    \"table.name.format\": \"<username>.INVENTORY\"\n  }\n`}</code></pre>\n    <p>{`Once done, you can run the `}<inlineCode parentName=\"p\">{`./sendJdbcSinkConfig.sh url-kafka-connect`}</inlineCode>{` to upload the above definition to the Kafka connect controller. When running locally the command is `}<inlineCode parentName=\"p\">{`./sendJdbcSinkConfig.sh localhodt:8083`}</inlineCode>{`. This script delete previously define connector with the same name, and then perform a POST operation on the `}<inlineCode parentName=\"p\">{`/connectors`}</inlineCode>{` end point.`}</p>\n    <p>{`The connector trace should have something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-logs\"\n      }}>{`connector.class = com.ibm.eventstreams.connect.jdbcsink.JDBCSinkConnector\n    errors.log.enable = false\n    errors.log.include.messages = false\n    errors.retry.delay.max.ms = 60000\n    errors.retry.timeout = 0\n    errors.tolerance = none\n    header.converter = null\n    key.converter = null\n    name = jdbc-sink-connector\n    tasks.max = 1\n    transforms = []\n    value.converter = null\n\n`}</code></pre>\n    <h3>{`Generate some records`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`integration-tests`}</inlineCode>{` folder includes a set of python code to load some records to the expected topic.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Start a python environment with `}<inlineCode parentName=\"li\">{`./startPython.sh`}</inlineCode></li>\n      <li parentName=\"ol\">{`Within the bash, start python to execute the  `}<inlineCode parentName=\"li\">{`ProduceInventoryEvent.py`}</inlineCode>{` script, and specify the number of records to send via the —size argument.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`python ProduceInventoryEvent.py --size 2\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`The trace should have something like`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`Produce to the topic inventory\n[KafkaProducer] - This is the configuration for the producer:\n[KafkaProducer] - {'bootstrap.servers': 'broker-0-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-1-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-3-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093', 'group.id': 'ProducerInventory', 'acks': 0, 'request.timeout.ms': 10000, 'security.protocol': 'SASL_SSL', 'sasl.mechanisms': 'PLAIN', 'sasl.username': 'token', 'sasl.password': 'am_rbb9e794mMwhE-KGPYo0hhW3h91e28OhT8IlruFe5'}\nsending -> {'storeName': 'LA02', 'itemCode': 'IT09', 'id': 0, 'timestamp': 1591211295.617515}\n[KafkaProducer] - Message delivered to inventory [0]\nsending -> {'storeName': 'PT02', 'itemCode': 'IT00', 'id': 1, 'timestamp': 1591211296.7727954}\n[KafkaProducer] - Message delivered to inventory [0]\n\n`}</code></pre>\n    <h3>{`Verify records are uploaded into the Inventory database`}</h3>\n    <p>{`Using the DB2 console, use the `}<inlineCode parentName=\"p\">{`select * from inventory;`}</inlineCode>{` SQL query to get the last records.`}</p>\n    <h2>{`Scenario 5: Run the solution components end to end on Kubernetes`}</h2>\n    <p>{`This solution covers all the components of the data pipeline. It still uses DB2 and Event Streams on Cloud but deploy all the other component in OpenShift as part of IBM Kubernetes Service.`}</p>\n    <h3>{`Pre-requisites`}</h3>\n    <p>{`Create the following services in IBM Cloud:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cloud.ibm.com/docs/Db2onCloud?topic=Db2onCloud-getting-started\"\n        }}>{`DB2 instance`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cloud.ibm.com/docs/containers?topic=containers-cs_cluster_tutorial#cs_cluster_tutorial\"\n        }}>{`IBM Kubernetes Service`}</a>{`.`}</li>\n    </ul>\n    <h3>{`Deployment`}</h3>\n    <p>{`To be finished !`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Verify the Store Sale Simulator runs`}</li>\n      <li parentName=\"ol\">{`Verify the connectors `}<inlineCode parentName=\"li\">{`http://localhost:8083/connectors`}</inlineCode></li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}