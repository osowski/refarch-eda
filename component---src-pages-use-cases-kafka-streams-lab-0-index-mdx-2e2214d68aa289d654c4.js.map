{"version":3,"sources":["webpack:///./src/pages/use-cases/kafka-streams/lab-0/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-use-cases-kafka-streams-lab-0-index-mdx-2e2214d68aa289d654c4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <AnchorLinks mdxType=\"AnchorLinks\">\n    <AnchorLink mdxType=\"AnchorLink\">Overview</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Scenario Prerequisites</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Setting up the Quarkus Application</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Creating your first Test Class</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Creating your first Tests</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Next Steps</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Overview`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`In this lab scenario we’re going to use `}<a parentName=\"li\" {...{\n          \"href\": \"https://quarkus.io\"\n        }}>{`Quarkus`}</a>{` - a subatomic and supersonic framework for Java for\nthe purposes of this lab.`}</li>\n      <li parentName=\"ul\">{`We will be testing using `}<a parentName=\"li\" {...{\n          \"href\": \"https://kafka.apache.org/documentation/streams/\"\n        }}>{`Apache Kafka Streams`}</a>{` TestDriver to mimic a Topology, a Stream and Table.`}</li>\n      <li parentName=\"ul\">{`While using the TestDriver we will perform basic stateless operations and understand the testing infrastructure.`}</li>\n    </ul>\n    <h2>{`Scenario Prerequisites`}</h2>\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`For the purposes of this lab we suggest Java 8+`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Maven`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Maven will be needed for bootstrapping our application from the command-line and running\nour application.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`An IDE of your choice`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Ideally an IDE that supports Quarkus (such as Visual Studio Code)`}</li>\n    </ul>\n    <h2>{`Setting up the Quarkus Application`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`We will bootstrap the Quarkus application with the following Maven command`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mvn io.quarkus:quarkus-maven-plugin:1.6.0.Final:create \\\\\n    -DprojectGroupId=com.ibm \\\\\n    -DprojectArtifactId=quarkus-kstreams-lab-zero \\\\\n    -Dextensions=\"kafka,kafka-streams,resteasy-jsonb,quarkus-kafka-streams\"\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Since we will be using the Kafka Streams testing functionality we will need to edit the `}<inlineCode parentName=\"li\">{`pom.xml`}</inlineCode>{` to add\nthe dependency to our project. Open `}<inlineCode parentName=\"li\">{`pom.xml`}</inlineCode>{` and add the following.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka-streams-test-utils</artifactId>\n    <version>2.5.0</version>\n    <scope>test</scope>\n</dependency>\n`}</code></pre>\n    <h2>{`Creating your first Test Class`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Now let’s create our first Test Class.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the directory structure you will need for your Java file. `}<em parentName=\"p\">{`(`}<strong parentName=\"em\">{`NOTE:`}</strong>{` If you are working in an IDE, this may be done for you when you create your package and classes.)`}</em></p>\n        <p parentName=\"li\">{` `}<inlineCode parentName=\"p\">{`mkdir -p src/test/java/eda/kafka/streams`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create a new file named `}<inlineCode parentName=\"p\">{`src/test/java/eda/kafka/streams/FirstKafkaStreamsTest.java`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Paste the following content into the `}<inlineCode parentName=\"p\">{`FirstKafkaStreamsTest`}</inlineCode>{` class:`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package eda.kafka.streams;\n\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\nimport java.util.Properties;\n\nimport org.apache.kafka.common.serialization.Serdes;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.apache.kafka.streams.StreamsBuilder;\nimport org.apache.kafka.streams.StreamsConfig;\nimport org.apache.kafka.streams.TestInputTopic;\nimport org.apache.kafka.streams.TestOutputTopic;\nimport org.apache.kafka.streams.Topology;\nimport org.apache.kafka.streams.TopologyTestDriver;\nimport org.apache.kafka.streams.kstream.Consumed;\nimport org.apache.kafka.streams.kstream.KStream;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport io.quarkus.test.junit.QuarkusTest;\n\n@QuarkusTest\npublic class FirstKafkaStreamsTest {\n\n    private static TopologyTestDriver testDriver;\n    private static String inTopicName = \"my-input-topic\";\n    private static String outTopicName = \"my-output-topic\";\n\n    private static TestInputTopic<String, String> inTopic;\n    private static TestOutputTopic<String, String> outTopic;\n\n    @BeforeEach\n    public void buildTopology() {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"kstream-lab0\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummmy:2345\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        KStream<String, String> basicColors = builder.stream(inTopicName,Consumed.with(Serdes.String(), Serdes.String()));\n        basicColors.peek((key, value) -> System.out.println(\"PRE-FILTER: key=\" + key + \", value=\" + value))\n            .filter((key, value) -> (\"BLUE\".equalsIgnoreCase(value)))\n            .peek((key, value) -> System.out.println(\"POST-FILTER: key=\" + key + \", value=\" + value))\n            .to(outTopicName);\n\n        Topology topology = builder.build();\n\n        testDriver = new TopologyTestDriver(topology, props);\n        inTopic = testDriver.createInputTopic(inTopicName, new StringSerializer(), new StringSerializer());\n        outTopic = testDriver.createOutputTopic(outTopicName, new StringDeserializer(), new StringDeserializer());\n\n    }\n\n    @AfterEach\n    public void teardown() {\n        testDriver.close();\n    }\n\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The above code does a lot in a few lines, so we’ll walk through some of that here.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`@BeforeEach`}</inlineCode>{` annotation on the `}<inlineCode parentName=\"li\">{`buildTopology`}</inlineCode>{` method means that it will be run each time before each test is run, while the `}<inlineCode parentName=\"li\">{`@AfterEach`}</inlineCode>{` annotation on the `}<inlineCode parentName=\"li\">{`teardown`}</inlineCode>{` method ensures that it will be run each time after each test is run. This allows us to spin up and tear down all the necessarry components to test in isolation with each test case.`}</li>\n          <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`buildTopology`}</inlineCode>{` method utilizes the `}<inlineCode parentName=\"li\">{`StreamsBuilder`}</inlineCode>{` class to construct a simple topology, reading from the input Kafka topic defined by the `}<inlineCode parentName=\"li\">{`inTopicName`}</inlineCode>{` String.`}</li>\n          <li parentName=\"ul\">{`The topology we build utilizes three of the stateless processors the Kafka Streams library provides:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`peek`}</inlineCode>{` will allow us to look at the key and the value of the record passing through the stream and continue processing it unaffected `}<em parentName=\"li\">{`(so we leverage this before and after the next processor used to see what is making its way through the topology)`}</em></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`filter`}</inlineCode>{` allows us to drop records that do not meet the criteria specified `}<em parentName=\"li\">{`(either for the key or the value)`}</em>{`. In this test class, we are filtering on any value that does not match the word `}<inlineCode parentName=\"li\">{`\"BLUE\"`}</inlineCode>{` `}<em parentName=\"li\">{`(using a case-insensitive search)`}</em></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`to`}</inlineCode>{` is the final processor used and allows us to write the contents of the topology at that point to an output Kafka topic`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`The Kafka Streams Test infrastructure provides us the capability to leverage driver classes that function as their own input and output topics, removing the need from connecting directly to a live Kafka instance. The `}<inlineCode parentName=\"li\">{`inTopic`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`outTopic`}</inlineCode>{` instantiation at the bottom of the `}<inlineCode parentName=\"li\">{`buildTopology`}</inlineCode>{` method hooks into this test infrastructure, so that our test methods can use them to write to and read from the topology.`}</li>\n          <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`teardown`}</inlineCode>{` method cleans up the topology and all the data that has been sent through it for any given test run, allowing us to reset and rerun test cases as needed.`}</li>\n        </ul></li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`Build the application by running the following:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./mvnw clean verify\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You should see output similar to the following:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`...\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n...\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  29.470 s\n[INFO] Finished at: 2020-09-17T09:34:26-05:00\n[INFO] ------------------------------------------------------------------------\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The build compiled and the test topology was successfully created. But no tests were run, because no tests were written!`}</li>\n    </ul>\n    <h2>{`Creating your first Tests`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Open `}<inlineCode parentName=\"li\">{`src/test/java/eda/kafka/streams/FirstKafkaStreamsTest.java`}</inlineCode>{` and add the following tests to the bottom of the `}<inlineCode parentName=\"li\">{`FirstKafkaStreamsTest`}</inlineCode>{` class:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Test\n    public void isEmpty() {\n        assertThat(outTopic.isEmpty(), is(true));\n    }\n\n    @Test\n    public void isNotEmpty() {\n        assertThat(outTopic.isEmpty(), is(true));\n        inTopic.pipeInput(\"C01\", \"blue\");\n        assertThat(outTopic.getQueueSize(), equalTo(1L) );\n        assertThat(outTopic.readValue(), equalTo(\"blue\"));\n        assertThat(outTopic.getQueueSize(), equalTo(0L) );\n    }\n\n    @Test\n    public void selectBlues() {\n        assertThat(outTopic.isEmpty(), is(true));\n\n        inTopic.pipeInput(\"C01\", \"blue\");\n        inTopic.pipeInput(\"C02\", \"red\");\n        inTopic.pipeInput(\"C03\", \"green\");\n        inTopic.pipeInput(\"C04\", \"Blue\");\n\n        assertThat(outTopic.getQueueSize(), equalTo(2L) );\n\n        assertThat(outTopic.isEmpty(), is(false));\n\n        assertThat(outTopic.readValue(), equalTo(\"blue\"));\n        assertThat(outTopic.readValue(), equalTo(\"Blue\"));\n\n        assertThat(outTopic.getQueueSize(), equalTo(0L) );\n\n    }\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`These are three simple tests:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`isEmpty`}</inlineCode>{` test method checks to make sure the output topic is empty when nothing is sent through the topology`}</li>\n          <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`isNotEmpty`}</inlineCode>{` test method checks to make sure the output topic is not empty when an item matching our filters is sent through the topology`}</li>\n          <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`selectBlues`}</inlineCode>{` test method checks to make sure that our topology is filtering correctly when we send multiple items through the topology and the output topic empties correctly when the testing infrastructure reads from it.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Depending upon versions of the packages brought in, you may see an initial test failure due to needing to update the `}<inlineCode parentName=\"p\">{`src/main/resources/application.properties`}</inlineCode>{` file with the following properties: `}<em parentName=\"p\">{`(The values are insignifcant for the execution of our tests, but he existence of the property is required by the underlying Quarkus & Kafka Streams integration)`}</em></p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`quarkus.kafka-streams.application-id=my-kafka-streams\nquarkus.kafka-streams.topics=topic1\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You should see the tests pass with the following output:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[INFO]\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running eda.kafka.streams.FirstKafkaStreamsTest\n2020-09-17 09:44:33,247 INFO  [io.sma.rea.mes.provider] (main) SRMSG00208: Deployment done... start processing\n2020-09-17 09:44:33,250 INFO  [io.sma.rea.mes.provider] (main) SRMSG00226: Found incoming connectors: [smallrye-kafka]\n2020-09-17 09:44:33,251 INFO  [io.sma.rea.mes.provider] (main) SRMSG00227: Found outgoing connectors: [smallrye-kafka]\n2020-09-17 09:44:33,252 INFO  [io.sma.rea.mes.provider] (main) SRMSG00229: Channel manager initializing...\n2020-09-17 09:44:33,254 INFO  [io.sma.rea.mes.provider] (main) SRMSG00209: Initializing mediators\n2020-09-17 09:44:33,255 INFO  [io.sma.rea.mes.provider] (main) SRMSG00215: Connecting mediators\n2020-09-17 09:44:33,382 INFO  [io.quarkus] (main) Quarkus 1.8.0.Final on JVM started in 2.029s. Listening on: http://0.0.0.0:8081\n2020-09-17 09:44:33,382 INFO  [io.quarkus] (main) Profile test activated.\n2020-09-17 09:44:33,382 INFO  [io.quarkus] (main) Installed features: [cdi, kafka-streams, mutiny, resteasy-jsonb, smallrye-context-propagation, smallrye-reactive-messaging, smallrye-reactive-messaging-kafka, vertx]\nPRE-FILTER: key=C01, value=blue\nPOST-FILTER: key=C01, value=blue\nPRE-FILTER: key=C02, value=red\nPRE-FILTER: key=C03, value=green\nPRE-FILTER: key=C04, value=Blue\nPOST-FILTER: key=C04, value=Blue\nPRE-FILTER: key=C01, value=blue\nPOST-FILTER: key=C01, value=blue\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.722 s - in eda.kafka.streams.FirstKafkaStreamsTest\n2020-09-17 09:44:34,026 INFO  [io.sma.rea.mes.provider] (main) SRMSG00207: Cancel subscriptions\n2020-09-17 09:44:34,038 INFO  [io.quarkus] (main) Quarkus stopped in 0.024s\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n`}</code></pre>\n    <h2>{`Next Steps`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Now that you have finished the foundational Kafka Streams testing lab, you can proceed to `}<a parentName=\"li\" {...{\n          \"href\": \"/refarch-eda/use-cases/kafka-streams/lab-1/\"\n        }}>{`Lab 1`}</a>{` for a deeper dive into more robust real-world Kafka Streams testing use cases!`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}