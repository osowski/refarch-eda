(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{nmOr:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return i}));a("91GP"),a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("q1tI");var r=a("7ljp"),n=a("013z");a("qKvR");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var s={},c={_frontmatter:s},l=n.a;function i(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(r.b)(l,o({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("a",o({parentName:"p"},{href:"https://strimzi.io/"}),"Strimzi")," uses the Cluster Operator to deploy and manage Kafka (including Zookeeper) and Kafka Connect clusters. When the Cluster Operator is up, it starts to watch for certain OpenShift or Kubernetes resources containing the desired Kafka or Kafka Connect cluster configuration."),Object(r.b)("h2",null,"Create a namespace or openshift project"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"kubectl create namespace kafka-strimzi\n\noc create project kafka-strimzi\n")),Object(r.b)("h2",null,"Download the strimzi artefacts"),Object(r.b)("p",null,"For the last ",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/strimzi/strimzi-kafka-operator/releases"}),"release github"),". Then modify the Role binding yaml files with the namespace set in previous step."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"sed -i '' 's/namespace: .*/namespace: kafka-strimzi/' install/cluster-operator/*RoleBinding*.yaml\n")),Object(r.b)("h2",null,"Define Custom Resource Definition for kafka"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc apply -f install/cluster-operator/ -n jb-kafka-strimzi\n")),Object(r.b)("p",null,"This should create the following resources:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Names"),Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Resource"),Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Command"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"strimzi-cluster-operator"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Service account"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"oc get sa")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"strimzi-cluster-operator-entity-operator-delegation, strimzi-cluster-operator, strimzi-cluster-operator-topic-operator-delegation"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Role binding"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"oc get rolebinding")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"strimzi-cluster-operator-global, strimzi-cluster-operator-namespaced, strimzi-entity-operator, strimzi-kafka-broker, strimzi-topic-operator"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Cluster Role"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"oc get clusterrole")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"strimzi-cluster-operator, strimzi-cluster-operator-kafka-broker-delegation"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Cluster Role Binding"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"oc get clusterrolebinding")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"kafkabridges, kafkaconnectors, kafkaconnects, kafkamirrormaker2s kafka, kafkatopics, kafkausers"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Custom Resource Definition"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"oc get customresourcedefinition")))),Object(r.b)("h2",null,"Deploy Kafka cluster"),Object(r.b)("p",null,"Change the name of the cluster in one the yaml in the ",Object(r.b)("inlineCode",{parentName:"p"},"examples/kafka")," folder."),Object(r.b)("p",null,"Using non presistence:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc apply -f examples/kafka/kafka-ephemeral.yaml -n jb-kafka-strimzi\noc get kafka\n# NAME         DESIRED KAFKA REPLICAS   DESIRED ZK REPLICAS\n# my-cluster   3                        3\n# Or\nkubectl  apply -f examples/kafka/kafka-ephemeral.yaml -n jb-kafka-strimzi\n")),Object(r.b)("p",null,"When looking at the pods running we can see the three kafka and zookeeper nodes, but also an entity operator pod."),Object(r.b)("p",null,"Using persistence:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc apply -f examples/kafka/kafka-persistent.yaml -n jb-kafka-strimzi\n")),Object(r.b)("h2",null,"Topic Operator"),Object(r.b)("p",null,"The role of the ",Object(r.b)("inlineCode",{parentName:"p"},"Topic Operator")," is to keep a set of KafkaTopic OpenShift or Kubernetes resources describing Kafka topics in-sync with corresponding Kafka topics."),Object(r.b)("h3",null,"Deploy the operator"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc apply -f install/topic-operator/ -n jb-kafka-strimzi\n")),Object(r.b)("p",null,"This will add the following:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Names"),Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Resource"),Object(r.b)("th",o({parentName:"tr"},{align:"center"}),"Command"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"strimzi-topic-operator"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Service account"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"oc get sa")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"strimzi-topic-operator"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Role binding"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"oc get rolebinding")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"kafkatopics"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"Custom Resource Definition"),Object(r.b)("td",o({parentName:"tr"},{align:"center"}),"oc get customresourcedefinition")))),Object(r.b)("h3",null,"Create a topic"),Object(r.b)("p",null,"Edit a yaml file like the following:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-yaml"}),"apiVersion: kafka.strimzi.io/v1beta1\nkind: KafkaTopic\nmetadata:\n  name: test\n  labels:\n    strimzi.io/cluster: my-cluster\nspec:\n  partitions: 1\n  replicas: 3\n  config:\n    retention.ms: 7200000\n    segment.bytes: 1073741824\n")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc apply -f test.yaml -n jb-kafka-strimzi\n\noc get kafkatopics\n")),Object(r.b)("p",null,"This creates a topic ",Object(r.b)("inlineCode",{parentName:"p"},"test")," in your kafka cluster."),Object(r.b)("h2",null,"Test with producer and consumer pods"),Object(r.b)("p",null,"Use kafka-consumer and producer tools from Kafka distribution. Verify within Dockerhub under the Strimzi account to get the lastest image tag (below we use -2.4.0 tag)."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"# Start a consumer on test topic\n\noc run kafka-consumer -ti --image=strimzi/kafka:latest-kafka-2.4.0 --rm=true --restart=Never -- bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic test --from-beginning\n# Start a text producer\noc run kafka-producer -ti --image=strimzi/kafka:latest-kafka-2.4.0  --rm=true --restart=Never -- bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic test\n# enter text\n")),Object(r.b)("p",null,"If you want to use the strimzi kafka docker image to run the above scripts locally but remotely connect to a kafka cluster you need multiple things to happen:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Be sure the kafka yaml file include the external route stamza:")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-yaml"}),"spec:\n  kafka:\n    version: 2.4.0\n    replicas: 3\n    listeners:\n      plain: {}\n      tls: {}\n      external:\n        type: route\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Get the host ip address from the Route resource")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc get routes my-cluster-kafka-bootstrap -o=jsonpath='{.status.ingress[0].host}{\"\\n\"}'\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Get the TLS certificate from the broker")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"oc get secrets\noc extract secret/my-cluster-cluster-ca-cert --keys=ca.crt --to=- > ca.crt\n# transform it fo java truststore\nkeytool -import -trustcacerts -alias root -file ca.crt -keystore truststore.jks -storepass password -noprompt\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Start the docker container by mounting the local folder with the truststore.jks to the ",Object(r.b)("inlineCode",{parentName:"li"},"/home"))),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"docker run -ti -v $(pwd):/home strimzi/kafka:latest-kafka-2.4.0  bash\n# inside the container uses the consumer tool\nbash-4.2$ cd /opt/kafka/bin\nbash-4.2$ ./kafka-console-consumer.sh --bootstrap-server  my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 --consumer-property security.protocol=SSL --consumer-property ssl.truststore.password=password --consumer-property ssl.truststore.location=/home/truststore.jks --topic test --from-beginning\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"For a producer the approach is the same but using the producer properties:")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{}),"./kafka-console-producer.sh --broker-list  my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 --producer-property security.protocol=SSL --producer-property ssl.truststore.password=password --producer-property ssl.truststore.location=/home/truststore.jks --topic test   \n")),Object(r.b)("p",null,"Those properties can be in file"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"bootstrap.servers=my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud\nsecurity.protocol=SSL\nssl.truststore.password=password\nssl.truststore.location=/home/truststore.jks\n")),Object(r.b)("p",null,"and then use the following parameters in the command line:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"./kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 --producer.config /home/strimzi.properties --topic test\n\n./kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443  --topic test  --consumer.config /home/strimzi.properties --from-beginning \n")))}i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-aaa-orphans-deployments-strimzi-deploy-mdx-f9b39f51b5ecce07c6e9.js.map