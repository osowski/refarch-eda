{"version":3,"sources":["webpack:///./src/pages/index.mdx"],"names":["name","_frontmatter","InlineNotification","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","kind","parentName","isMDXComponent"],"mappings":"yeAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKmB,qBALX,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAoBU,KAAK,UAAUD,QAAQ,sBAA3C,8EACA,6EAA4D,mBAAGE,WAAW,KAAQ,CAC9E,KAAQ,2EADgD,6EAA5D,4RAEmX,mBAAGA,WAAW,KAAQ,CACrY,KAAQ,mDADuW,kCAFnX,KAKA,oSACA,0SACA,2YACA,wUACA,mRACA,4iBACA,sBACE,kBAAIA,WAAW,MAAf,yKACA,kBAAIA,WAAW,MAAf,uNAEF,6IACA,sBACE,kBAAIA,WAAW,MAAf,iDACA,kBAAIA,WAAW,MAAf,+CACA,kBAAIA,WAAW,MAAf,sEACA,kBAAIA,WAAW,MAAf,4DAEF,wWA+BJJ,EAAWK,gBAAiB","file":"component---src-pages-index-mdx-91501a5487fade9594dd.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">Content currently under review - reference cloudnative101.dev landing page</InlineNotification>\n    <p>{`The content of this repository was the source of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/cloud/garage/architectures/eventDrivenArchitecture\"\n      }}>{`event-driven reference architecture in the IBM Garage architecture center`}</a>{`. This git repository is maintained on a weekly basis and includes more content not yet formally published to IBM sites. As we are implementing the end to end solution we are updating this main git repository to keep best practices accurate. When content is stable it moves to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/cloud/garage/architectures\"\n      }}>{`IBM Garage architecture center`}</a>{`.`}</p>\n    <p>{`The modern digital business works in real time; it informs interested parties of things of interest when they happen, it makes sense of, and derives insight from an ever-growing number of sources. It learns, predicts and is intelligent — it is by nature Event Driven.`}</p>\n    <p>{`Event-driven architecture (EDA) is an architecture pattern that promotes the production, detection, consumption of, and reaction to events. This architectural pattern can be applied to the systems that transmit events among loosely coupled software components and services.`}</p>\n    <p>{`The business value is that you can easily extend EDA with new components that are ready to produce or consume events that already are in place in the overall system. While events are more visible, new business capabilities are addressed, like applying insight in real time when events occur. EDA helps also to improve continous availability of microservice architecture.`}</p>\n    <p>{`Events are a way of capturing a statement of fact.  Events occur in a continuous stream as things happen in the real and digital worlds.  By taking advntage of this continous stream, applications can not only react in real time, but also reason about the future based upon what has happened in the past.`}</p>\n    <p>{`For enterprise IT teams, embracing event driven development is foundational to the next generation of digital business applications. IT  teams will need to be able to design, develop, deploy and operate event driven solutions, in cloud native styles.`}</p>\n    <p>{`While event driven architectures and reactive programming models are not new concepts, the move to Cloud Native architectures with Microservices, Container based workloads and “server-less” computing allow us to revisit event driven approaches in this Cloud Native context.  Indeed, we could think of event driven as extending the Resilience, Agility and Scale characteristics of “Cloud Native” to also be Reactive and Responsive. Two aspects of a cloud-native architecture are essential to developing an event driven architecture:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Microservices - These provide the loosely coupled application architecture which enables deployment in highly distributed patterns for Resilience, Agility and Scale.`}</li>\n      <li parentName=\"ul\">{`Cloud Native platforms with Containers and “Serverless deployments” - These provide the application platform and tools which realize the Resilience, Agility and Scale promise of the microservices architectures.`}</li>\n    </ul>\n    <p>{`An Event Driven Architecture should provide the following essential event capabilities to the Cloud Native Platform.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Being able to communicate and persist events.`}</li>\n      <li parentName=\"ul\">{`Being able to take direct action on events.`}</li>\n      <li parentName=\"ul\">{`Processing event streams to derive real time insight/intelligence.`}</li>\n      <li parentName=\"ul\">{`Providing communication for event driven microservices.`}</li>\n    </ul>\n    <p>{`This repository represents the root of related content about the Cloud Native Event Driven Architecture.  It provides guidance for how to approach the design of event driven solutions, introduces the Cloud Native Event Driven reference architecture and provides reusable coding assets for implementation in a cloud native environment.`}</p>\n    {\n      /*\n      ## Taking an Action\n      After an event has occurred is one of the fundamental operations for any event driven solution.  **IBM Cloud Functions** provides a simplified event driven programming model, enabling developers to simply write the *action* code in the language of their choice and have Cloud Functions manage the computation workload.\n      With this simplified model:\n       * A business event of interest would be published to the event backbone.\n      * The *action* for the event would be written as a Cloud Functions action.\n      * Cloud Functions would be configured to subscribe to the event and use it as a trigger to start the *action*.\n      * Cloud functions manages the start-up of all required compute resources.\n      * Cloud functions managed execution of the action code.\n      * Cloud functions manages the shut-down of the computation resources when the action is complete.\n       [Read more ...](./evt-action/README/)\n      ## Real time insights/intelligence\n      Processing continuous streaming events to derive real time insights/intelligence is an essential element of modern event driven solutions. Specialized *streaming analytics engines* provide the means to run stateful analytical and complex event processing workloads across multiple real time event streams while maintaining low latency processing times.\n      Including these engines as part of the Event Driven Architecture enables:\n      * Analysis and understanding of real time event streams\n      * Extracting real time event data from the stream so that Data Scientists can understand and derive Machine Learning models\n      * Running analytical processes, Machine Learning models in line in real time against the event stream.\n      * Matching of complex event patterns across multiple streams and time windows to make decisions and take actions\n      [Read more ...](./rt-analytics/README/)\n      ## Event Driven Cloud Native Apps (Microservices)\n      The event driven architecture must also reach across into our application platform. Developers will build applications which interact with events and are themselves event driven, that is they will both produce and consume events via the event backbone.\n      In this context we can view the Event Backbone as being part of the microservices mesh, providing the Pub/Sub communication between microservices, and therefore enabling the support of loosely coupled event driven microservices.\n      [Read more ...](./evt-microservices/README/)\n      */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}