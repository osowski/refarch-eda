(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{Efxb:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return s})),t.d(n,"default",(function(){return u}));t("91GP"),t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("q1tI");var r=t("7ljp"),o=t("013z");t("qKvR");function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var s={},i={_frontmatter:s},c=o.a;function u(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["components"]);return Object(r.b)(c,a({},i,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",null,"Push"),Object(r.b)("p",null,"Event-Driven applications use a broadcast style of communication when events occur. Rather than using a traditional request and response, in event-driven architectures a push-based communication is often used. Services no longer need to poll to receive updates, they need only subscribe to events and they will arrive as and when they are available (pushed). This can be powerful for on-the-fly data science workflows or real-time client dashboards.  "))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-advantages-push-index-mdx-dda852e744c390d31f6d.js.map